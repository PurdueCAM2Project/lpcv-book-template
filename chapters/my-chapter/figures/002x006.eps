%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 002x006.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: PANKAJ
%%CreationDate: 1/9/10
%%BoundingBox: 0 0 204 372
%%HiResBoundingBox: 0 0 203.5000 371.2164
%%CropBox: 0 0 203.5000 371.2164
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 72 128 8%%BeginData: 6404 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD04FFA87DFF52FD44FF7D52A8277DFFA8A8A8FFA8A8A8FFFD07A8%FFA8A8A8FFFD07A8FFA8A8A8FFFD07A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8FD05FFA8527D52A8A8FD05FFAFFD05FFA8FD05FFA8FD%05FFA8FD05FFAFFD05FFA8FD0BFFA9FD16FFA8FD3DFFA8FD0AFFA8FD46FF%A8FD3DFFA8FD0AFFA8FD44FFA8FFA8FD3DFFA8FD07FFA852FFA8FD44FF7D%4BA884FD3CFFA8FD08FFA8FF7DFD46FFA8A87DFD3BFFA8FD0AFFA8A8FD45%FFA8FFA8A8FD3AFFA8FD0AFFAFFF7DFD40FFA8FFFFFFA8FFFFA87DFD39FF%A8FD05FF7D277D27A8FFFFFFA8A8FD3EFF525227277DFFFFFFA87EFD38FF%A8FD06FFA8FFFFFFA8FFFFFF7DFD42FFA8FD05FF7DFD37FFA8FD0AFFA8FD%04FFA8A8FD40FFA8FD06FF84A8FD35FFA8FFFF5252FD06FFA8FD05FFA8A8%FD37FF7D5252FFA8FFFFFFA8FD07FF7DA8FD34FFA8FF2752FFFF7D277D27%FFA8FD07FF7DA9FD35FF52A8A8FF525227277DFD09FF7DFD33FFA8FF5227%A8FFFFA8FFFFFFA8FD09FF7DFD34FF527DA8FD05FFA8FD0AFFA87DFD31FF%A8FD0AFFA8FD0AFF7E7DFD3AFFFD0DA8537EFD2FFFA8FD16FFA87DA8FD34%FFA8FFFFFFA8FD0BFFA8A8FF7D7DFD2DFFA8FD05FF7D277D27FFA8FD0BFF%A8FFFFA8A8FD32FF525127277DFD0BFFA8A8FFFFFFA87DFD2BFFA8FD06FF%A8FFFFFFA8FD0BFFA8FD04FFA87DFD34FFA8FD0BFFA8A8FD05FFA87DA8FD%28FFA8FD0AFFA8FD0BFFA8FD07FF7DA8FD31FFA8FD0BFFA8A8FD08FF7D7D%A8FD25FFA8FD0AFFA8FD0BFFA8FD0AFFA87DFD2AFF7D7DA876A8FD0BFFA8%A8FD0BFFA97D7EA8FD21FFA8FD05FF7D277D27A8A8FD0BFFA8FD0DFFA8A8%7DFD20FFA8FD05FF7D7D52527DFD0BFFA8A8FD10FF7D7D7DFD1DFFA8FD0A%FFA8FD0BFFA8FD12FFA87DA8A8FD24FFA8FD0BFFA8A8FD14FFA8A87D7E7D%A8A8FD15FFA8FD0AFFA8FD0BFFA8FD17FFA8FF7DA87DA8A8FD1CFFA8FD0B%FFA8A8FD1CFFA8A87DA87DA8A8FFA8FD0BFFA8FD0AFFA8FD0BFFA8FD21FF%A8A9A8A87DA8A8A87DA8A8FFA8FFFFA8FD07FF7D76A8FD0BFFA8A8FD26FF%A8FFA8FFA8A87DA87DA87DFD07FF7D27A8FFFFA8FFFFFFA8FFA8FFA8FF7E%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8%FFFFFFA8FFA8FFA8FFA8FD05FFA8FD0AFFFD047DFFFFFFA852A827FFFFFF%A87DFFFFA8FF52A827FD04FF7D7DFFA8FF527D527DFFFFFF7D7DFFA8FF7D%7D5276FFFFA8FF7DA8A8FFFF7D7D52A8FFA9A852A8FD08FF5227FFFFFF52%277D27A8FFFFA827FFFFFFA85276277DFFFFFF5252FFFFFF52525152FFFF%FF5227FFFFFFA1275227FFFFFFA8277DFFFFFFF85127A8FFFFA8277DFD08%FF7D7DFFFFFFA8527D52FFFFFFA852A8FFFFFF525252CAFFFFFF7652FFFF%FF525252A8FFFFFFA852FFFFFFA852527DFD04FF52A8FFFFFF7D527DA8FF%FFFF52A8FD6CFF7DA85252A8FD43FF52275227FD44FFFD047D525220A8FD%44FF7D7D52A8FD8AFFFD04A8FD44FF5227207DFD44FF7D4B527DFDFCFFFD%8EFFA87DFF52FD44FF7D277D277DFFA8AFFD07A8FFA8A8A8AFFD07A8AFA8%A8A8FFFD07A8AFA8A8A8FFFD07A8AFA8A8A8FFA8A8A8AFA8A8A8AFA8A8A8%FD05FFA8527D52A8A8FD0BFFA8FD05FFA9FD05FF7DFD0BFFA8FD22FFA8FD%17FFA8A8FD24FFA8FD0AFFA8FD16FFA8FD2FFFA8FD16FFA8A8FD25FFA8FD%20FFA8FD2EFFA8FFA8FD15FFA8A8FD26FFA8FD07FFA852FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8FFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA8FD07FF7D51%FD15A87D7DFD24A8FFA8A87DFD08FFA8FD15FFA8FD23FFFD06A8FD09FFA8%FD13FF84FD19FFA8FFA8A87DA87D7D7DA87DA8A8FFA8FFA8FD0AFFA8FD11%FFA8A8FD16FF7EA87D7D7DA8A8FFA8FD14FFA8FD12FFA8A8FD11FFA8A87D%7D7D84A8FD11FFA8FD0AFFA9FD11FFA8FD0FFFA8847D7EA8FD1CFFA8FFFF%FFA8FD11FF7EFD0DFF7E7D597EA8FD19FFA8FD05FF7D277D27A8A8FD0FFF%A8A8FD0AFFA8A87D7DA8FD22FF522727277DA8FD0FFFA8A8FD09FF7D7D7D%FD1FFF84FD06FFA8FFFFFFA8FD0FFFA8FD07FFA8A87DA8FD2BFFA8FD0FFF%84FD07FF7D7D7DFD23FFA8FD0AFFA8FD0DFFA8FD06FFAF7DA8FD2FFFA8FD%0EFFA8A8FD04FF7D7DAFFD26FFA8FFFF5252FD06FFA9FD0DFFA8FFFFFFA8%A87EFD2AFF7D5252FFA8FFFFFFA8FD0DFFA8FFFFFFA87DA8FD29FFA8FF27%52FFFF7D277D27FFA8FD0BFFA8FFFFFFA8A8FD2DFF527DA8FF52272727A8%A8FD0AFFA8A8FFFF7E7EFD2CFF84FF5227A8FFFFA8FFFFFFA8FD0AFFA8A8%FFA8A8FD2FFF527DA8FD05FFA8FD0BFFA8FF7DA8FD2EFFA8FD0AFFA8FFA8%FFA8FFA8FFA8FF7DFFA8A8FD39FFA87E7DA87DA87DA87DA87D7D5252FD30%FFA8FD14FFA8A87EFD36FFA8FFFFFFA8FD09FF7D7DA8A8A8FD2FFFA8FD05%FF7D277D27FFA8FD07FF847DA8FF7DFD30FFA8FD05FF522727277DFD07FF%A87DA8FFFF7EA8FD2FFFA8FD06FFA8FFFFFFA8FD06FFA87DFFFFFF7DFD3A%FFA8FD06FFA87DFD04FF84A8FD2FFFA8FD0AFFA8FD05FF53A9FD04FF7DFD%3AFFA8FD05FF7D7DFD04FFA8A8A8FD2FFFA8FD0AFFA8FD04FF7DFD06FF7D%FD36FF7D7DA876A8FD04FFA87DFD06FFA8A8FD2FFFA8FD05FF52277D277D%A8FFFFFF7DFD07FF7DFD30FFA8FD05FF7D7652527DFFFFFF7DA8FD07FF7E%A8FD2FFFA8FD0AFFA8FFA87DFD08FF7DFD3AFFA8FFFF7DA8FD08FF84A8FD%2FFFA8FD0BFFA87DFD09FF7DFD3AFFA8FF7DA8FD08FFA8A8A8FD2FFFA8FD%0AFFA884FD0AFF7DFD38FF7D76A87DA8FD0AFFA8AFFD2FFFA8FD07FF7D27%A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFFFA8A8FFA8%FFA8FD08FFFD047DA8FFFFA152A827FFA8FFA87DA8FFA8A852FF527DA8FF%FF7D52FFA8FF52A87D52FFFFFF7D7DFFA8FF7D7D5252A8FFA8FF52A8FFFF%FF7D7D52A8FFFFA827A8FD08FF5227FFFFFF52277D27A8FFFFA827FFFFFF%A852A82752FFFFFF5252FFFFFF52525227FFFFFF5252FFFFFFA8275227FF%FFFFA8277DFFFFFFF85227A8FFFFA8277DFD08FF7D7DFFFFFFA8527D52FF%FFFFA852A8FFFFFF527D52A8FFFFFF7D52FFFFFF52527D7DFFFFFFA852FF%FFFFA852527DFD04FF52A8FFFFFF7D527DA8FFFFFF52A8FD6CFF7DA85252%A8FD43FF52275227FD44FFFD047D525227CAFD44FF7D5252A8FD8AFFA852%A8A8FD44FF52F8277DFD44FF7D52767DFD65FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li/>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">CT, ST, BT</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:rights>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">© 2005 by Taylor &amp; Francis Group, LLC</rdf:li>
            </rdf:Alt>
         </dc:rights>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Book Title</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-01-09T12:51:05+05:30</xap:CreateDate>
         <xap:ModifyDate>2010-01-09T14:50:35+05:30</xap:ModifyDate>
         <xap:MetadataDate>2010-01-09T14:50:35+05:30</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>140</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8x1/yh+Z91Y61Z6d&#xA;exRG91htQ0y7/TF/BJbWvCJBBRLaQ8WIlf0g3poxXZlFMVZ/BJqdwryJNBGglljVTC7GkcjIKkSr&#xA;/L4YquaLWarxubalfjrA9aUPT9940xVd6Wrf8tMH/Ih/+q2KrUi1mnx3NtWppSB6Ur8PWbw64q5o&#xA;tZqvG5tqV+OsD1pQ9P33jTFV3pat/wAtMH/Ih/8Aqtiq1ItZp8dzbVqaUgelK/D1m8OuKuaLWarx&#xA;ubalfjrA9aUPT9940xVd6Wrf8tMH/Ih/+q2KrUi1mnx3NtWppSB6Ur8PWbw64q5otZqvG5tqV+Os&#xA;D1pQ9P33jTFV3pat/wAtMH/Ih/8Aqtiq1ItZp8dzbVqaUgelK/D1m8OuKuaLWarxubalfjrA9aUP&#xA;T9940xVd6Wrf8tMH/Ih/+q2KqH1y9/Rvq8ovrP1j0OfBvTp9Z9GvDnX7P+V1xVMsVdiqE0v/AHmf&#xA;/jPcf8n3xVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp/6Vv/AEf/APY/hVNsCsf85+VpfMVr&#xA;pkMVzFaSadqdnqiSywG4qbOUS8EAkh4F6cS9T8JIpvirvLeoXJ1HVNNvG+OO4lubE0ADWskzr2A+&#xA;JJVdW3O3E/tYVZBgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpL6b/ofh6rcvr397ReX+9/+rx/D&#xA;CqdYFdirGNSSW1t4NegQvJpVzd/Wo1rV7KadhcqB3KcElA6kpx74VZNHIkiLJGweNwGR1NQQdwQR&#xA;gVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp/wClb/0f/wDY/hVNsCvG9X/5x8u9Qk1BU8yiCz1L&#xA;V/0zPD9S5v6iSzyxDmbgAsv1pgzlPiCoOICkMq9X0pCLebkxdWuLiitSgHruKCgH44qlvl1jpt3P&#xA;5bkNI7VfX0kn9qxY0EYqTU2zn0/ZPTrucVT/ABV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJfTf9D8&#xA;PVbl9e/vaLy/3v8A9Xj+GFUJpfnX9KeaDpNlps8+kNYLqFv5ljaKSwmDuEWON42b4j8WxofhJpSh&#xA;wKyXFUJpf+8z/wDGe4/5PviqG1/Tbi5ghu7EL+ltPcz2Bc8VZipV4XahokqEqdjQ0alVGKonSdUt&#xA;dU0+K+teQjlqCjjjIjoSrxyL+y6OCrDsRiqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpT/ANK3/o//&#xA;AOx/Crzz8itIlsY72eTQ5bD61DHImr3NsI7m+5Tzs0k9y0vrXLEtyV5rWCTiRyXpgVQv/wAg9QuL&#xA;u+kg8z/V7a/1c6zNB9SLkyLJPJEHJuAjshuzVmQhuEfw0SjKvU9JVhBKS5YNcXBCmlF/fuKCgH44&#xA;qjcVY5qNfL+py6yi/wC4e9K/plFBPoygBEvQP5eICTbdAr7BWqqyMEEVG4PQ4q7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FUl9N/0Pw9VuX17+9ovL/e//AFeP4YVTrArsVSixsLqRJZF1G4iQ3NwREi25UD12&#xA;2HKJm/ZPU9z7UVVxpl6KV1a7NKVqtrvTj4Qd+J+8+1FXfou6I4vqlzImwdGS1ow+GoakA+1xNfmf&#xA;airGvL11ceWoEsr+czeX2uJ7ewvpeINo0dw8UdvNxCoImCgRMAAp+DYcMKs1wK7FXYq7FXYq7FXY&#xA;q7FXYq7FXYqlP/St/wCj/wD7H8KptgV5DqX5D6tcLrCWPmyTTl1bVU1hjHZhyJYLt7qFZQ0/CYKZ&#xA;jyqo5FIjsEKuq9R0lWEEpLlg1xcEKaUX9+4oKAfjiqNxV2KpZo8UM+mXEMyLLDLc3ySRtxdWU3Uo&#xA;ZWG4II6g/TiqXIbzywOEhlvPLi19OSjzXNkK7KwXk8sA7N9pB9rktWVVkME8FxDHPBIs0Eqh4pYy&#xA;GRlYVDKw2IOKr8VdirsVdirsVdirsVdirsVSX03/AEPw9VuX17+9ovL/AHv/ANXj+GFU6wKlE3nH&#xA;yjAk7za5p8SW1x9SuWe6hUR3Jr+4clvhl+E/Ad9sVRml/wC8z/8AGe4/5PviqLxV2KpfoZrZSGtf&#xA;9LvBWtel1KP5n/X9A6YqmGKpDNoF5p873fl2RIDI3O40qYkWUzE1Zl4q7W8jV3dAVPVkY74qiNO8&#xA;yWlzcrY3cb6bqpFRYXXEO4pUmF1LRzL7oxp+1Q7Yqm2KuxV2KuxV2KuxV2KuxVKf+lb/ANH/AP2P&#xA;4VTbArzm7/I/y/OuqpHq2pW0Os3Jur2KM2TKT68lysama1lZUV55R1qyuysWWgCrOdJjVYJWBNXu&#xA;LgmrEj+/cbAnb6MVRuKuxVL9DNbKQ1r/AKXeCta9LqUfzP8Ar+gdMVTDFXYqh7/TrDUbY21/bx3V&#xA;uxBMUqh1qOhoe47HFUq/QutacAdG1FpoV/6V+pl50p1pHc/70IT/ADSGUDsuKtjzLNakrrGmXNjx&#xA;rW5iU3lq1D1WSANIq035SxJiqZafq2l6lG0unXkF7Eh4u9vIkqhvAlCRXFUVirsVdirsVdiqS+in&#xA;6H9Krcfr1K825f73/wA1eX44VTrAqE1LWNJ0uKKXU723sYppFghkuZUhV5XBKxqXKgu3E0Ub4q7S&#xA;/wDeZ/8AjPcf8n3xVF4q7FUv0M1spDWv+l3grWvS6lH8z/r+gdMVTDFXYq7FXYq7FUv1Dy9oeoyi&#xA;e9sYZrlBSO6KATp/qTLSRP8AYsMVQo8tyQVGn6vqFopG6PMLxSRuCTercyD5K4xVd6Pm6FQVurG8&#xA;47GJ4JbZmHvKss4B+UX9MVcdR8yw/FcaPHMm/wANldrK+3tcR2i7/wCtirZ1+6jNbjRdQhj/AN+c&#xA;bebp/k2800nTf7P44q2PM+mk09G//wC4dfe//FPtiqF/SVn/AId/SHNvqv1z1OXB+XH6/wDyU519&#xA;qVwqyDArHPPHkPRvOen2tjqks8UNrObhTbMis3KGSB42LpJ8LxzMDSjeBGKpT+W9/wCZNe03ULrz&#xA;Npkuj3cV60cFun1u0VozFHIx4SSHnxlkdPUT4HpUDFUj8y+YvONj5t1XTLXRp5NOtrGWbRNQaHWL&#xA;mJr4QxtGZZbMz1QmSZDGqB/g+18YxVm/liG5v/LelX2qRXFpqd1ZwTX1qZrmL055I1aRPTeVmTi5&#xA;I4sajvviqW+QkuL7Sr46ha3FjNBqeoQolL+0EsQunaK4VLiRmb1kYOWU8SSaeAVY9578weaNK1TV&#xA;LPSNOuLtreys7nRLhrTWrqE3cs8sd1FLLZmRTxt1DLTjQtQnFWdaLaSXWj2FzfJcW99PbxSXVuZ7&#xA;hDHK6BnQr6r8eLEinI/M4qkXka41HUpNeh1S3ubVbDU5oNOk9PUbET2pVWWWlzI3qEyGQc0bidjQ&#xA;V3VYx538y+c9L1/VrDSdNmvIrW1gn0a4ax124i+tSOiyRyT2pkST9y0p+AKFPEFieQVV6JotpJda&#xA;PYXN8lxb309vFJdW5nuEMcroGdCvqvx4sSKcj8ziqR+QJ9W1Wx1I61YzWE1pqE0Fu0b6jBHPDxSU&#xA;TIl36M32pGVm48SykrtirG/PvmTzlpOt31jpGkS3sUdpHPpF56GuXaLd+pGskdw1qpjIeCSXh6b/&#xA;AAlfjpXFXoGi2kl1o9hc3yXFvfT28Ul1bme4QxyugZ0K+q/HixIpyPzOKpB+Xt3resw642uaPd6G&#xA;bLV7m106CWW4RpbRQjxzk+tIkhdnarxnhXYE0JxVjf5g+aPO2k+ZbnTNF8v3dxZxaal1purSxapf&#xA;QSag1wiPEfqEkjIotWkpzVTz/wAmhZV6HotpJdaPYXN8lxb309vFJdW5nuEMcroGdCvqvx4sSKcj&#xA;8zirzb/Fn5nf8qz+u/oKP9OfpT0PQ+o6r6f1anrfWPQ5/pH+9258K8v2OPxYq9gxV2KuxV2KuxV2&#xA;KuxV2KpP5x1PWNK8q6rqWi2P6S1W0tpJrKxo7erIi1VQsYZ2P+Su7dNq1xVhFt+Y/mqPXjea3bRa&#xA;Z5Mhgv7i5n/R2ozTRizuVs41e5/dxo0z+pMFMFREoqByqqrN9C83eX9dvNTs9LuWnuNHna11BGim&#xA;iCTKzoVVpURZByjYckJG3XFU4xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsG89fmL5A0q8&#xA;l8seZojeSXcETx6e9sLqK7eZpPStgpDJ6rNBsJOK7rvirIvLmm+V4rY6roFlbW8esql5Ld28KxPc&#xA;+oOaSytxV3Yh61fffFU3xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpBrvkHyZr9419rWkW&#xA;1/eNAtqtxOvKSONGdk9FusTq0rESR0cV69MVTyCCC3gjggjWGCFRHFFGAqIiiiqqjYADYAYqvxV2&#xA;KuxV2KuxV2KuxV2KsP1T8ztK07TdV1CXTb+WLRtT/RF6kSQM4kMcciTLWYAxOJ0C78yzBeFdsVZO&#xA;+qaYjsj3kCupIZTIgII2IIJxVYdZ0cEA31uCxooMqbmldt/bFW/0vpP/AC2wf8jU/rirS6zo7Cq3&#xA;1uRUiolQ7g0PfFXHWdHBAN9bgsaKDKm5pXbf2xVv9L6T/wAtsH/I1P64qtTXNFkBKahbOFJVuM0Z&#xA;ow2IND1GKtnWdHBAN9bgsaKDKm5pXbf2xVv9L6T/AMtsH/I1P64q0us6Owqt9bkVIqJUO4ND3xVx&#xA;1nRwQDfW4LGigypuaV239sVb/S+k/wDLbB/yNT+uKtLrOjsKrfW5FSKiVDuDQ98VcdZ0cEA31uCx&#xA;ooMqbmldt/bFW/0vpP8Ay2wf8jU/riqp9esvq31r6xF9WrT1+a+nXlwpyrT7W3zxVXxVIbvyD5Ev&#xA;ZJJLzy5pdzJNK9xM81lbyF5pCpeViyGrtwXkx3NB4Yqmel/7zP8A8Z7j/k++KosqCQSASDUex6Yq&#xA;7FXBQBQAAVJ28TucVcVBIJAJBqPY9MVQerXslnZNJCglunIitYSaB5pDxQH/ACQd2I6KCe2KqmnW&#xA;S2VlFbKxkKD45W+07seTyNT9p3JY+5xVEFQSCQCQaj2PTFXYq4KAKAACpO3idzirioJBIBINR7Hp&#xA;irsVcFAFAABUnbxO5xVxUEgkAkGo9j0xV2KpT/0rf+j/AP7H8KptgVj/AJz82xeWLXTLmWOKSO/1&#xA;Oz0x/VnEHAXkoi9RKq/Mx15FPh+EE12xVE6fq1qiSwslwXS6uEJW2uGWvqu2zrGVIp3BpXbriqJX&#xA;WbRhUR3NKK29pcg0c0Gxj6+I7d8VcdaswCfTutgx/wB5Lr9g0P8Auv7vHtirf6YtOXH07mvLj/vL&#xA;c0rx5dfTpSnfpXbrirQ1qzIB9O63Cn/eS6/bNB/uv7/DviqWR61a3mryXBjuTaaeskcP+iXLcrio&#xA;EzgCM7xrRE7nk46YVTP9M2df7u67D/eS57/888CtfpqzpX07rpX/AHkuvGn++8Vb/TNnX+7uu4/3&#xA;kue3/PPFXfpmzr/d3XYf7yXPf/nnirX6bsqE+ndUALf7x3XRaV/3V77Dviq79MWnLj6dzXlx/wB5&#xA;bmlePLr6dKU79K7dcVaGtWZAPp3W4U/7yXX7ZoP91/f4d8VcdaswCfTutgx/3kuv2DQ/7r+7x7Yq&#xA;3+mLTlx9O5ry4/7y3NK8eXX06Up36V264ql316D/AA/9d4y+j9c58fRl9Wn17/fPH1a/5PGuFU+w&#xA;K7FUJpf+8z/8Z7j/AJPviqLxV2KuxVB6tdTW9mRbU+uTkQ2gYEj1X2DEDcqgq7U/ZBxVVsbSOztI&#xA;raMkrEoHJqcmPVmandjuffFVfFXYq7FUv1XzDoOkBTqmo21iXBMa3EqRs1P5VYgt9GKoAecI52Vd&#xA;N0nU9QqvMutqbRAvaj37WiNX/IJxVcNQ85Thmh0e0tUbkI/rd63rL/KzxQQTR/Qs304q21l5zkj4&#xA;tq1jCSByaGwk5A1qeJkunXptumKrm8v6oylW8x6jRgQeKWC9QRsRa8h9rx7D3qq2vlWw+1Jd6jLI&#xA;SSXOoXiVq3L7EcqIKdNl6Yqofo63/wAP/Uuc3o/Xqc/Xm9b/AI6HL++5+r1/yum3TCrIMCvG9X/5&#xA;yMtNNk1C3fRg95Z6v+ioLb63R5o1lnilmoIWKtF9XVmiAbaRPiqwGKvV9JkVoJVANUuLgGqkD+/c&#xA;7Ejf6MVRuKuxV2KpZbcr3VZrtt7ay5W9qKdZf93yfRtGvhR/HFUzxVQvr+x0+1kvL+5itLSKhluJ&#xA;3WONakKOTuQoqTTFWPDzVrGq7eWdIee3Zarq2pF7K03UFTHGUa5l6/77VT2fFVWPyvq16OWv65c3&#xA;FTyNnpxbTbZfhoAGhY3bU3+1cFT/AC4qmek+XtB0gP8AovT7eyaQASvBEiPJTvI4HJz7sScVTDFX&#xA;Yq7FXYq7FUl9ZP0P6tG4/Xq04Ny/3v8A5acvwwqnWBXYqhNL/wB5n/4z3H/J98VReKuxVBavdTwW&#xA;gS1p9duWEFpUFgJHBPNh3WNQXYdwMVRFrbR21tFbxV9OJQikmpIApUnuT3OKpHeeZbm7uJdP8tQp&#xA;fXkTGO4vpCRY2zgVKySLvLIP99R7/wAxTriq6w8oWq3aajrE761qqfFFcXSr6UDUXl9VtwPThqV6&#xA;7v4ucVT/ABV2KuxV2KuxV2KuxV2KpT/0rf8Ao/8A+x/Crz78q7q88x+bLzzVqlLbVE09LKbTo9Qd&#xA;ihM7AvdaS4c2EzpboeAldeu5NTgVDX//ADkTp9jd31nPpPG5ttXOlQx/WhV445J0lndREXVoxbAm&#xA;JVc/vYxWr4q9T0mRWglUA1S4uAaqQP79zsSN/oxVG4q7FUstXW61C5v3NLW1DW1qzbCqmtxJvTYs&#xA;Am/TgSNmxVAM1/5kZTbzS2Pl8NUzxkx3N7Q/7rb7UVu3860d/wBkqtGdVPLOztLK2jtbOCO2tohS&#xA;OGJQiKCa7KtANziqtirsVdirsVdirsVdirsVdiqS+sn6H9Wjcfr1acG5f73/AMtOX4YVQXknyDp3&#xA;lO3Mdpe3t27xJFN9ZnZoKo7vWC1HG3tlrKQEhRUC0FMCsnxVIbTzDYW4mt5IrxpEubhS0djeSpUz&#xA;npJHCyMPjG4Pj4GiqunmjTGFRDf9Ad9Ovx1KjvAP9+D8f5WoqgNX84Wi2gitYr9Lq7ZYYXbTr9eH&#xA;MAtJ8UHWOMl6ex8DRVD6Fdab5stV+pcv8K2bCGOKRHRrySMA/vFlCv6K1GzCsjdfh+2VZdgV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVKf+lb/0f/8AY/hVNsCvIdS/5yK0nS11g32lSI2l6qmmKscplLRG7e2m&#xA;uZVWLnEIRGGZAr7yRLWsgxV6jpLMYJQUKhbi4AY0o379zUUJ/HFUbirDZGuPM2vXdrEeOj2v+i3k&#xA;ylgXjNGkgQilDOwXnv8ADEq8f72qlUz8oIiJq6IoVF1O4CqBQADiAABiVT/ArsVdirsVdirsVdir&#xA;sVdirsVdiqS+o/6H5+k3L69/dVXl/vf/AK3H8cKp1gV2KoTS/wDeZ/8AjPcf8n3xVLvNurXdnYxW&#xA;Wm8W1nVZBaacjGgVmFZZ2pvwgjDOfkB1IxVHaJo9po+mQ2FqD6cQ+J2+07sau7U2qzGu23YbYqgP&#xA;Kf8A0uf+2pc/8a4Sqe4FdirsVdirsVdirsVdirsVdirsVSn/AKVv/R//ANj+FU2wK8i1H8yvzOto&#xA;9cVfL7rc2eomHSVGlancpcWq3EsTVaAlaiP0ZfWqEKs3FWK0xV6hpLMYJQUKhbi4AY0o379zUUJ/&#xA;HFUn8tt+mdTuvMz/ABWrBrLQx2+qIw9W4H/MTKlQe8aRnucVZLiqReU/+lz/ANtS5/41wlU9wK7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqkvqP+h+fpNy+vf3VV5f73/wCtx/HCqdYFdirFdanuZ7CHQbJnju9Z&#xA;urqGSeMkNBZpM5upwwB4kIRGjdpHTCrJra2gtbeK2t4xFbwIscMSiiqiDiqgeAAwKqYqkXlP/pc/&#xA;9tS5/wCNcJVPcCuxV2KuxV2KuxV2KuxV2KuxV2KpT/0rf+j/AP7H8KptgViH5l+Y/N+haXY3HlfS&#xA;v0tdz3ghuIfRmn4xejK42hZSnORET1G+FOVWxVT8q3AvNY1jV4jHqSRXEmn2L2VxbTxwwq5nkDES&#xA;/BNJJLWRf5Vjr0wqm115x0u1u57SZo4rmzga8v4ZbqzSSC0RatcSIZqrGNqs1AK9cCo211f63bQ3&#xA;VrayXFrcIssE8Uls8ckbjkroyykMrA1BGKpX5XvIzb31xZob6G5vrmUyW8trIiMH4NGWSZhyQpRh&#xA;2O3bCqKufNdjbzXMUoWN7CL61qSyXFojW1sVdhPKpm+BP3Z+JqDYmu2BUVa6v9btobq1tZLi1uEW&#xA;WCeKS2eOSNxyV0ZZSGVgagjFUPpfmW21SOd7CP62LaeS2uDbT2s4jljO8blJjxcKyllO4riqjcec&#xA;9Jgu7q0keJLjTojc6pC91ZpJbWwTmZpkM1USlPiagoa1xVHWur/W7aG6tbWS4tbhFlgniktnjkjc&#xA;cldGWUhlYGoIxVT0/Xk1CBprS3a4jWR4i8E1tKoaNipBZZach3HbpiqF1HzlpWnNN9deO1FoqSXx&#xA;uLqzi9CKQ8Y3k5zDiHeirypWuKphBqjXEEc8FnLNBMokilje3ZHRhVWVhLQgjcEYqo2OvJe/WBb2&#xA;7TNazPb3KwzW0vpypv6cnGX4X4spKncVxVC6r5x0rSnK6i0dl6cf1if61dWcBjgLCITEPMPg9VlS&#xA;vSp612xVMINUa4gjngs5ZoJlEkUsb27I6MKqysJaEEbgjFUg/wAW+V/8MfpX9L2H1D69T6z9ctfR&#xA;9T6163pet6no+pw3488VZbirsVY55H8iaP5NsLqx0uW4mhupxcMblkdl4xRwJGpRI/hSOFQK1bxJ&#xA;xVK9b/KXQtW8xX2uvfXcFxqVu9reWyrZz2zpJHFE1Yru2uBUi2iPhVem7VVZToWkW2i6JYaPavJJ&#xA;badbxWsLzMGkZIUCKXICgsQu9AMVQ3lny1b+X7W7toLq4u1vL251B2ufS5LJeSmaVU9KOIcPUZiK&#xA;gnfr0xVK9f8Ay7sta1e91KbU7uH9I2Mem3dksdhNbPbxNK6Ax3VrcVIedm3PWnbbFU90LSLbRdEs&#xA;NHtXkkttOt4rWF5mDSMkKBFLkBQWIXegGKpboXlzT/K/6c1CTUppotTupNUv5r426JC3AK5V44oO&#xA;Maxxr9smgHXrirGtc8t+R9Y88XsU/mtY9d1O0OnzeXQ+kyloBGJWAtbm2nmYkIsrFq7KtfgUAKs3&#xA;0LSLbRdEsNHtXkkttOt4rWF5mDSMkKBFLkBQWIXegGKpf5Q8maZ5Wg1CGwkkkXUbx76fmkESrI8a&#xA;R8Y47aK3iVeMQ/ZqTUkk4qknmz8o9D8y6zcardX11azXdsLO5it4dOKSQh45KSGe0nkko8CMpdjx&#xA;p8PHFWYaZYQ6dptpp8DO0FnDHbxNKxdykShFLsd2ag3OKpN5L8i6P5Qh1WHS5bqVNX1CbVbj63MZ&#xA;2We4VA4V2HMr+7rVyzE1qxxVJfNv5N+XvMvmK4165v7+2u7uxXTLuGJ7ea3kt0mWdV9G8gukSkka&#xA;t+7477/aJJVZnplhDp2m2mnwM7QWcMdvE0rF3KRKEUux3ZqDc4qwr/lS/lj/AAj/AIX+tXf1H67+&#xA;kPUpaV9Xhw4+h9X+qenx/Y9Clfi+1virPsVdirsVdirsVdirsVdiqV+afLmn+ZfLuoaBqPIWWpQP&#xA;bztHx5qHH2k5q68lO61U74qxCf8AK+90q2uNQ8p6m8HmVbe9gspLhbaO1L396t28k4S1lYlREka8&#xA;RTgoUBeoVTzyfZefYNR12XzPfQXVhcXbSaDBCUL29sXkIjk4QQbhCg3eQ7H4sVZPirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVeV/mP5Y/NrUfOB1DytqctrokWlrDJZx3Yt/XladmmSNGSVfWa&#xA;EcUlJj4llIccWqq9K0iPUYtKso9TlSfUkgiW+njFEecIBK6ii0DPUjYYqisVdirsVdirsVdirsVf&#xA;/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:1A3ECDDBAEFEDE11A796E26E950F61BE</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:D156319BC0FEDE11A796E26E950F61BE</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>3f8d1b48-f9de-11d9-b7f0-eb3bc82ef1b2</stRef:instanceID>
            <stRef:documentID>adobe:docid:indd:96f50934-fd2d-11da-9682-a52db62106c2</stRef:documentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:Urgency>5</photoshop:Urgency>
         <photoshop:Country>33487</photoshop:Country>
         <photoshop:State>FL</photoshop:State>
         <photoshop:City>Boca Raton</photoshop:City>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapRights="http://ns.adobe.com/xap/1.0/rights/">
         <xapRights:Marked>True</xapRights:Marked>
         <xapRights:WebStatement>http://www.taylorandfrancis.com/</xapRights:WebStatement>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>51.000000</stDim:w>
            <stDim:h>66.000000</stDim:h>
            <stDim:unit>Picas</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>WarnockPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Warnock Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>OTF 1.009;PS 001.000;Core 1.0.26;makeotf.lib(1.11)</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>WarnockPro Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 485 U</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>94.999702</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -371.216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 371.216 li
203.5 371.216 li
203.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.498487 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
199.389 141.283 mo
25.8696 141.283 li
25.8696 4.62305 li
199.389 4.62305 li
199.389 141.283 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /WarnockPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright (c) 2000 Adobe Systems Incorporated. All Rights Reserved. Patent Des. pending.Warnock is a trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 48 /zero putdef/UniqueID 44788 def/FontBBox {-177 -533 1474 950} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-25 -0 657 682 439 464 640 653 708 733 475 500] def/OtherBlues [283 308 -251 -226 -154 -129 -194 -169] def/FamilyBlues [-25 -0 657 682 439 464 640 653 708 733 475 500] def/FamilyOtherBlues [283 308 -251 -226 -154 -129 -194 -169] def/StdHW [32] def/StdVW [85] def/StemSnapH [32] def/StemSnapV [85 90] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/space <1C60D8A8C9B8812A43> |-/zero <1C60D8A8C9B7A59E2EB7A48AB3C3B0C302396F5A9D10B2EBC96A9FA2D1F133E75E3CF9D35F7AF12F7066BE8B17D30E3901E183510C549565CC6090469431C0EE594ACF87D48293475174FE00A8E0A2C6044D3FACB5657B60927E> |-/.notdef <1C60D8A8C9B7A73DC56ED86593A26411A239A9F576A4BB06AD4079CBD73625AFEDCD129CE8B573E3C4C05A38ADB9D43C2E751D7FE69FF5F6F4BCADD50244964753D5C819FE275F32A27920BE3EA3D1AFD957ADA922B28CD2CD8E1558DDDC89C143A1> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular /WarnockPro-Regular findfont ct_VMDictPut/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 207{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf23.8481 149.811 mo(0 )[4.01611 0 ]xsh43.1406 139.534 mo
43.1406 141.354 li
43.1406 4.62061 mo
43.1406 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B886224D04FE4EA48370B1631453AE1A7F41194A72339FD9D23C8D609AB2C177458154A81302EE10CEE2590DBBFF933D85893FA923B6> |-/five <1C60D8A8C9B7A59E2EA88D2D2E4678F2BBD254D27572FD0890ABE0FCC60DBD058F39CFAA2F9CD8D239045235439436DEF3EE621583ACE43361E1BE1EE0A4025623AAC7B3E47984A66037762A0736D95424AE2D20BFF72BAC46999446078E1A7358F849BD22641602B391789266432B0FF6B81722C863DA987D6B5984EFCED2F281078B14BDE12958D563817B4366D1CC2C89C4BD22B178D0AEB8E5B2695BE4DCD128B0199DF21F352F1D7E35709BAFEF87351BF4117E788C8FE3A5ECE84BB1378240E9B726CAAD70C73E> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 46 /period putdup 53 /five putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 4{/.notdef}rp /five 202{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf38.2124 149.811 mo(0.5 )[4.01611 1.82373 4.01611 0 ]xsh0.747731 lw
4 ml
60.6685 139.534 mo
60.6685 141.354 li
60.6685 139.534 mo
60.6685 139.605 li
0 0 0 1 cmyk
@
0.498487 lw
10 ml
60.6685 4.62061 mo
60.6685 6.44189 li
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A59EDB27E136DF6EDF69D5D59E7D8F1524150272EC95BE64A478A636710A8318A54B62A17FFB76A3F3CCDB5EEE73376DF9BD22D44937DB8E8FC17BE93127BBFACA72674F95583E33214AF65D7B65738AA65F76A7CCF6F4543BDA95ACC5E12441FF7CCE8C92FA1F3495FADCEA79F3942D79439C56> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf58.6606 149.811 mo(1 )[4.01611 0 ]xsh77.9033 139.534 mo
77.9033 141.354 li
77.9033 4.62061 mo
77.9033 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf72.9746 149.811 mo(1.5 )[4.01611 1.82373 4.01611 0 ]xsh95.4307 139.534 mo
95.4307 141.354 li
95.4307 4.62061 mo
95.4307 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A59EDB579452696634E0F78E31E548451FEC2F45EC2D75493891F34D4FE8B1BA451BC13910DE3DBD7E9726B47E6E2AD415FC475FF493A0146AD580FEA6DEB12A03962063EBE1B4ED9B9D745D513947AB21906723768782B5AB29C57A15D652D550CAFB7E7E7CD69D81ED0C62E28DBB29E2DD7774800F98C5310BA25F2D5ACFEE69FBF953156023A2> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf93.4229 149.811 mo(2 )[4.01611 0 ]xsh112.665 139.534 mo
112.665 141.354 li
112.665 4.62061 mo
112.665 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf107.737 149.811 mo(2.5 )[4.01563 1.82422 4.0166 0 ]xsh129.9 139.534 mo
129.9 141.354 li
129.9 4.62061 mo
129.9 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A59E2F55388AA97777123A19E5648853F81BA5E58722CD3DDAB91AEAE7555DCAB9FD2CD983E0CF6390BDF73BC739A15F72AADA9AF4BF151948DEABBEE717022AB7D10AAFC78E3011E2D40D6FF1F95366F6B6267EEF1A013A4AAE8FA7F6052B918C12D8BA7E569096876F441BAB9132D24B42E4CB066502E75541DC10A9965B0D96023A206FE5A04E4A5866E042E000CF694D78C4B1C5C1B2DF3D125C4FB62F9BE93B28DE2910C9424BF3FD7CF2BBFB39B924E4687FC206F6EAD20CFC47A23111F2914C34E4> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five 202{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf127.892 149.811 mo(3 )[4.01563 0 ]xsh147.428 139.534 mo
147.428 141.354 li
147.428 4.62061 mo
147.428 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf142.5 149.811 mo(3.5 )[4.01563 1.82422 4.0166 0 ]xsh164.661 139.534 mo
164.661 141.354 li
164.661 4.62061 mo
164.661 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A59EDB396553F1155931EFC6D226399162A1D1107621FF9879120FCF7FC3EFCC62FFE094E2B968D2D28FB30C4D0CAC61347C5811EEBC7ADC2ADA274D91286F488BBA175B223EF194DC45CBC46B435B6E12D0DD9A9627B3F5F905CBD7BF7B1248BDE390CBBFE420BEEA35B63F998848A7142BB1F657DB3607FBB9F9E8E13C62AB4663A618ACD03F7117DD6A59A94333427AE3AECACD8FE41D4DEBEBB75004BBC09A2882761812B3FDD85D5A246464B6FB902E6907DBC536E70ABB756D207A3ECD4BB93DF7A79347458B3F23DA1210FC0F7DBAA47EA5F034515AD429049859A1F8168D28BEC69F125F34C5C3A0C5A7C366712B49160A5FCDBD05832713657FD8AA543FE966AF905E9EC24D1E76F4D86C04726EECB6B966EF8E92948607D6FB24FD54D9D3BEF2D0> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf162.653 149.811 mo(4 )[4.01563 0 ]xsh182.191 139.534 mo
182.191 141.354 li
182.191 4.62061 mo
182.191 6.44189 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf177.263 149.811 mo(4.5 )[4.01563 1.82422 4.0166 0 ]xsh197.495 149.811 mo(5 )[4.01563 0 ]xsh18.8535 143.31 mo(0 )[4.01611 0 ]xsh25.8696 118.591 mo
27.6953 118.591 li
197.637 118.591 mo
199.462 118.591 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf13.0142 120.645 mo(0.2 )[4.01611 1.82373 4.01611 0 ]xsh25.8696 95.8613 mo
27.6953 95.8613 li
197.637 95.8613 mo
199.462 95.8613 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf13.0142 97.9282 mo(0.4 )[4.01611 1.82373 4.01611 0 ]xsh25.8696 72.8423 mo
27.6953 72.8423 li
197.637 72.8423 mo
199.462 72.8423 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A59E2EB4387A650B89F2FD4824E4E66CFFD819C0D03B40659FADA72A006F6289CFBE5CE4273BF9D952226A333202706A9CE6EE43F643812D8926E3A9C0591B04F663427E113C122B20F319162C1E2FA4C0A7D3760660529581095D092145C91E2EE839523F3A3D95F40487B285F2DAC9FF8F7C329F4499029A44741CD87345CEDA47205CC0D5BB8508D4CC9B72> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 201{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf13.0142 74.8872 mo(0.6 )[4.01611 1.82373 4.01611 0 ]xsh25.8696 50.1133 mo
27.6953 50.1133 li
197.637 50.1133 mo
199.462 50.1133 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A59E2EB4387A54640BE0019DA7511B43A8DD7EFD6F4D51DFA0162890CB0AAC7380220B8A1B42FBC28971FEB48ECA13FEAD647CF512DE69B618C2DEBC976DA98D1F16D7DA664316AA68747FFB99C814C8220CA99F3A592EC3D91205F21BA429CBEB41DCDF2C97170069923FB02689F40868204B10C004CB98EA44B51A5C401AD53CE757F3B42F5B51546C832508CCF6F120C3585D376575B885B1E33D6831B08F11545E60890EF17B7160AC5D47B95C0CC2511E7EC64470AF3866968E3539A0BEA71986F074C15DD70C7BE03F13E79FA70F98F58868511CE9C5B623208B70C559E61D49D2C9DD8EA1D751FB7BEC0BC97A8B1853F3647E5C6D924B6E> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 199{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf13.0142 52.1118 mo(0.8 )[4.01611 1.82373 4.01611 0 ]xsh25.8696 27.3853 mo
27.6953 27.3853 li
197.637 27.3853 mo
199.462 27.3853 li
0 0 0 1 cmyk
@
0.749 0.678 0.671 0.902 cmyk
KHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf18.8535 29.2568 mo(1 )[4.01611 0 ]xsh13.0142 6.59961 mo(1.2 )[4.01611 1.82373 4.01611 0 ]xsh0.747731 lw
4 ml
25.8696 84.4985 mo
27.6953 84.4985 li
28.7905 84.4985 mo
30.6167 84.4985 li
31.7124 84.4985 mo
33.5376 84.4985 li
34.6333 84.4985 mo
36.4595 84.4985 li
37.5547 84.4985 mo
39.3804 84.4985 li
40.4766 84.4985 mo
42.3018 84.4985 li
43.3975 84.4985 mo
45.2227 84.4985 li
46.3174 84.4985 mo
48.1445 84.4985 li
49.2383 84.4985 mo
51.0654 84.4985 li
52.1597 84.4985 mo
53.9863 84.4985 li
55.0815 84.4985 mo
56.9077 84.4985 li
58.0024 84.4985 mo
59.8286 84.4985 li
60.6685 84.7529 mo
60.6685 86.5747 li
60.6685 87.666 mo
60.6685 89.4868 li
60.6685 90.5815 mo
60.6685 92.4023 li
60.6685 93.4946 mo
60.6685 95.3154 li
60.6685 96.4087 mo
60.6685 98.23 li
60.6685 99.3223 mo
60.6685 101.143 li
60.6685 102.236 mo
60.6685 104.057 li
60.6685 105.15 mo
60.6685 106.971 li
60.6685 108.065 mo
60.6685 109.886 li
60.6685 110.977 mo
60.6685 112.798 li
60.6685 113.893 mo
60.6685 115.713 li
60.6685 116.806 mo
60.6685 118.627 li
60.6685 119.718 mo
60.6685 121.539 li
60.6685 122.633 mo
60.6685 124.455 li
60.6685 125.547 mo
60.6685 127.368 li
60.6685 128.461 mo
60.6685 130.282 li
60.6685 131.375 mo
60.6685 133.195 li
60.6685 134.289 mo
60.6685 136.109 li
60.6685 137.202 mo
60.6685 139.023 li
60.6685 140.117 mo
60.6685 141.354 li
60.6685 141.282 mo
60.6685 141.354 li
25.8696 27.3506 mo
25.9424 27.3506 li
26.2344 28.2256 li
26.2344 28.2979 li
26.1616 28.2979 li
25.8696 27.4233 li
26.1616 28.2256 mo
26.2344 28.2256 li
26.5273 29.0991 li
26.5273 29.1714 li
26.4536 29.1714 li
26.1616 28.2979 li
26.4536 29.0991 mo
26.5273 29.0991 li
27.1113 29.6826 li
27.1113 29.7549 li
27.0386 29.7549 li
26.4536 29.1714 li
27.0386 29.6826 mo
27.1113 29.6826 li
27.4033 30.5562 li
27.4033 30.6289 li
27.3306 30.6289 li
27.0386 29.7549 li
27.3306 30.5562 mo
27.4033 30.5562 li
27.6943 31.1387 li
27.6943 31.2114 li
27.6226 31.2114 li
27.3306 30.6289 li
27.6226 31.1387 mo
27.6943 31.1387 li
27.9873 32.0132 li
27.9873 32.0859 li
27.9146 32.0859 li
27.6226 31.2114 li
27.9146 32.0132 mo
27.9873 32.0132 li
28.2783 32.8872 li
28.2783 32.9604 li
28.2065 32.9604 li
27.9146 32.0859 li
28.2065 32.8872 mo
28.2783 32.8872 li
28.8633 33.4692 li
28.8633 33.543 li
28.7905 33.543 li
28.2065 32.9604 li
28.7905 33.4692 mo
28.8633 33.4692 li
29.1553 34.3442 li
29.1553 34.4165 li
29.0835 34.4165 li
28.7905 33.543 li
29.0835 34.3442 mo
29.1553 34.3442 li
29.4473 34.9277 li
29.4473 34.999 li
29.3755 34.999 li
29.0835 34.4165 li
29.3755 34.9277 mo
29.4473 34.9277 li
29.7393 35.8013 li
29.7393 35.874 li
29.6675 35.874 li
29.3755 34.999 li
29.6675 35.8013 mo
29.7393 35.8013 li
30.0317 36.3838 li
30.0317 36.4575 li
29.9595 36.4575 li
29.6675 35.874 li
29.9595 36.3838 mo
30.0317 36.3838 li
30.3237 37.2583 li
30.3237 37.3311 li
30.2515 37.3311 li
29.9595 36.4575 li
30.2515 37.2583 mo
30.3237 37.2583 li
30.9087 37.8408 li
30.9087 37.9146 li
30.8364 37.9146 li
30.2515 37.3311 li
30.8364 37.8408 mo
30.9087 37.8408 li
31.2007 38.7144 li
31.2007 38.7871 li
31.1284 38.7871 li
30.8364 37.9146 li
31.1284 38.7144 mo
31.2007 38.7144 li
31.4927 39.2979 li
31.4927 39.3706 li
31.4204 39.3706 li
31.1284 38.7871 li
31.4204 39.2979 mo
31.4927 39.2979 li
31.7847 40.1729 li
31.7847 40.2441 li
31.7124 40.2441 li
31.4204 39.3706 li
31.7124 40.1729 mo
31.7847 40.1729 li
32.0767 40.7554 li
32.0767 40.8276 li
32.0044 40.8276 li
31.7124 40.2441 li
32.0044 40.7554 mo
32.0767 40.7554 li
32.6616 41.3374 li
32.6616 41.4111 li
32.5884 41.4111 li
32.0044 40.8276 li
32.5884 41.3374 mo
32.6616 41.3374 li
32.9536 42.2124 li
32.9536 42.2847 li
32.8804 42.2847 li
32.5884 41.4111 li
32.8804 42.2124 mo
32.9536 42.2124 li
33.2456 42.7949 li
33.2456 42.8662 li
33.1733 42.8662 li
32.8804 42.2847 li
33.1733 42.7949 mo
33.2456 42.7949 li
33.5376 43.3774 li
33.5376 43.4497 li
33.4644 43.4497 li
33.1733 42.8662 li
33.4644 43.3774 mo
33.5376 43.3774 li
33.8296 44.251 li
33.8296 44.3247 li
33.7573 44.3247 li
33.4644 43.4497 li
33.7573 44.251 mo
33.8296 44.251 li
34.4146 44.8345 li
34.4146 44.9067 li
34.3403 44.9067 li
33.7573 44.3247 li
34.3403 44.8345 mo
34.4146 44.8345 li
34.7065 45.417 li
34.7065 45.4893 li
34.6323 45.4893 li
34.3403 44.9067 li
34.6323 45.417 mo
34.7065 45.417 li
34.9985 46.2915 li
34.9985 46.3643 li
34.9253 46.3643 li
34.6323 45.4893 li
34.9253 46.2915 mo
34.9985 46.2915 li
35.2905 46.874 li
35.2905 46.9478 li
35.2173 46.9478 li
34.9253 46.3643 li
35.2173 46.874 mo
35.2905 46.874 li
35.5825 47.4565 li
35.5825 47.5298 li
35.5093 47.5298 li
35.2173 46.9478 li
35.5093 47.4565 mo
35.5825 47.4565 li
35.8745 48.04 li
35.8745 48.1123 li
35.8018 48.1123 li
35.5093 47.5298 li
35.8018 48.04 mo
35.8745 48.04 li
36.4595 48.9136 li
36.4595 48.9863 li
36.3857 48.9863 li
35.8018 48.1123 li
36.3857 48.9136 mo
36.4595 48.9136 li
36.7515 49.4961 li
36.7515 49.5698 li
36.6787 49.5698 li
36.3857 48.9863 li
36.6787 49.4961 mo
36.7515 49.4961 li
37.0435 50.0786 li
37.0435 50.1519 li
36.9707 50.1519 li
36.6787 49.5698 li
36.9707 50.0786 mo
37.0435 50.0786 li
37.3354 50.6621 li
37.3354 50.7344 li
37.2627 50.7344 li
36.9707 50.1519 li
37.2627 50.6621 mo
37.3354 50.6621 li
37.6274 51.2446 li
37.6274 51.3169 li
37.5547 51.3169 li
37.2627 50.7344 li
37.5547 51.2446 mo
37.6274 51.2446 li
38.2124 51.8276 li
38.2124 51.8994 li
38.1387 51.8994 li
37.5547 51.3169 li
38.1387 51.8276 mo
38.2124 51.8276 li
38.5044 52.4102 li
38.5044 52.4829 li
38.4307 52.4829 li
38.1387 51.8994 li
38.4307 52.4102 mo
38.5044 52.4102 li
38.7964 53.2842 li
38.7964 53.3564 li
38.7236 53.3564 li
38.4307 52.4829 li
38.7236 53.2842 mo
38.7964 53.2842 li
39.0884 53.8677 li
39.0884 53.9399 li
39.0156 53.9399 li
38.7236 53.3564 li
39.0156 53.8677 mo
39.0884 53.8677 li
39.3804 54.4497 li
39.3804 54.5225 li
39.3076 54.5225 li
39.0156 53.9399 li
39.3076 54.4497 mo
39.3804 54.4497 li
39.9644 55.0332 li
39.9644 55.105 li
39.8916 55.105 li
39.3076 54.5225 li
39.8916 55.0332 mo
39.9644 55.0332 li
40.2573 55.6147 li
40.2573 55.6875 li
40.1836 55.6875 li
39.8916 55.105 li
40.1836 55.6147 mo
40.2573 55.6147 li
40.5493 56.1982 li
40.5493 56.271 li
40.4756 56.271 li
40.1836 55.6875 li
40.4756 56.1982 mo
40.5493 56.1982 li
40.8403 56.7808 li
40.8403 56.8545 li
40.7676 56.8545 li
40.4756 56.271 li
40.7676 56.7808 mo
40.8403 56.7808 li
41.1323 57.3633 li
41.1323 57.437 li
41.0605 57.437 li
40.7676 56.8545 li
41.0605 57.3633 mo
41.1323 57.3633 li
41.4243 57.9468 li
41.4243 58.02 li
41.3525 58.02 li
41.0605 57.437 li
41.3525 57.9468 mo
41.4243 57.9468 li
42.0083 58.5293 li
42.0083 58.6025 li
41.9365 58.6025 li
41.3525 58.02 li
41.9365 58.5293 mo
42.0083 58.5293 li
42.3018 59.1128 li
42.3018 59.1841 li
42.2285 59.1841 li
41.9365 58.6025 li
42.2285 59.1128 mo
42.3018 59.1128 li
42.5938 59.6948 li
42.5938 59.7676 li
42.5205 59.7676 li
42.2285 59.1841 li
42.5205 59.6948 mo
42.5938 59.6948 li
42.8857 60.2783 li
42.8857 60.3501 li
42.8125 60.3501 li
42.5205 59.7676 li
42.8125 60.2783 mo
42.8857 60.2783 li
43.1777 60.8608 li
43.1777 60.9336 li
43.1055 60.9336 li
42.8125 60.3501 li
43.1055 60.8608 mo
43.1777 60.8608 li
43.7617 61.4434 li
43.7617 61.5161 li
43.6895 61.5161 li
43.1055 60.9336 li
43.6895 61.4434 mo
43.7617 61.4434 li
44.0537 61.7349 li
44.0537 61.8071 li
43.9805 61.8071 li
43.6895 61.5161 li
43.9805 61.7349 mo
44.0537 61.7349 li
44.3467 62.3179 li
44.3467 62.3906 li
44.2734 62.3906 li
43.9805 61.8071 li
44.2734 62.3179 mo
44.3467 62.3179 li
44.6387 62.9004 li
44.6387 62.9722 li
44.5654 62.9722 li
44.2734 62.3906 li
44.5654 62.9004 mo
44.6387 62.9004 li
44.9307 63.4829 li
44.9307 63.5557 li
44.8574 63.5557 li
44.5654 62.9722 li
44.8574 63.4829 mo
44.9307 63.4829 li
45.5146 64.0654 li
45.5146 64.1382 li
45.4414 64.1382 li
44.8574 63.5557 li
45.4414 64.0654 mo
45.5146 64.0654 li
45.8066 64.6489 li
45.8066 64.7217 li
45.7334 64.7217 li
45.4414 64.1382 li
45.7334 64.6489 mo
45.8066 64.6489 li
46.0996 65.2305 li
46.0996 65.3052 li
46.0254 65.3052 li
45.7334 64.7217 li
46.0254 65.2305 mo
46.0996 65.2305 li
46.3916 65.5225 li
46.3916 65.5952 li
46.3184 65.5952 li
46.0254 65.3052 li
46.3184 65.5225 mo
46.3916 65.5225 li
46.6836 66.106 li
46.6836 66.1787 li
46.6104 66.1787 li
46.3184 65.5952 li
46.6104 66.106 mo
46.6836 66.106 li
46.9756 66.6875 li
46.9756 66.7612 li
46.9023 66.7612 li
46.6104 66.1787 li
46.9023 66.6875 mo
46.9756 66.6875 li
47.5596 67.271 li
47.5596 67.3438 li
47.4863 67.3438 li
46.9023 66.7612 li
47.4863 67.271 mo
47.5596 67.271 li
47.8516 67.562 li
47.8516 67.6348 li
47.7783 67.6348 li
47.4863 67.3438 li
47.7783 67.562 mo
47.8516 67.562 li
48.1445 68.1445 li
48.1445 68.2183 li
48.0703 68.2183 li
47.7783 67.6348 li
48.0703 68.1445 mo
48.1445 68.1445 li
48.4365 68.728 li
48.4365 68.8008 li
48.3623 68.8008 li
48.0703 68.2183 li
48.3623 68.728 mo
48.4365 68.728 li
48.7285 69.3105 li
48.7285 69.3833 li
48.6553 69.3833 li
48.3623 68.8008 li
48.6553 69.3105 mo
48.7285 69.3105 li
49.3125 69.6021 li
49.3125 69.6743 li
49.2393 69.6743 li
48.6553 69.3833 li
49.2393 69.6021 mo
49.3125 69.6021 li
49.6045 70.1851 li
49.6045 70.2568 li
49.5303 70.2568 li
49.2393 69.6743 li
49.5303 70.1851 mo
49.6045 70.1851 li
49.8965 70.7676 li
49.8965 70.8403 li
49.8237 70.8403 li
49.5303 70.2568 li
49.8237 70.7676 mo
49.8965 70.7676 li
50.1895 71.0591 li
50.1895 71.1323 li
50.1157 71.1323 li
49.8237 70.8403 li
50.1157 71.0591 mo
50.1895 71.0591 li
50.4805 71.6416 li
50.4805 71.7148 li
50.4077 71.7148 li
50.1157 71.1323 li
50.4077 71.6416 mo
50.4805 71.6416 li
51.0645 72.2251 li
51.0645 72.2974 li
50.9917 72.2974 li
50.4077 71.7148 li
50.9917 72.2251 mo
51.0645 72.2251 li
51.3574 72.5151 li
51.3574 72.5889 li
51.2847 72.5889 li
50.9917 72.2974 li
51.2847 72.5151 mo
51.3574 72.5151 li
51.6494 73.0986 li
51.6494 73.1714 li
51.5757 73.1714 li
51.2847 72.5889 li
51.5757 73.0986 mo
51.6494 73.0986 li
51.9414 73.6812 li
51.9414 73.7544 li
51.8677 73.7544 li
51.5757 73.1714 li
51.8677 73.6812 mo
51.9414 73.6812 li
52.2334 73.9722 li
52.2334 74.0449 li
52.1597 74.0449 li
51.8677 73.7544 li
52.1597 73.9722 mo
52.2334 73.9722 li
52.5254 74.5547 li
52.5254 74.6284 li
52.4526 74.6284 li
52.1597 74.0449 li
52.4526 74.5547 mo
52.5254 74.5547 li
53.1094 74.8472 li
53.1094 74.9204 li
53.0366 74.9204 li
52.4526 74.6284 li
53.0366 74.8472 mo
53.1094 74.8472 li
53.4023 75.4292 li
53.4023 75.502 li
53.3286 75.502 li
53.0366 74.9204 li
53.3286 75.4292 mo
53.4023 75.4292 li
53.6934 76.0127 li
53.6934 76.0845 li
53.6206 76.0845 li
53.3286 75.502 li
53.6206 76.0127 mo
53.6934 76.0127 li
53.9863 76.3042 li
53.9863 76.3765 li
53.9126 76.3765 li
53.6206 76.0845 li
53.9126 76.3042 mo
53.9863 76.3042 li
54.2783 76.8867 li
54.2783 76.96 li
54.2046 76.96 li
53.9126 76.3765 li
54.2046 76.8867 mo
54.2783 76.8867 li
54.8623 77.1777 li
54.8623 77.2505 li
54.7896 77.2505 li
54.2046 76.96 li
54.7896 77.1777 mo
54.8623 77.1777 li
55.1543 77.7603 li
55.1543 77.834 li
55.0815 77.834 li
54.7896 77.2505 li
55.0815 77.7603 mo
55.1543 77.7603 li
55.4463 78.0513 li
55.4463 78.125 li
55.3735 78.125 li
55.0815 77.834 li
55.3735 78.0513 mo
55.4463 78.0513 li
55.7393 78.6348 li
55.7393 78.7075 li
55.6655 78.7075 li
55.3735 78.125 li
55.6655 78.6348 mo
55.7393 78.6348 li
56.0317 78.9263 li
56.0317 78.9995 li
55.9575 78.9995 li
55.6655 78.7075 li
55.9575 78.9263 mo
56.0317 78.9263 li
56.6157 79.5088 li
56.6157 79.582 li
56.5425 79.582 li
55.9575 78.9995 li
56.5425 79.5088 mo
56.6157 79.5088 li
56.9077 79.8008 li
56.9077 79.8726 li
56.8345 79.8726 li
56.5425 79.582 li
56.8345 79.8008 mo
56.9077 79.8008 li
57.1997 80.3833 li
57.1997 80.4561 li
57.1265 80.4561 li
56.8345 79.8726 li
57.1265 80.3833 mo
57.1997 80.3833 li
57.4917 80.6753 li
57.4917 80.7471 li
57.4185 80.7471 li
57.1265 80.4561 li
57.4185 80.6753 mo
57.4917 80.6753 li
57.7847 80.9658 li
57.7847 81.0396 li
57.7104 81.0396 li
57.4185 80.7471 li
57.7104 80.9658 mo
57.7847 80.9658 li
58.0757 81.5483 li
58.0757 81.6216 li
58.0024 81.6216 li
57.7104 81.0396 li
58.0024 81.5483 mo
58.0757 81.5483 li
58.6597 81.8403 li
58.6597 81.9131 li
58.5874 81.9131 li
58.0024 81.6216 li
58.5874 81.8403 mo
58.6597 81.8403 li
58.9526 82.4229 li
58.9526 82.4966 li
58.8794 82.4966 li
58.5874 81.9131 li
58.8794 82.4229 mo
58.9526 82.4229 li
59.2437 82.7144 li
59.2437 82.7876 li
59.1714 82.7876 li
58.8794 82.4966 li
59.1714 82.7144 mo
59.2437 82.7144 li
59.5366 83.0054 li
59.5366 83.0791 li
59.4634 83.0791 li
59.1714 82.7876 li
59.4634 83.0054 mo
59.5366 83.0054 li
59.8286 83.5889 li
59.8286 83.6616 li
59.7554 83.6616 li
59.4634 83.0791 li
59.7554 83.5889 mo
59.8286 83.5889 li
60.4126 83.8799 li
60.4126 83.9536 li
60.3403 83.9536 li
59.7554 83.6616 li
60.3403 83.8799 mo
60.4126 83.8799 li
60.7046 84.4634 li
60.7046 84.5352 li
60.6323 84.5352 li
60.3403 83.9536 li
60.6323 84.4634 mo
60.7046 84.4634 li
60.9966 84.7549 li
60.9966 84.8271 li
60.9243 84.8271 li
60.6323 84.5352 li
60.9243 84.7549 mo
60.9966 84.7549 li
61.2886 85.0459 li
61.2886 85.1187 li
61.2163 85.1187 li
60.9243 84.8271 li
61.2163 85.0459 mo
61.2886 85.0459 li
61.5806 85.6274 li
61.5806 85.7012 li
61.5073 85.7012 li
61.2163 85.1187 li
61.5073 85.6274 mo
61.5806 85.6274 li
62.1655 85.9194 li
62.1655 85.9932 li
62.0913 85.9932 li
61.5073 85.7012 li
62.0913 85.9194 mo
62.1655 85.9194 li
62.4575 86.2109 li
62.4575 86.2847 li
62.3843 86.2847 li
62.0913 85.9932 li
62.3843 86.2109 mo
62.4575 86.2109 li
62.7495 86.7935 li
62.7495 86.8677 li
62.6768 86.8677 li
62.3843 86.2847 li
62.6768 86.7935 mo
62.7495 86.7935 li
63.0415 87.0845 li
63.0415 87.1582 li
62.9688 87.1582 li
62.6768 86.8677 li
62.9688 87.0845 mo
63.0415 87.0845 li
63.3335 87.376 li
63.3335 87.4492 li
63.2607 87.4492 li
62.9688 87.1582 li
63.2607 87.376 mo
63.3335 87.376 li
63.6265 87.6689 li
63.6265 87.7417 li
63.5537 87.7417 li
63.2607 87.4492 li
63.5537 87.6689 mo
63.6265 87.6689 li
64.2104 88.2495 li
64.2104 88.3232 li
64.1377 88.3232 li
63.5537 87.7417 li
64.1377 88.2495 mo
64.2104 88.2495 li
64.5024 88.5425 li
64.5024 88.6143 li
64.4297 88.6143 li
64.1377 88.3232 li
64.4297 88.5425 mo
64.5024 88.5425 li
64.7944 88.834 li
64.7944 88.9058 li
64.7217 88.9058 li
64.4297 88.6143 li
64.7217 88.834 mo
64.7944 88.834 li
65.0864 89.125 li
65.0864 89.1968 li
65.0137 89.1968 li
64.7217 88.9058 li
65.0137 89.125 mo
65.0864 89.125 li
65.3784 89.7075 li
65.3784 89.7793 li
65.3057 89.7793 li
65.0137 89.1968 li
65.3057 89.7075 mo
65.3784 89.7075 li
65.9634 89.999 li
65.9634 90.0723 li
65.8896 90.0723 li
65.3057 89.7793 li
65.8896 89.999 mo
65.9634 89.999 li
66.2554 90.291 li
66.2554 90.3638 li
66.1826 90.3638 li
65.8896 90.0723 li
66.1826 90.291 mo
66.2554 90.291 li
66.5474 90.5825 li
66.5474 90.6548 li
66.4746 90.6548 li
66.1826 90.3638 li
66.4746 90.5825 mo
66.5474 90.5825 li
66.8394 91.1646 li
66.8394 91.2373 li
66.7666 91.2373 li
66.4746 90.6548 li
66.7666 91.1646 mo
66.8394 91.1646 li
67.1313 91.4561 li
67.1313 91.5288 li
67.0586 91.5288 li
66.7666 91.2373 li
67.0586 91.4561 mo
67.1313 91.4561 li
67.7163 91.748 li
67.7163 91.8198 li
67.6426 91.8198 li
67.0586 91.5288 li
67.6426 91.748 mo
67.7163 91.748 li
68.0073 92.0396 li
68.0073 92.1118 li
67.9346 92.1118 li
67.6426 91.8198 li
67.9346 92.0396 mo
68.0073 92.0396 li
68.2993 92.3306 li
68.2993 92.4033 li
68.2275 92.4033 li
67.9346 92.1118 li
68.2275 92.3306 mo
68.2993 92.3306 li
68.5913 92.6221 li
68.5913 92.6943 li
68.5195 92.6943 li
68.2275 92.4033 li
68.5195 92.6221 mo
68.5913 92.6221 li
68.8843 93.2046 li
68.8843 93.2778 li
68.8115 93.2778 li
68.5195 92.6943 li
68.8115 93.2046 mo
68.8843 93.2046 li
69.4688 93.4966 li
69.4688 93.5693 li
69.3955 93.5693 li
68.8115 93.2778 li
69.3955 93.4966 mo
69.4688 93.4966 li
69.7607 93.7856 li
69.7607 93.8604 li
69.6875 93.8604 li
69.3955 93.5693 li
69.6875 93.7856 mo
69.7607 93.7856 li
70.0527 94.0781 li
70.0527 94.1519 li
69.9805 94.1519 li
69.6875 93.8604 li
69.9805 94.0781 mo
70.0527 94.0781 li
70.3447 94.3701 li
70.3447 94.4429 li
70.2725 94.4429 li
69.9805 94.1519 li
70.2725 94.3701 mo
70.3447 94.3701 li
70.6367 94.6616 li
70.6367 94.7339 li
70.5645 94.7339 li
70.2725 94.4429 li
70.5645 94.6616 mo
70.6367 94.6616 li
70.9287 94.9526 li
70.9287 95.0254 li
70.8564 95.0254 li
70.5645 94.7339 li
70.8564 94.9526 mo
70.9287 94.9526 li
71.5137 95.2441 li
71.5137 95.3174 li
71.4404 95.3174 li
70.8564 95.0254 li
71.4404 95.2441 mo
71.5137 95.2441 li
71.8057 95.5352 li
71.8057 95.6079 li
71.7324 95.6079 li
71.4404 95.3174 li
71.7324 95.5352 mo
71.8057 95.5352 li
72.0977 96.1187 li
72.0977 96.1914 li
72.0254 96.1914 li
71.7324 95.6079 li
72.0254 96.1187 mo
72.0977 96.1187 li
72.3896 96.4087 li
72.3896 96.4824 li
72.3174 96.4824 li
72.0254 96.1914 li
72.3174 96.4087 mo
72.3896 96.4087 li
72.6816 96.7002 li
72.6816 96.7739 li
72.6094 96.7739 li
72.3174 96.4824 li
72.6094 96.7002 mo
72.6816 96.7002 li
73.2656 96.9922 li
73.2656 97.0649 li
73.1934 97.0649 li
72.6094 96.7739 li
73.1934 96.9922 mo
73.2656 96.9922 li
73.5586 97.2837 li
73.5586 97.356 li
73.4854 97.356 li
73.1934 97.0649 li
73.4854 97.2837 mo
73.5586 97.2837 li
73.8506 97.5757 li
73.8506 97.6475 li
73.7773 97.6475 li
73.4854 97.356 li
73.7773 97.5757 mo
73.8506 97.5757 li
74.1426 97.8662 li
74.1426 97.9395 li
74.0693 97.9395 li
73.7773 97.6475 li
74.0693 97.8662 mo
74.1426 97.8662 li
74.4346 98.1582 li
74.4346 98.23 li
74.3613 98.23 li
74.0693 97.9395 li
74.3613 98.1582 mo
74.4346 98.1582 li
75.0186 98.4497 li
75.0186 98.522 li
74.9453 98.522 li
74.3613 98.23 li
74.9453 98.4497 mo
75.0186 98.4497 li
75.3115 98.7407 li
75.3115 98.813 li
75.2383 98.813 li
74.9453 98.522 li
75.2383 98.7407 mo
75.3115 98.7407 li
75.6035 99.0317 li
75.6035 99.1055 li
75.5293 99.1055 li
75.2383 98.813 li
75.5293 99.0317 mo
75.6035 99.0317 li
75.8955 99.3232 li
75.8955 99.397 li
75.8223 99.397 li
75.5293 99.1055 li
75.8223 99.3232 mo
75.8955 99.3232 li
76.1875 99.6143 li
76.1875 99.688 li
76.1143 99.688 li
75.8223 99.397 li
76.1143 99.6143 mo
76.1875 99.6143 li
76.4795 99.9058 li
76.4795 99.979 li
76.4063 99.979 li
76.1143 99.688 li
76.4063 99.9058 mo
76.4795 99.9058 li
77.0635 100.199 li
77.0635 100.271 li
76.9907 100.271 li
76.4063 99.979 li
76.9907 100.199 mo
77.0635 100.199 li
77.3564 100.49 li
77.3564 100.562 li
77.2827 100.562 li
76.9907 100.271 li
77.2827 100.49 mo
77.3564 100.49 li
77.6484 100.781 li
77.6484 100.853 li
77.5747 100.853 li
77.2827 100.562 li
77.5747 100.781 mo
77.6484 100.781 li
77.9404 101.073 li
77.9404 101.144 li
77.8667 101.144 li
77.5747 100.853 li
77.8667 101.073 mo
77.9404 101.073 li
78.2324 101.363 li
78.2324 101.435 li
78.1597 101.435 li
77.8667 101.144 li
78.1597 101.363 mo
78.2324 101.363 li
78.8164 101.654 li
78.8164 101.729 li
78.7437 101.729 li
78.1597 101.435 li
78.7437 101.654 mo
78.8164 101.654 li
79.1084 101.946 li
79.1084 102.02 li
79.0356 102.02 li
78.7437 101.729 li
79.0356 101.946 mo
79.1084 101.946 li
79.4014 102.236 li
79.4014 102.311 li
79.3276 102.311 li
79.0356 102.02 li
79.3276 102.236 mo
79.4014 102.236 li
79.6934 102.528 li
79.6934 102.602 li
79.6206 102.602 li
79.3276 102.311 li
79.6196 102.563 mo
79.9854 102.563 li
79.9116 102.528 mo
79.9854 102.528 li
80.5693 102.82 li
80.5693 102.894 li
80.4956 102.894 li
79.9116 102.602 li
80.4956 102.82 mo
80.5693 102.82 li
80.8613 103.111 li
80.8613 103.185 li
80.7886 103.185 li
80.4956 102.894 li
80.7886 103.111 mo
80.8613 103.111 li
81.1533 103.403 li
81.1533 103.475 li
81.0796 103.475 li
80.7886 103.185 li
81.0796 103.403 mo
81.1533 103.403 li
81.4453 103.694 li
81.4453 103.767 li
81.3726 103.767 li
81.0796 103.475 li
81.3726 103.694 mo
81.4453 103.694 li
81.7373 103.986 li
81.7373 104.057 li
81.6646 104.057 li
81.3726 103.767 li
81.6646 103.986 mo
81.7373 103.986 li
82.0293 104.277 li
82.0293 104.35 li
81.9565 104.35 li
81.6646 104.057 li
81.9565 104.277 mo
82.0293 104.277 li
82.6133 104.568 li
82.6133 104.641 li
82.5405 104.641 li
81.9565 104.35 li
82.5405 104.568 mo
82.6133 104.568 li
82.9053 104.859 li
82.9053 104.933 li
82.8325 104.933 li
82.5405 104.641 li
82.8325 104.894 mo
83.1973 104.894 li
83.1245 104.859 mo
83.1982 104.859 li
83.4907 105.151 li
83.4907 105.224 li
83.4175 105.224 li
83.1245 104.933 li
83.4175 105.151 mo
83.4907 105.151 li
83.7827 105.442 li
83.7827 105.515 li
83.7095 105.515 li
83.4175 105.224 li
0 0 0 1 cmyk
@
83.7095 105.442 mo
83.7827 105.442 li
84.3667 105.733 li
84.3667 105.807 li
84.2935 105.807 li
83.7095 105.515 li
84.2935 105.733 mo
84.3667 105.733 li
84.6587 106.026 li
84.6587 106.098 li
84.5854 106.098 li
84.2935 105.807 li
84.5854 106.026 mo
84.6587 106.026 li
84.9507 106.318 li
84.9507 106.389 li
84.8774 106.389 li
84.5854 106.098 li
84.8774 106.318 mo
84.9507 106.318 li
85.2437 106.609 li
85.2437 106.68 li
85.1694 106.68 li
84.8774 106.389 li
85.1704 106.644 mo
85.5347 106.644 li
85.4614 106.609 mo
85.5356 106.609 li
86.1196 106.9 li
86.1196 106.972 li
86.0464 106.972 li
85.4614 106.68 li
86.0464 106.9 mo
86.1196 106.9 li
86.4116 107.191 li
86.4116 107.263 li
86.3384 107.263 li
86.0464 106.972 li
86.3384 107.191 mo
86.4116 107.191 li
86.7036 107.482 li
86.7036 107.556 li
86.6304 107.556 li
86.3384 107.263 li
86.6304 107.482 mo
86.7036 107.482 li
86.9956 107.774 li
86.9956 107.847 li
86.9224 107.847 li
86.6304 107.556 li
86.9224 107.809 mo
87.2886 107.809 li
87.2144 107.774 mo
87.2886 107.774 li
87.5796 108.065 li
87.5796 108.139 li
87.5073 108.139 li
87.2144 107.847 li
87.5073 108.065 mo
87.5796 108.065 li
88.1636 108.356 li
88.1636 108.43 li
88.0913 108.43 li
87.5073 108.139 li
88.0913 108.356 mo
88.1636 108.356 li
88.4565 108.648 li
88.4565 108.721 li
88.3833 108.721 li
88.0913 108.43 li
88.3833 108.648 mo
88.4565 108.648 li
88.7476 108.94 li
88.7476 109.012 li
88.6753 109.012 li
88.3833 108.721 li
88.6753 108.975 mo
89.0405 108.975 li
88.9663 108.94 mo
89.0405 108.94 li
89.3325 109.231 li
89.3325 109.303 li
89.2598 109.303 li
88.9663 109.012 li
89.2598 109.231 mo
89.3325 109.231 li
89.9175 109.521 li
89.9175 109.595 li
89.8438 109.595 li
89.2598 109.303 li
89.8438 109.521 mo
89.9175 109.521 li
90.2085 109.813 li
90.2085 109.886 li
90.1367 109.886 li
89.8438 109.595 li
90.1357 109.848 mo
90.5005 109.848 li
90.4277 109.813 mo
90.5015 109.813 li
90.7925 110.104 li
90.7925 110.178 li
90.7207 110.178 li
90.4277 109.886 li
90.7207 110.104 mo
90.7925 110.104 li
91.0854 110.396 li
91.0854 110.469 li
91.0117 110.469 li
90.7207 110.178 li
91.0117 110.396 mo
91.0854 110.396 li
91.6694 110.687 li
91.6694 110.762 li
91.5967 110.762 li
91.0117 110.469 li
91.5967 110.722 mo
91.9614 110.722 li
91.8887 110.687 mo
91.9614 110.687 li
92.2534 110.979 li
92.2534 111.052 li
92.1807 111.052 li
91.8887 110.762 li
92.1807 110.979 mo
92.2534 110.979 li
92.5454 111.27 li
92.5454 111.343 li
92.4727 111.343 li
92.1807 111.052 li
92.4736 111.304 mo
92.8384 111.304 li
92.7646 111.27 mo
92.8374 111.27 li
93.1304 111.561 li
93.1304 111.634 li
93.0566 111.634 li
92.7646 111.343 li
93.0566 111.561 mo
93.1304 111.561 li
93.7144 111.854 li
93.7144 111.925 li
93.6416 111.925 li
93.0566 111.634 li
93.6416 111.854 mo
93.7144 111.854 li
94.0063 112.143 li
94.0063 112.217 li
93.9336 112.217 li
93.6416 111.925 li
93.9336 112.18 mo
94.2983 112.18 li
94.2256 112.143 mo
94.2983 112.143 li
94.5903 112.437 li
94.5903 112.508 li
94.5176 112.508 li
94.2256 112.217 li
94.5176 112.437 mo
94.5903 112.437 li
94.8823 112.728 li
94.8823 112.799 li
94.8105 112.799 li
94.5176 112.508 li
94.8105 112.762 mo
95.4663 112.762 li
95.3945 112.728 mo
95.4673 112.728 li
95.7598 113.019 li
95.7598 113.09 li
95.6875 113.09 li
95.3945 112.799 li
95.6875 113.019 mo
95.7598 113.019 li
96.0518 113.31 li
96.0518 113.384 li
95.9785 113.384 li
95.6875 113.09 li
95.9785 113.345 mo
96.3438 113.345 li
96.2715 113.31 mo
96.3438 113.31 li
96.6357 113.602 li
96.6357 113.675 li
96.5625 113.675 li
96.2715 113.384 li
96.5625 113.602 mo
96.6357 113.602 li
97.2207 113.893 li
97.2207 113.964 li
97.1465 113.964 li
96.5625 113.675 li
97.1465 113.927 mo
97.5127 113.927 li
97.4395 113.893 mo
97.5127 113.893 li
97.8047 114.184 li
97.8047 114.257 li
97.7314 114.257 li
97.4395 113.964 li
97.7314 114.184 mo
97.8047 114.184 li
98.0957 114.476 li
98.0957 114.548 li
98.0234 114.548 li
97.7314 114.257 li
98.0234 114.511 mo
98.3887 114.511 li
98.3164 114.476 mo
98.3887 114.476 li
98.6797 114.767 li
98.6797 114.84 li
98.6074 114.84 li
98.3164 114.548 li
98.6074 114.802 mo
99.2637 114.802 li
99.1914 114.767 mo
99.2656 114.767 li
99.5566 115.059 li
99.5566 115.131 li
99.4844 115.131 li
99.1914 114.84 li
99.4844 115.059 mo
99.5566 115.059 li
99.8496 115.35 li
99.8496 115.422 li
99.7773 115.422 li
99.4844 115.131 li
99.7773 115.384 mo
100.142 115.384 li
100.068 115.35 mo
100.141 115.35 li
100.434 115.642 li
100.434 115.713 li
100.359 115.713 li
100.068 115.422 li
100.359 115.642 mo
100.434 115.642 li
101.018 115.933 li
101.018 116.006 li
100.942 116.006 li
100.359 115.713 li
100.944 115.968 mo
101.31 115.968 li
101.237 115.933 mo
101.31 115.933 li
101.602 116.225 li
101.602 116.297 li
101.528 116.297 li
101.237 116.006 li
101.527 116.259 mo
101.895 116.259 li
101.82 116.225 mo
101.895 116.225 li
102.186 116.516 li
102.186 116.588 li
102.112 116.588 li
101.82 116.297 li
102.112 116.516 mo
102.186 116.516 li
102.771 116.807 li
102.771 116.879 li
102.696 116.879 li
102.112 116.588 li
102.696 116.842 mo
103.063 116.842 li
102.988 116.807 mo
103.063 116.807 li
103.355 117.098 li
103.355 117.17 li
103.281 117.17 li
102.988 116.879 li
103.28 117.133 mo
103.646 117.133 li
103.573 117.098 mo
103.646 117.098 li
103.939 117.389 li
103.939 117.463 li
103.864 117.463 li
103.573 117.17 li
103.864 117.424 mo
104.231 117.424 li
104.157 117.389 mo
104.23 117.389 li
104.816 117.682 li
104.816 117.754 li
104.741 117.754 li
104.157 117.463 li
104.741 117.682 mo
104.816 117.682 li
105.107 117.971 li
105.107 118.045 li
105.032 118.045 li
104.741 117.754 li
105.034 118.008 mo
105.399 118.008 li
105.325 117.971 mo
105.399 117.971 li
105.691 118.264 li
105.691 118.336 li
105.618 118.336 li
105.325 118.045 li
105.617 118.298 mo
105.984 118.298 li
105.91 118.264 mo
105.984 118.264 li
106.567 118.555 li
106.567 118.628 li
106.493 118.628 li
105.91 118.336 li
106.495 118.591 mo
106.859 118.591 li
106.786 118.555 mo
106.859 118.555 li
107.151 118.847 li
107.151 118.919 li
107.077 118.919 li
106.786 118.628 li
107.077 118.881 mo
107.444 118.881 li
107.371 118.847 mo
107.442 118.847 li
107.735 119.138 li
107.735 119.212 li
107.663 119.212 li
107.371 118.919 li
107.663 119.172 mo
108.319 119.172 li
108.246 119.138 mo
108.319 119.138 li
108.612 119.429 li
108.612 119.501 li
108.538 119.501 li
108.246 119.212 li
108.538 119.464 mo
108.903 119.464 li
108.831 119.429 mo
108.903 119.429 li
109.196 119.72 li
109.196 119.792 li
109.125 119.792 li
108.831 119.501 li
109.122 119.755 mo
109.488 119.755 li
109.415 119.72 mo
109.488 119.72 li
109.78 120.011 li
109.78 120.085 li
109.707 120.085 li
109.415 119.792 li
109.709 120.046 mo
110.364 120.046 li
110.293 120.011 mo
110.364 120.011 li
110.657 120.304 li
110.657 120.376 li
110.584 120.376 li
110.293 120.085 li
110.584 120.337 mo
110.948 120.337 li
110.877 120.304 mo
110.949 120.304 li
111.241 120.594 li
111.241 120.667 li
111.169 120.667 li
110.877 120.376 li
111.169 120.629 mo
111.534 120.629 li
111.461 120.594 mo
111.532 120.594 li
112.117 120.886 li
112.117 120.958 li
112.045 120.958 li
111.461 120.667 li
112.045 120.921 mo
112.409 120.921 li
112.338 120.886 mo
112.409 120.886 li
112.702 121.177 li
112.702 121.25 li
112.629 121.25 li
112.338 120.958 li
112.63 121.212 mo
112.993 121.212 li
112.922 121.177 mo
112.993 121.177 li
113.286 121.468 li
113.286 121.541 li
113.215 121.541 li
112.922 121.25 li
113.213 121.503 mo
113.87 121.503 li
113.798 121.468 mo
113.87 121.468 li
114.161 121.761 li
114.161 121.833 li
114.09 121.833 li
113.798 121.541 li
114.091 121.795 mo
114.454 121.795 li
114.383 121.761 mo
114.454 121.761 li
114.746 122.051 li
114.746 122.125 li
114.674 122.125 li
114.383 121.833 li
114.674 122.087 mo
115.038 122.087 li
114.967 122.051 mo
115.038 122.051 li
115.622 122.343 li
115.622 122.415 li
115.551 122.415 li
114.967 122.125 li
115.551 122.378 mo
115.915 122.378 li
115.842 122.343 mo
115.915 122.343 li
116.207 122.634 li
116.207 122.707 li
116.135 122.707 li
115.842 122.415 li
116.135 122.669 mo
116.5 122.669 li
116.427 122.669 mo
116.793 122.669 li
116.719 122.634 mo
116.793 122.634 li
117.084 122.926 li
117.084 122.998 li
117.012 122.998 li
116.719 122.707 li
117.012 122.96 mo
117.669 122.96 li
117.596 122.926 mo
117.669 122.926 li
117.961 123.217 li
117.961 123.291 li
117.888 123.291 li
117.596 122.998 li
117.888 123.251 mo
118.252 123.251 li
118.18 123.217 mo
118.254 123.217 li
118.545 123.508 li
118.545 123.582 li
118.473 123.582 li
118.18 123.291 li
118.473 123.543 mo
118.838 123.543 li
118.764 123.543 mo
119.42 123.543 li
119.349 123.508 mo
119.422 123.508 li
119.713 123.799 li
119.713 123.873 li
119.641 123.873 li
119.349 123.582 li
119.641 123.836 mo
120.006 123.836 li
119.932 123.799 mo
120.005 123.799 li
120.298 124.09 li
120.298 124.164 li
120.225 124.164 li
119.932 123.873 li
120.225 124.125 mo
120.59 124.125 li
120.517 124.125 mo
121.174 124.125 li
121.102 124.09 mo
121.174 124.09 li
121.466 124.384 li
121.466 124.456 li
121.393 124.456 li
121.102 124.164 li
121.393 124.418 mo
121.758 124.418 li
121.686 124.384 mo
121.758 124.384 li
122.051 124.675 li
122.051 124.747 li
121.977 124.747 li
121.686 124.456 li
121.977 124.71 mo
122.342 124.71 li
122.27 124.71 mo
122.635 124.71 li
122.561 124.675 mo
122.635 124.675 li
123.219 124.966 li
123.219 125.038 li
123.146 125.038 li
122.561 124.747 li
123.146 125.001 mo
123.512 125.001 li
123.438 124.966 mo
123.512 124.966 li
123.803 125.257 li
123.803 125.329 li
123.73 125.329 li
123.438 125.038 li
123.73 125.292 mo
124.096 125.292 li
124.021 125.292 mo
124.388 125.292 li
124.314 125.257 mo
124.388 125.257 li
124.973 125.549 li
124.973 125.62 li
124.898 125.62 li
124.314 125.329 li
124.898 125.583 mo
125.264 125.583 li
125.191 125.549 mo
125.264 125.549 li
125.556 125.839 li
125.556 125.914 li
125.482 125.914 li
125.191 125.62 li
125.482 125.875 mo
125.848 125.875 li
125.774 125.875 mo
126.141 125.875 li
126.066 125.839 mo
126.141 125.839 li
126.725 126.131 li
126.725 126.205 li
126.651 126.205 li
126.066 125.914 li
126.651 126.166 mo
127.016 126.166 li
126.942 126.166 mo
127.309 126.166 li
127.235 126.131 mo
127.309 126.131 li
127.6 126.421 li
127.6 126.496 li
127.526 126.496 li
127.235 126.205 li
127.526 126.458 mo
127.893 126.458 li
127.819 126.458 mo
128.185 126.458 li
128.11 126.421 mo
128.186 126.421 li
128.77 126.713 li
128.77 126.787 li
128.695 126.787 li
128.11 126.496 li
128.695 126.75 mo
129.061 126.75 li
128.987 126.75 mo
129.354 126.75 li
129.278 126.713 mo
129.354 126.713 li
129.646 127.005 li
129.646 127.079 li
129.571 127.079 li
129.278 126.787 li
129.571 127.04 mo
129.938 127.04 li
129.863 127.04 mo
130.521 127.04 li
130.448 127.005 mo
130.521 127.005 li
130.814 127.296 li
130.814 127.37 li
130.739 127.37 li
130.448 127.079 li
130.739 127.331 mo
131.105 127.331 li
131.032 127.331 mo
131.398 127.331 li
131.324 127.296 mo
131.398 127.296 li
131.689 127.588 li
131.689 127.661 li
131.616 127.661 li
131.324 127.37 li
131.616 127.623 mo
132.273 127.623 li
132.2 127.623 mo
132.566 127.623 li
132.493 127.588 mo
132.566 127.588 li
132.859 127.878 li
132.859 127.952 li
132.785 127.952 li
132.493 127.661 li
132.785 127.915 mo
133.15 127.915 li
133.077 127.915 mo
133.442 127.915 li
133.37 127.878 mo
133.442 127.878 li
133.734 128.171 li
133.734 128.242 li
133.661 128.242 li
133.37 127.952 li
133.661 128.206 mo
134.317 128.206 li
134.246 128.206 mo
134.61 128.206 li
134.538 128.171 mo
134.61 128.171 li
134.902 128.462 li
134.902 128.535 li
134.829 128.535 li
134.538 128.242 li
134.829 128.497 mo
135.194 128.497 li
135.121 128.497 mo
135.487 128.497 li
135.413 128.462 mo
135.487 128.462 li
136.071 128.753 li
136.071 128.826 li
135.997 128.826 li
135.413 128.535 li
135.997 128.788 mo
136.363 128.788 li
136.291 128.788 mo
136.655 128.788 li
136.582 128.788 mo
136.948 128.788 li
136.875 128.753 mo
136.948 128.753 li
137.239 129.044 li
137.239 129.118 li
137.168 129.118 li
136.875 128.826 li
137.168 129.079 mo
137.824 129.079 li
137.752 129.079 mo
138.116 129.079 li
138.044 129.044 mo
138.116 129.044 li
138.409 129.335 li
138.409 129.408 li
138.336 129.408 li
138.044 129.118 li
138.336 129.371 mo
138.7 129.371 li
138.629 129.371 mo
138.993 129.371 li
138.92 129.371 mo
139.285 129.371 li
139.213 129.335 mo
139.284 129.335 li
139.87 129.627 li
139.87 129.701 li
139.797 129.701 li
139.213 129.408 li
139.797 129.662 mo
140.16 129.662 li
140.09 129.662 mo
140.453 129.662 li
140.381 129.627 mo
140.453 129.627 li
140.745 129.918 li
140.745 129.992 li
140.674 129.992 li
140.381 129.701 li
140.673 129.953 mo
141.036 129.953 li
140.965 129.953 mo
141.621 129.953 li
141.549 129.953 mo
141.913 129.953 li
141.841 129.918 mo
141.913 129.918 li
142.206 130.211 li
142.206 130.283 li
142.133 130.283 li
141.841 129.992 li
142.133 130.246 mo
142.497 130.246 li
142.426 130.246 mo
142.791 130.246 li
142.719 130.246 mo
143.375 130.246 li
143.302 130.211 mo
143.375 130.211 li
143.666 130.502 li
143.666 130.574 li
143.594 130.574 li
143.302 130.283 li
143.594 130.538 mo
143.959 130.538 li
143.887 130.538 mo
144.252 130.538 li
144.178 130.538 mo
144.544 130.538 li
144.471 130.502 mo
144.544 130.502 li
144.836 130.794 li
144.836 130.865 li
144.763 130.865 li
144.471 130.574 li
144.763 130.829 mo
145.42 130.829 li
145.348 130.829 mo
145.712 130.829 li
145.639 130.829 mo
146.004 130.829 li
145.931 130.794 mo
146.005 130.794 li
146.297 131.085 li
146.297 131.157 li
146.224 131.157 li
145.931 130.865 li
146.223 131.12 mo
146.59 131.12 li
146.516 131.12 mo
147.172 131.12 li
147.1 131.12 mo
147.465 131.12 li
147.392 131.085 mo
147.465 131.085 li
147.758 131.376 li
147.758 131.448 li
147.684 131.448 li
147.392 131.157 li
147.684 131.411 mo
148.049 131.411 li
147.977 131.411 mo
148.341 131.411 li
148.268 131.411 mo
148.926 131.411 li
148.853 131.376 mo
148.926 131.376 li
149.217 131.667 li
149.217 131.741 li
149.145 131.741 li
148.853 131.448 li
149.145 131.702 mo
149.51 131.702 li
149.436 131.702 mo
149.802 131.702 li
149.729 131.702 mo
150.094 131.702 li
150.021 131.667 mo
150.094 131.667 li
150.387 131.958 li
150.387 132.032 li
150.313 132.032 li
150.021 131.741 li
150.313 131.994 mo
150.971 131.994 li
150.896 131.994 mo
151.262 131.994 li
151.189 131.994 mo
151.555 131.994 li
151.481 131.994 mo
151.848 131.994 li
151.773 131.958 mo
151.848 131.958 li
152.139 132.25 li
152.139 132.324 li
152.066 132.324 li
151.773 132.032 li
152.066 132.286 mo
152.723 132.286 li
152.65 132.286 mo
153.016 132.286 li
152.942 132.286 mo
153.307 132.286 li
@
153.234 132.25 mo
153.307 132.25 li
153.6 132.541 li
153.6 132.615 li
153.525 132.615 li
153.234 132.324 li
153.525 132.577 mo
153.892 132.577 li
153.817 132.577 mo
154.475 132.577 li
154.402 132.577 mo
154.768 132.577 li
154.692 132.577 mo
155.06 132.577 li
154.985 132.541 mo
155.06 132.541 li
155.352 132.833 li
155.352 132.906 li
155.277 132.906 li
154.985 132.615 li
155.278 132.868 mo
155.645 132.868 li
155.57 132.868 mo
156.229 132.868 li
156.153 132.868 mo
156.521 132.868 li
156.446 132.868 mo
156.813 132.868 li
156.738 132.833 mo
156.813 132.833 li
157.105 133.125 li
157.105 133.197 li
157.03 133.197 li
156.738 132.906 li
157.03 133.16 mo
157.396 133.16 li
157.323 133.16 mo
157.689 133.16 li
157.614 133.16 mo
158.273 133.16 li
158.199 133.16 mo
158.564 133.16 li
158.491 133.125 mo
158.564 133.125 li
158.857 133.416 li
158.857 133.488 li
158.784 133.488 li
158.491 133.197 li
158.784 133.452 mo
159.15 133.452 li
159.075 133.452 mo
159.442 133.452 li
159.368 133.452 mo
160.025 133.452 li
159.952 133.452 mo
160.317 133.452 li
160.245 133.452 mo
160.609 133.452 li
160.536 133.416 mo
160.609 133.416 li
160.901 133.707 li
160.901 133.78 li
160.828 133.78 li
160.536 133.488 li
160.828 133.743 mo
161.192 133.743 li
161.12 133.743 mo
161.777 133.743 li
161.704 133.743 mo
162.069 133.743 li
161.996 133.743 mo
162.362 133.743 li
162.289 133.707 mo
162.362 133.707 li
162.653 133.999 li
162.653 134.071 li
162.581 134.071 li
162.289 133.78 li
162.581 134.033 mo
162.946 134.033 li
162.875 134.033 mo
163.238 134.033 li
163.166 134.033 mo
163.823 134.033 li
163.75 134.033 mo
164.114 134.033 li
164.043 134.033 mo
164.407 134.033 li
164.334 133.999 mo
164.407 133.999 li
164.698 134.29 li
164.698 134.363 li
164.627 134.363 li
164.334 134.071 li
164.627 134.325 mo
164.991 134.325 li
164.919 134.325 mo
165.575 134.325 li
165.504 134.325 mo
165.867 134.325 li
165.795 134.325 mo
166.159 134.325 li
166.088 134.325 mo
166.452 134.325 li
166.38 134.29 mo
166.452 134.29 li
166.743 134.581 li
166.743 134.654 li
166.672 134.654 li
166.38 134.363 li
166.672 134.617 mo
167.327 134.617 li
167.256 134.617 mo
167.62 134.617 li
167.549 134.617 mo
167.911 134.617 li
167.84 134.617 mo
168.204 134.617 li
168.133 134.617 mo
168.496 134.617 li
168.424 134.581 mo
168.496 134.581 li
168.788 134.872 li
168.788 134.947 li
168.716 134.947 li
168.424 134.654 li
168.717 134.908 mo
169.372 134.908 li
169.301 134.908 mo
169.666 134.908 li
169.592 134.908 mo
169.957 134.908 li
169.885 134.908 mo
170.25 134.908 li
170.177 134.908 mo
170.543 134.908 li
170.469 134.908 mo
171.127 134.908 li
171.053 134.872 mo
171.127 134.872 li
171.419 135.163 li
171.419 135.237 li
171.346 135.237 li
171.053 134.947 li
171.346 135.198 mo
171.711 135.198 li
171.638 135.198 mo
172.004 135.198 li
171.93 135.198 mo
172.295 135.198 li
172.223 135.198 mo
172.879 135.198 li
172.807 135.198 mo
173.172 135.198 li
173.099 135.198 mo
173.463 135.198 li
173.391 135.163 mo
173.463 135.163 li
173.756 135.455 li
173.756 135.529 li
173.684 135.529 li
173.391 135.237 li
173.682 135.489 mo
174.048 135.489 li
173.975 135.489 mo
174.34 135.489 li
174.267 135.489 mo
174.924 135.489 li
174.85 135.489 mo
175.216 135.489 li
175.143 135.489 mo
175.508 135.489 li
175.435 135.489 mo
175.801 135.489 li
175.728 135.455 mo
175.801 135.455 li
176.092 135.746 li
176.092 135.819 li
176.02 135.819 li
175.728 135.529 li
176.02 135.781 mo
176.677 135.781 li
176.604 135.781 mo
176.969 135.781 li
176.896 135.781 mo
177.262 135.781 li
177.188 135.781 mo
177.553 135.781 li
177.48 135.781 mo
177.846 135.781 li
177.771 135.781 mo
178.43 135.781 li
178.356 135.781 mo
178.721 135.781 li
178.648 135.746 mo
178.721 135.746 li
179.014 136.039 li
179.014 136.11 li
178.941 136.11 li
178.648 135.819 li
178.941 136.074 mo
179.306 136.074 li
179.232 136.074 mo
179.599 136.074 li
179.525 136.074 mo
179.889 136.074 li
179.817 136.074 mo
180.474 136.074 li
180.401 136.074 mo
180.767 136.074 li
180.692 136.074 mo
181.059 136.074 li
180.984 136.074 mo
181.352 136.074 li
181.277 136.039 mo
181.352 136.039 li
181.643 136.328 li
181.643 136.402 li
181.569 136.402 li
181.277 136.11 li
181.569 136.365 mo
182.227 136.365 li
182.152 136.365 mo
182.52 136.365 li
182.444 136.365 mo
182.811 136.365 li
182.737 136.365 mo
183.104 136.365 li
183.028 136.365 mo
183.396 136.365 li
183.321 136.365 mo
183.98 136.365 li
183.905 136.365 mo
184.271 136.365 li
184.198 136.328 mo
184.271 136.328 li
184.563 136.622 li
184.563 136.693 li
184.489 136.693 li
184.198 136.402 li
184.489 136.656 mo
184.856 136.656 li
184.782 136.656 mo
185.148 136.656 li
185.074 136.656 mo
185.441 136.656 li
185.366 136.656 mo
186.024 136.656 li
185.95 136.656 mo
186.316 136.656 li
186.243 136.656 mo
186.609 136.656 li
186.534 136.656 mo
186.9 136.656 li
186.827 136.656 mo
187.192 136.656 li
187.12 136.622 mo
187.192 136.622 li
187.776 136.913 li
187.776 136.984 li
187.704 136.984 li
187.12 136.693 li
187.704 136.947 mo
188.067 136.947 li
187.995 136.947 mo
188.36 136.947 li
188.288 136.947 mo
188.652 136.947 li
188.579 136.947 mo
188.944 136.947 li
188.872 136.947 mo
189.528 136.947 li
189.456 136.947 mo
189.821 136.947 li
189.747 136.947 mo
190.113 136.947 li
190.041 136.947 mo
190.405 136.947 li
190.332 136.947 mo
190.698 136.947 li
190.625 136.913 mo
190.698 136.913 li
190.989 137.204 li
190.989 137.275 li
190.918 137.275 li
190.625 136.984 li
190.918 137.239 mo
191.573 137.239 li
191.502 137.239 mo
191.866 137.239 li
191.794 137.239 mo
192.159 137.239 li
192.086 137.239 mo
192.45 137.239 li
192.379 137.239 mo
192.743 137.239 li
192.67 137.239 mo
193.327 137.239 li
193.255 137.239 mo
193.618 137.239 li
193.547 137.239 mo
193.911 137.239 li
193.838 137.239 mo
194.203 137.239 li
194.131 137.204 mo
194.202 137.204 li
194.495 137.495 li
194.495 137.569 li
194.423 137.569 li
194.131 137.275 li
194.423 137.53 mo
195.079 137.53 li
195.008 137.53 mo
195.371 137.53 li
195.299 137.53 mo
195.663 137.53 li
195.591 137.53 mo
195.956 137.53 li
195.884 137.53 mo
196.247 137.53 li
196.176 137.53 mo
196.541 137.53 li
196.469 137.53 mo
197.125 137.53 li
197.052 137.53 mo
197.418 137.53 li
197.344 137.53 mo
197.709 137.53 li
197.637 137.53 mo
198.002 137.53 li
197.928 137.495 mo
198 137.495 li
198.293 137.786 li
198.293 137.86 li
198.221 137.86 li
197.928 137.569 li
198.221 137.821 mo
198.877 137.821 li
198.805 137.821 mo
199.17 137.821 li
199.098 137.821 mo
199.462 137.821 li
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B82424A56CB29A06351789EB789ADD2BA13A6EE989CE6B047119B8C93510FC5C3E561E2FD88E71F7151F2BF8680D2621920B011143D9274E190F38A5B781C77CBDC7> |-/parenright <1C60D8A8C9B82424A56CB29A063A1FFE63B08EF0EC43682C51ABF3285C0C3523AA4ED1EA10CBBF5157D9CAF197107D0E8CC642F4A7BE4CAE3AFCC02D1C47AD0EA908AC129883353CA2> |-/slash <1C60D8A8C9B72E92255B68694B74549C33FFDB9749BC9AB6534A52905AEE803985> |-/T <1C60D8A8C9B653D71FD334BFBD83CDF29713AB60EE3930B8693B6E61D20F6F35DEA6F21ABF88F7075795665A7959B4ABD49BF5684116A5612E240AB45E48FCEFD0D3A26C954CD0D325A2757D96A4EA06285A3375E8B40E1AB15421BAECFE2708F670BF2D79F16E4E7AED55DD9B7234843A2064E06CBBB18FE1E51DAD27DD0F10621FFA0F226B79C899D87F89101F0269A9E781A1057449F1FDDDA6D885F69DE49023FF08BD0CCBB5C865E183878BC962E000E67D48E29F9884DF6A89D5E25C93AD680B9CDF3E58F274BCE5937C59659FC4AD162CEFD2A0> |-/Y <1C60D8A8C9B66A6BD1E91FCC02E00CDA58F6292D6136CE5F816C04342D84C9F620A803C3FABACDA291666608354EA155AA654E0A567E98769929897A909D05E3E9DD8BFE8CE9AE1DC6383DBDC6328D8E4857839005F77396751FE59F12B065FC9723F567BE282225890F7F12020BB62FE33E06B547CF170254FF54F66BDB060FF09AC519F0B8FAB8388C98C1C41F2BC94FD9ECA271D9604FFD524163177FEAF52B829FB63C087947FE989D22B967F22D185707F1A8EC81A1E56BF137B03D7F96B37B7C8884C5EEB65FC127EA4FF795CA8693DAC324A7C9C31BB92CC2F8EA810277DCEBE041C6BA9893EB38DF9FABE2C8F8> |-/a <1C60D8A8C9B7741C9121400149F0BE254DB2EDCF73865DB24D5A11C61D3E2861824502F3930FCEE8FD81A7B83174DDE3547BC52F2BEA690EED728D12CE67FDFAD3B06EDC42D76265158049422E8F49C82E372EEC8F6BAC552679A312FB62810A2B462B6D09C4E6F81DCA4CB5F9AB0916386C3C61616706C303D1BBEE0EEC17CD012E431C3103F4E952E798B85368EECB398C0FB13D70AAF54F591E5A699ACFD89E41D7E1E89AC61C86E1CD2B327D7D915E01DA73641B0DA24A> |-/s <1C60D8A8C9B737ECA2374DBE027558E5EAB5C63D11724C3E1677192555A255D2DA86B5B86D357BA005D72E0CC11D6840E626D5A45249228A677DE849B0E2A01193BD80B04529322BB54F9E633337832EA12E7DFD9863BCE2865EAC9AD6707DA7B07DDA5D686E9C8BC396BD0EEE8DE8D909A93472FEBCB9167A05F1040B45ECBE3E22A1DE8649A08F23614FD8B1C3AC5FD86539D735E3A90132056D2BA0F334015A8BA76FA6958D2F4CC5F5321A757C3389D42F84C6DAA19E7CA573FCF74A7AD5DD8C5F9055F67168AF34030BACDD0D9AE0FAAFA7BC> |-/t <1C60D8A8C9B81E5F2D0E9B872818392C48C6878E9C45306A658D428DB051ADCACC8B02B3C6705F1634FC8052C7F67B7B23F30ED53A5D09AF5FADF823B497D47A378E723D10B2E33D670980AA083916ACE26E5F369A3661031F00DEB60E897C79EEC4ACB67F4000EC75A9BD7DA7F5B8C319F130955156> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 47 /slash putdup 84 /T putdup 89 /Y putdup 97 /a putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /three /four /five /six /.notdef /eight 27{/.notdef}rp /T 4{/.notdef}rp /Y 7{/.notdef}rp /a 17{/.notdef}rp /s /t 139{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [0 -7.9516 -8.00003 0 0 0 ]msf6.75 81.5684 mo(Y/Y)[-5.01758 -2.90186 0 ]yshKHWOXX+WarnockPro-Regular*1 [0 -5.9637 -6.00002 0 0 0 ]msf7.74951 68.6318 mo(st)[-2.31396 0 ]yshKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf102.349 161.524 mo(t/T)[2.65625 2.91992 0 ]xshKHWOXX+WarnockPro-Regular*1 [6.00002 0 0 -5.9637 0 0 ]msf113.285 163.512 mo(1/2 )[3.01172 2.19043 3.01172 0 ]xshKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf108.201 175.912 mo(\(a\))[2.60742 3.64063 0 ]xsh0.498487 lw
199.499 332.497 mo
25.979 332.497 li
25.979 195.925 li
199.499 195.925 li
199.499 332.497 li
cp
0 0 0 1 cmyk
@
10 ml
43.251 330.75 mo
43.251 332.571 li
43.251 195.925 mo
43.251 197.744 li
60.7783 330.75 mo
60.7783 332.571 li
60.7783 195.925 mo
60.7783 197.744 li
78.0132 330.75 mo
78.0132 332.571 li
78.0132 195.925 mo
78.0132 197.744 li
95.54 330.75 mo
95.54 332.571 li
95.54 195.925 mo
95.54 197.744 li
112.775 330.75 mo
112.775 332.571 li
112.775 195.925 mo
112.775 197.744 li
130.011 330.75 mo
130.011 332.571 li
130.011 195.925 mo
130.011 197.744 li
147.538 330.75 mo
147.538 332.571 li
147.538 195.925 mo
147.538 197.744 li
164.772 330.75 mo
164.772 332.571 li
164.772 195.925 mo
164.772 197.744 li
182.3 330.75 mo
182.3 332.571 li
182.3 195.925 mo
182.3 197.744 li
25.979 309.82 mo
27.8052 309.82 li
197.747 309.82 mo
199.572 309.82 li
25.979 287.107 mo
27.8052 287.107 li
197.747 287.107 mo
199.572 287.107 li
25.979 264.101 mo
27.8052 264.101 li
197.747 264.101 mo
199.572 264.101 li
25.979 241.388 mo
27.8052 241.388 li
197.747 241.388 mo
199.572 241.388 li
25.979 218.673 mo
27.8052 218.673 li
197.747 218.673 mo
199.572 218.673 li
@
0.747731 lw
25.979 275.75 mo
27.8052 275.75 li
28.9009 275.75 mo
30.7261 275.75 li
31.8223 275.75 mo
33.647 275.75 li
34.7432 275.75 mo
36.5693 275.75 li
37.6641 275.75 mo
39.4912 275.75 li
40.585 275.75 mo
42.4102 275.75 li
43.5073 275.75 mo
45.333 275.75 li
46.4272 275.75 mo
48.2539 275.75 li
49.3481 275.75 mo
51.1753 275.75 li
52.27 275.75 mo
54.0972 275.75 li
55.1909 275.75 mo
57.0171 275.75 li
58.1123 275.75 mo
59.938 275.75 li
60.7783 276.004 mo
60.7783 277.824 li
60.7783 278.917 mo
60.7783 280.736 li
60.7783 281.829 mo
60.7783 283.649 li
60.7783 284.742 mo
60.7783 286.56 li
60.7783 287.652 mo
60.7783 289.471 li
60.7783 290.565 mo
60.7783 292.384 li
60.7783 293.476 mo
60.7783 295.296 li
60.7783 296.388 mo
60.7783 298.208 li
60.7783 299.3 mo
60.7783 301.121 li
60.7783 302.212 mo
60.7783 304.032 li
60.7783 305.125 mo
60.7783 306.944 li
60.7783 308.037 mo
60.7783 309.857 li
60.7783 310.948 mo
60.7783 312.768 li
60.7783 313.86 mo
60.7783 315.681 li
60.7783 316.772 mo
60.7783 318.592 li
60.7783 319.684 mo
60.7783 321.504 li
60.7783 322.596 mo
60.7783 324.417 li
60.7783 325.508 mo
60.7783 327.329 li
60.7783 328.419 mo
60.7783 330.241 li
@
4 ml
26.271 331.625 mo
26.3442 331.625 li
26.3442 331.696 li
26.0532 332.571 li
25.979 332.571 li
25.979 332.497 li
26.564 331.041 mo
26.6372 331.041 li
26.6372 331.113 li
26.3442 331.696 li
26.271 331.696 li
26.271 331.625 li
27.1479 330.167 mo
27.2222 330.167 li
27.2222 330.241 li
26.6372 331.113 li
26.564 331.113 li
26.564 331.041 li
27.4399 329.293 mo
27.5132 329.293 li
27.5132 329.367 li
27.2222 330.241 li
27.1479 330.241 li
27.1479 330.167 li
27.7319 328.71 mo
27.8052 328.71 li
27.8052 328.785 li
27.5132 329.367 li
27.4399 329.367 li
27.4399 329.293 li
28.0239 327.837 mo
28.0981 327.837 li
28.0981 327.911 li
27.8052 328.785 li
27.7319 328.785 li
27.7319 328.71 li
28.3159 326.963 mo
28.3892 326.963 li
28.3892 327.037 li
28.0981 327.911 li
28.0239 327.911 li
28.0239 327.837 li
28.9009 326.382 mo
28.9741 326.382 li
28.9741 326.455 li
28.3892 327.037 li
28.3159 327.037 li
28.3159 326.963 li
29.1919 325.508 mo
29.2651 325.508 li
29.2651 325.581 li
28.9741 326.455 li
28.9009 326.455 li
28.9009 326.382 li
29.4849 324.926 mo
29.5591 324.926 li
29.5591 325 li
29.2651 325.581 li
29.1919 325.581 li
29.1919 325.508 li
29.7773 324.053 mo
29.8501 324.053 li
29.8501 324.125 li
29.5591 325 li
29.4849 325 li
29.4849 324.926 li
30.0693 323.47 mo
30.1421 323.47 li
30.1421 323.543 li
29.8501 324.125 li
29.7773 324.125 li
29.7773 324.053 li
30.3599 322.596 mo
30.4341 322.596 li
30.4341 322.669 li
30.1421 323.543 li
30.0693 323.543 li
30.0693 323.47 li
30.9463 322.013 mo
31.0181 322.013 li
31.0181 322.086 li
30.4341 322.669 li
30.3599 322.669 li
30.3599 322.596 li
31.2383 321.14 mo
31.3101 321.14 li
31.3101 321.213 li
31.0181 322.086 li
30.9463 322.086 li
30.9463 322.013 li
31.5303 320.557 mo
31.603 320.557 li
31.603 320.63 li
31.3101 321.213 li
31.2383 321.213 li
31.2383 321.14 li
31.8223 319.975 mo
31.894 319.975 li
31.894 320.048 li
31.603 320.63 li
31.5303 320.63 li
31.5303 320.557 li
32.1143 319.101 mo
32.186 319.101 li
32.186 319.175 li
31.894 320.048 li
31.8223 320.048 li
31.8223 319.975 li
32.6982 318.52 mo
32.772 318.52 li
32.772 318.592 li
32.186 319.175 li
32.1143 319.175 li
32.1143 319.101 li
32.9902 317.645 mo
33.063 317.645 li
33.063 317.717 li
32.772 318.592 li
32.6982 318.592 li
32.6982 318.52 li
33.2822 317.065 mo
33.355 317.065 li
33.355 317.137 li
33.063 317.717 li
32.9902 317.717 li
32.9902 317.645 li
33.5752 316.48 mo
33.647 316.48 li
33.647 316.553 li
33.355 317.137 li
33.2822 317.137 li
33.2822 317.065 li
33.8672 315.608 mo
33.9399 315.608 li
33.9399 315.681 li
33.647 316.553 li
33.5752 316.553 li
33.5752 316.48 li
34.4512 315.025 mo
34.5239 315.025 li
34.5239 315.097 li
33.9399 315.681 li
33.8672 315.681 li
33.8672 315.608 li
34.7432 314.443 mo
34.8159 314.443 li
34.8159 314.516 li
34.5239 315.097 li
34.4512 315.097 li
34.4512 315.025 li
35.0342 313.86 mo
35.1079 313.86 li
35.1079 313.933 li
34.8159 314.516 li
34.7432 314.516 li
34.7432 314.443 li
35.3281 312.988 mo
35.3999 312.988 li
35.3999 313.058 li
35.1079 313.933 li
35.0342 313.933 li
35.0342 313.86 li
35.6201 312.404 mo
35.6919 312.404 li
35.6919 312.478 li
35.3999 313.058 li
35.3281 313.058 li
35.3281 312.988 li
35.9111 311.823 mo
35.9839 311.823 li
35.9839 311.894 li
35.6919 312.478 li
35.6201 312.478 li
35.6201 312.404 li
36.4951 311.239 mo
36.5693 311.239 li
36.5693 311.313 li
35.9839 311.894 li
35.9111 311.894 li
35.9111 311.823 li
36.7881 310.366 mo
36.8613 310.366 li
36.8613 310.439 li
36.5693 311.313 li
36.4951 311.313 li
36.4951 311.239 li
37.0791 309.783 mo
37.1533 309.783 li
37.1533 309.857 li
36.8613 310.439 li
36.7881 310.439 li
36.7881 310.366 li
37.3721 309.201 mo
37.4463 309.201 li
37.4463 309.275 li
37.1533 309.857 li
37.0791 309.857 li
37.0791 309.783 li
37.6641 308.619 mo
37.7373 308.619 li
37.7373 308.691 li
37.4463 309.275 li
37.3721 309.275 li
37.3721 309.201 li
38.249 308.037 mo
38.3223 308.037 li
38.3223 308.11 li
37.7373 308.691 li
37.6641 308.691 li
37.6641 308.619 li
38.54 307.455 mo
38.6143 307.455 li
38.6143 307.526 li
38.3223 308.11 li
38.249 308.11 li
38.249 308.037 li
38.833 306.872 mo
38.9053 306.872 li
38.9053 306.944 li
38.6143 307.526 li
38.54 307.526 li
38.54 307.455 li
39.125 305.998 mo
39.1982 305.998 li
39.1982 306.071 li
38.9053 306.944 li
38.833 306.944 li
38.833 306.872 li
39.416 305.416 mo
39.4912 305.416 li
39.4912 305.489 li
39.1982 306.071 li
39.125 306.071 li
39.125 305.998 li
40.001 304.833 mo
40.0742 304.833 li
40.0742 304.906 li
39.4912 305.489 li
39.416 305.489 li
39.416 305.416 li
40.2939 304.25 mo
40.3662 304.25 li
40.3662 304.324 li
40.0742 304.906 li
40.001 304.906 li
40.001 304.833 li
40.585 303.668 mo
40.6582 303.668 li
40.6582 303.741 li
40.3662 304.324 li
40.2939 304.324 li
40.2939 304.25 li
40.877 303.085 mo
40.9521 303.085 li
40.9521 303.16 li
40.6582 303.741 li
40.585 303.741 li
40.585 303.668 li
41.1699 302.503 mo
41.2432 302.503 li
41.2432 302.576 li
40.9521 303.16 li
40.877 303.16 li
40.877 303.085 li
41.4619 301.92 mo
41.5352 301.92 li
41.5352 301.995 li
41.2432 302.576 li
41.1699 302.576 li
41.1699 302.503 li
42.0459 301.338 mo
42.1191 301.338 li
42.1191 301.412 li
41.5352 301.995 li
41.4619 301.995 li
41.4619 301.92 li
42.3389 300.755 mo
42.4102 300.755 li
42.4102 300.83 li
42.1191 301.412 li
42.0459 301.412 li
42.0459 301.338 li
42.6309 300.173 mo
42.7031 300.173 li
42.7031 300.248 li
42.4102 300.83 li
42.3389 300.83 li
42.3389 300.755 li
42.9229 299.592 mo
42.9961 299.592 li
42.9961 299.664 li
42.7031 300.248 li
42.6309 300.248 li
42.6309 300.173 li
43.2139 299.3 mo
43.2871 299.3 li
43.2871 299.374 li
42.9961 299.664 li
42.9229 299.664 li
42.9229 299.592 li
43.7979 298.717 mo
43.8711 298.717 li
43.8711 298.791 li
43.2871 299.374 li
43.2139 299.374 li
43.2139 299.3 li
44.0913 298.136 mo
44.1641 298.136 li
44.1641 298.208 li
43.8711 298.791 li
43.7979 298.791 li
43.7979 298.717 li
44.3833 297.552 mo
44.4561 297.552 li
44.4561 297.625 li
44.1641 298.208 li
44.0913 298.208 li
44.0913 298.136 li
44.6753 296.971 mo
44.748 296.971 li
44.748 297.044 li
44.4561 297.625 li
44.3833 297.625 li
44.3833 297.552 li
44.9673 296.388 mo
45.04 296.388 li
45.04 296.46 li
44.748 297.044 li
44.6753 297.044 li
44.6753 296.971 li
45.5522 295.806 mo
45.624 295.806 li
45.624 295.879 li
45.04 296.46 li
44.9673 296.46 li
44.9673 296.388 li
45.8442 295.223 mo
45.917 295.223 li
45.917 295.296 li
45.624 295.879 li
45.5522 295.879 li
45.5522 295.806 li
46.1362 294.932 mo
46.208 294.932 li
46.208 295.004 li
45.917 295.296 li
45.8442 295.296 li
45.8442 295.223 li
46.4272 294.349 mo
46.501 294.349 li
46.501 294.422 li
46.208 295.004 li
46.1362 295.004 li
46.1362 294.932 li
46.7202 293.768 mo
46.793 293.768 li
46.793 293.839 li
46.501 294.422 li
46.4272 294.422 li
46.4272 294.349 li
47.0132 293.185 mo
47.085 293.185 li
47.085 293.257 li
46.793 293.839 li
46.7202 293.839 li
46.7202 293.768 li
47.5972 292.603 mo
47.6699 292.603 li
47.6699 292.675 li
47.085 293.257 li
47.0132 293.257 li
47.0132 293.185 li
47.8882 292.311 mo
47.9609 292.311 li
47.9609 292.384 li
47.6699 292.675 li
47.5972 292.675 li
47.5972 292.603 li
48.1812 291.73 mo
48.2539 291.73 li
48.2539 291.802 li
47.9609 292.384 li
47.8882 292.384 li
47.8882 292.311 li
48.4731 291.147 mo
48.5459 291.147 li
48.5459 291.22 li
48.2539 291.802 li
48.1812 291.802 li
48.1812 291.73 li
48.7642 290.855 mo
48.8379 290.855 li
48.8379 290.927 li
48.5459 291.22 li
48.4731 291.22 li
48.4731 291.147 li
49.3481 290.273 mo
49.4209 290.273 li
49.4209 290.347 li
48.8379 290.927 li
48.7642 290.927 li
48.7642 290.855 li
49.6411 289.69 mo
49.7148 289.69 li
49.7148 289.763 li
49.4209 290.347 li
49.3481 290.347 li
49.3481 290.273 li
49.9341 289.109 mo
50.0073 289.109 li
50.0073 289.182 li
49.7148 289.763 li
49.6411 289.763 li
49.6411 289.69 li
50.2251 288.818 mo
50.2979 288.818 li
50.2979 288.891 li
50.0073 289.182 li
49.9341 289.182 li
49.9341 289.109 li
50.5181 288.235 mo
50.5913 288.235 li
50.5913 288.306 li
50.2979 288.891 li
50.2251 288.891 li
50.2251 288.818 li
51.1021 287.652 mo
51.1753 287.652 li
51.1753 287.726 li
50.5913 288.306 li
50.5181 288.306 li
50.5181 288.235 li
51.394 287.363 mo
51.4673 287.363 li
51.4673 287.433 li
51.1753 287.726 li
51.1021 287.726 li
51.1021 287.652 li
51.686 286.779 mo
51.7593 286.779 li
51.7593 286.851 li
51.4673 287.433 li
51.394 287.433 li
51.394 287.363 li
51.9771 286.488 mo
52.0513 286.488 li
52.0513 286.56 li
51.7593 286.851 li
51.686 286.851 li
51.686 286.779 li
52.27 285.906 mo
52.3433 285.906 li
52.3433 285.978 li
52.0513 286.56 li
51.9771 286.56 li
51.9771 286.488 li
52.563 285.323 mo
52.6362 285.323 li
52.6362 285.395 li
52.3433 285.978 li
52.27 285.978 li
52.27 285.906 li
53.146 285.031 mo
53.2202 285.031 li
53.2202 285.104 li
52.6362 285.395 li
52.563 285.395 li
52.563 285.323 li
53.438 284.449 mo
53.5112 284.449 li
53.5112 284.523 li
53.2202 285.104 li
53.146 285.104 li
53.146 285.031 li
53.731 284.158 mo
53.8042 284.158 li
53.8042 284.23 li
53.5112 284.523 li
53.438 284.523 li
53.438 284.449 li
54.0229 283.576 mo
54.0972 283.576 li
54.0972 283.649 li
53.8042 284.23 li
53.731 284.23 li
53.731 284.158 li
54.3149 283.285 mo
54.3892 283.285 li
54.3892 283.357 li
54.0972 283.649 li
54.0229 283.649 li
54.0229 283.576 li
54.8989 282.703 mo
54.9722 282.703 li
54.9722 282.774 li
54.3892 283.357 li
54.3149 283.357 li
54.3149 283.285 li
55.1909 282.412 mo
55.2642 282.412 li
55.2642 282.484 li
54.9722 282.774 li
54.8989 282.774 li
54.8989 282.703 li
55.4839 281.829 mo
55.5571 281.829 li
55.5571 281.9 li
55.2642 282.484 li
55.1909 282.484 li
55.1909 282.412 li
55.7759 281.247 mo
55.8481 281.247 li
55.8481 281.319 li
55.5571 281.9 li
55.4839 281.9 li
55.4839 281.829 li
56.0679 280.955 mo
56.1411 280.955 li
56.1411 281.028 li
55.8481 281.319 li
55.7759 281.319 li
55.7759 281.247 li
56.6509 280.664 mo
56.7251 280.664 li
56.7251 280.736 li
56.1411 281.028 li
56.0679 281.028 li
56.0679 280.955 li
56.9443 280.082 mo
57.0171 280.082 li
57.0171 280.154 li
56.7251 280.736 li
56.6509 280.736 li
56.6509 280.664 li
57.2373 279.791 mo
57.3101 279.791 li
57.3101 279.863 li
57.0171 280.154 li
56.9443 280.154 li
56.9443 280.082 li
57.5283 279.207 mo
57.6011 279.207 li
57.6011 279.281 li
57.3101 279.863 li
57.2373 279.863 li
57.2373 279.791 li
57.8203 278.917 mo
57.894 278.917 li
57.894 278.99 li
57.6011 279.281 li
57.5283 279.281 li
57.5283 279.207 li
58.1123 278.335 mo
58.1851 278.335 li
58.1851 278.407 li
57.894 278.99 li
57.8203 278.99 li
57.8203 278.917 li
58.6973 278.042 mo
58.77 278.042 li
58.77 278.115 li
58.1851 278.407 li
58.1123 278.407 li
58.1123 278.335 li
58.9893 277.46 mo
59.062 277.46 li
59.062 277.533 li
58.77 278.115 li
58.6973 278.115 li
58.6973 278.042 li
59.2813 277.169 mo
59.354 277.169 li
59.354 277.242 li
59.062 277.533 li
58.9893 277.533 li
58.9893 277.46 li
59.5732 276.878 mo
59.645 276.878 li
59.645 276.952 li
59.354 277.242 li
59.2813 277.242 li
59.2813 277.169 li
59.8652 276.295 mo
59.938 276.295 li
59.938 276.369 li
59.645 276.952 li
59.5732 276.952 li
59.5732 276.878 li
60.4502 276.004 mo
60.522 276.004 li
60.522 276.077 li
59.938 276.369 li
59.8652 276.369 li
59.8652 276.295 li
60.7422 275.712 mo
60.814 275.712 li
60.814 275.787 li
60.522 276.077 li
60.4502 276.077 li
60.4502 276.004 li
61.0342 275.13 mo
61.1069 275.13 li
61.1069 275.203 li
60.814 275.787 li
60.7422 275.787 li
60.7422 275.712 li
61.3262 274.839 mo
61.3989 274.839 li
61.3989 274.914 li
61.1069 275.203 li
61.0342 275.203 li
61.0342 275.13 li
61.6182 274.548 mo
61.6909 274.548 li
61.6909 274.622 li
61.3989 274.914 li
61.3262 274.914 li
61.3262 274.839 li
62.2021 273.966 mo
62.2749 273.966 li
62.2749 274.039 li
61.6909 274.622 li
61.6182 274.622 li
61.6182 274.548 li
62.4941 273.675 mo
62.5669 273.675 li
62.5669 273.748 li
62.2749 274.039 li
62.2021 274.039 li
62.2021 273.966 li
62.7871 273.384 mo
62.8599 273.384 li
62.8599 273.457 li
62.5669 273.748 li
62.4941 273.748 li
62.4941 273.675 li
63.0791 272.802 mo
63.1523 272.802 li
63.1523 272.874 li
62.8599 273.457 li
62.7871 273.457 li
62.7871 273.384 li
63.3701 272.511 mo
63.4443 272.511 li
63.4443 272.583 li
63.1523 272.874 li
63.0791 272.874 li
63.0791 272.802 li
63.6631 272.219 mo
63.7349 272.219 li
63.7349 272.292 li
63.4443 272.583 li
63.3701 272.583 li
63.3701 272.511 li
64.2471 271.636 mo
64.3213 271.636 li
64.3213 271.708 li
63.7349 272.292 li
63.6631 272.292 li
63.6631 272.219 li
64.5391 271.345 mo
64.6123 271.345 li
64.6123 271.417 li
64.3213 271.708 li
64.2471 271.708 li
64.2471 271.636 li
64.8311 271.054 mo
64.9043 271.054 li
64.9043 271.126 li
64.6123 271.417 li
64.5391 271.417 li
64.5391 271.345 li
65.124 270.762 mo
65.1963 270.762 li
65.1963 270.835 li
64.9043 271.126 li
64.8311 271.126 li
64.8311 271.054 li
65.415 270.472 mo
65.4883 270.472 li
65.4883 270.544 li
65.1963 270.835 li
65.124 270.835 li
65.124 270.762 li
66 269.888 mo
66.0732 269.888 li
66.0732 269.962 li
65.4883 270.544 li
65.415 270.544 li
65.415 270.472 li
66.292 269.598 mo
66.3652 269.598 li
66.3652 269.671 li
66.0732 269.962 li
66 269.962 li
66 269.888 li
66.583 269.308 mo
66.6572 269.308 li
66.6572 269.379 li
66.3652 269.671 li
66.292 269.671 li
66.292 269.598 li
66.876 269.015 mo
66.9492 269.015 li
66.9492 269.088 li
66.6572 269.379 li
66.583 269.379 li
66.583 269.308 li
67.1689 268.433 mo
67.2412 268.433 li
67.2412 268.505 li
66.9492 269.088 li
66.876 269.088 li
66.876 269.015 li
67.752 268.142 mo
67.8262 268.142 li
67.8262 268.216 li
67.2412 268.505 li
67.1689 268.505 li
67.1689 268.433 li
68.0439 267.851 mo
68.1182 267.851 li
68.1182 267.924 li
67.8262 268.216 li
67.752 268.216 li
67.752 268.142 li
68.3359 267.56 mo
68.4102 267.56 li
68.4102 267.632 li
68.1182 267.924 li
68.0439 267.924 li
68.0439 267.851 li
68.6299 267.269 mo
68.7021 267.269 li
68.7021 267.341 li
68.4102 267.632 li
68.3359 267.632 li
68.3359 267.56 li
68.9209 266.977 mo
68.9941 266.977 li
68.9941 267.05 li
68.7021 267.341 li
68.6299 267.341 li
68.6299 267.269 li
69.5049 266.394 mo
69.5781 266.394 li
69.5781 266.467 li
68.9941 267.05 li
68.9209 267.05 li
68.9209 266.977 li
69.7979 266.103 mo
69.8711 266.103 li
69.8711 266.176 li
69.5781 266.467 li
69.5049 266.467 li
69.5049 266.394 li
70.0889 265.812 mo
70.1631 265.812 li
70.1631 265.886 li
69.8711 266.176 li
69.7979 266.176 li
69.7979 266.103 li
70.3823 265.521 mo
70.4541 265.521 li
70.4541 265.595 li
70.1631 265.886 li
70.0889 265.886 li
70.0889 265.812 li
70.6743 265.229 mo
70.7461 265.229 li
70.7461 265.302 li
70.4541 265.595 li
70.3823 265.595 li
70.3823 265.521 li
70.9663 264.939 mo
71.0381 264.939 li
71.0381 265.011 li
70.7461 265.302 li
70.6743 265.302 li
70.6743 265.229 li
71.5513 264.648 mo
71.623 264.648 li
71.623 264.72 li
71.0381 265.011 li
70.9663 265.011 li
70.9663 264.939 li
71.8433 264.357 mo
71.915 264.357 li
71.915 264.429 li
71.623 264.72 li
71.5513 264.72 li
71.5513 264.648 li
72.1343 264.066 mo
72.207 264.066 li
72.207 264.138 li
71.915 264.429 li
71.8433 264.429 li
71.8433 264.357 li
72.4263 263.773 mo
72.499 263.773 li
72.499 263.846 li
72.207 264.138 li
72.1343 264.138 li
72.1343 264.066 li
72.7183 263.193 mo
72.791 263.193 li
72.791 263.265 li
72.499 263.846 li
72.4263 263.846 li
72.4263 263.773 li
73.3032 262.901 mo
73.376 262.901 li
73.376 262.974 li
72.791 263.265 li
72.7183 263.265 li
72.7183 263.193 li
73.5952 262.609 mo
73.668 262.609 li
73.668 262.681 li
73.376 262.974 li
73.3032 262.974 li
73.3032 262.901 li
73.8872 262.318 mo
73.959 262.318 li
73.959 262.391 li
73.668 262.681 li
73.5952 262.681 li
73.5952 262.609 li
74.1802 262.027 mo
74.2529 262.027 li
74.2529 262.099 li
73.959 262.391 li
73.8872 262.391 li
73.8872 262.318 li
74.4722 261.736 mo
74.5449 261.736 li
74.5449 261.808 li
74.2529 262.099 li
74.1802 262.099 li
74.1802 262.027 li
75.0562 261.444 mo
75.1279 261.444 li
75.1279 261.519 li
74.5449 261.808 li
74.4722 261.808 li
74.4722 261.736 li
75.3481 261.152 mo
75.4209 261.152 li
75.4209 261.226 li
75.1279 261.519 li
75.0562 261.519 li
75.0562 261.444 li
75.6392 260.863 mo
75.7119 260.863 li
75.7119 260.935 li
75.4209 261.226 li
75.3481 261.226 li
75.3481 261.152 li
75.9321 260.572 mo
76.0049 260.572 li
76.0049 260.644 li
75.7119 260.935 li
75.6392 260.935 li
75.6392 260.863 li
76.2251 260.28 mo
76.2969 260.28 li
76.2969 260.353 li
76.0049 260.644 li
75.9321 260.644 li
75.9321 260.572 li
76.5161 259.989 mo
76.5889 259.989 li
76.5889 260.061 li
76.2969 260.353 li
76.2251 260.353 li
76.2251 260.28 li
77.0991 259.697 mo
77.1753 259.697 li
77.1753 259.769 li
76.5889 260.061 li
76.5161 260.061 li
76.5161 259.989 li
77.3931 259.406 mo
77.4663 259.406 li
77.4663 259.478 li
77.1753 259.769 li
77.0991 259.769 li
77.0991 259.697 li
77.6851 259.115 mo
77.7583 259.115 li
77.7583 259.189 li
77.4663 259.478 li
77.3931 259.478 li
77.3931 259.406 li
77.9761 258.824 mo
78.0503 258.824 li
78.0503 258.898 li
77.7583 259.189 li
77.6851 259.189 li
77.6851 259.115 li
78.2681 258.532 mo
78.3423 258.532 li
78.3423 258.604 li
78.0503 258.898 li
77.9761 258.898 li
77.9761 258.824 li
78.853 258.242 mo
78.9263 258.242 li
78.9263 258.313 li
78.3423 258.604 li
78.2681 258.604 li
78.2681 258.532 li
@
10 ml
78.853 258.278 mo
79.2192 258.278 li
@
4 ml
79.437 257.951 mo
79.5112 257.951 li
79.5112 258.023 li
79.2192 258.313 li
79.145 258.313 li
79.145 258.242 li
79.729 257.659 mo
79.8022 257.659 li
79.8022 257.732 li
79.5112 258.023 li
79.437 258.023 li
79.437 257.951 li
80.022 257.368 mo
80.0952 257.368 li
80.0952 257.44 li
79.8022 257.732 li
79.729 257.732 li
79.729 257.659 li
80.606 257.076 mo
80.6792 257.076 li
80.6792 257.149 li
80.0952 257.44 li
80.022 257.44 li
80.022 257.368 li
80.8979 256.785 mo
80.9712 256.785 li
80.9712 256.859 li
80.6792 257.149 li
80.606 257.149 li
80.606 257.076 li
81.1899 256.494 mo
81.2632 256.494 li
81.2632 256.568 li
80.9712 256.859 li
80.8979 256.859 li
80.8979 256.785 li
81.4819 256.203 mo
81.5562 256.203 li
81.5562 256.275 li
81.2632 256.568 li
81.1899 256.568 li
81.1899 256.494 li
81.7739 255.912 mo
81.8472 255.912 li
81.8472 255.984 li
81.5562 256.275 li
81.4819 256.275 li
81.4819 256.203 li
82.0669 255.621 mo
82.1392 255.621 li
82.1392 255.693 li
81.8472 255.984 li
81.7739 255.984 li
81.7739 255.912 li
82.6499 255.33 mo
82.7231 255.33 li
82.7231 255.402 li
82.1392 255.693 li
82.0669 255.693 li
82.0669 255.621 li
@
10 ml
82.6499 255.366 mo
83.0161 255.366 li
@
4 ml
83.2354 255.039 mo
83.3081 255.039 li
83.3081 255.111 li
83.0161 255.402 li
82.9429 255.402 li
82.9429 255.33 li
83.5259 254.748 mo
83.6001 254.748 li
83.6001 254.82 li
83.3081 255.111 li
83.2354 255.111 li
83.2354 255.039 li
83.8193 254.455 mo
83.8921 254.455 li
83.8921 254.528 li
83.6001 254.82 li
83.5259 254.82 li
83.5259 254.748 li
84.4043 254.164 mo
84.4761 254.164 li
84.4761 254.237 li
83.8921 254.528 li
83.8193 254.528 li
83.8193 254.455 li
84.6953 253.875 mo
84.769 253.875 li
84.769 253.945 li
84.4761 254.237 li
84.4043 254.237 li
84.4043 254.164 li
84.9873 253.582 mo
85.061 253.582 li
85.061 253.654 li
84.769 253.945 li
84.6953 253.945 li
84.6953 253.875 li
@
10 ml
84.9873 253.619 mo
85.3521 253.619 li
@
4 ml
85.5723 253.291 mo
85.644 253.291 li
85.644 253.364 li
85.3521 253.654 li
85.2803 253.654 li
85.2803 253.582 li
86.1563 253 mo
86.229 253 li
86.229 253.073 li
85.644 253.364 li
85.5723 253.364 li
85.5723 253.291 li
86.4482 252.708 mo
86.52 252.708 li
86.52 252.781 li
86.229 253.073 li
86.1563 253.073 li
86.1563 253 li
86.7412 252.417 mo
86.813 252.417 li
86.813 252.492 li
86.52 252.781 li
86.4482 252.781 li
86.4482 252.708 li
@
10 ml
86.7412 252.455 mo
87.105 252.455 li
@
4 ml
87.3252 252.125 mo
87.3979 252.125 li
87.3979 252.199 li
87.105 252.492 li
87.0322 252.492 li
87.0322 252.417 li
87.6172 251.833 mo
87.6899 251.833 li
87.6899 251.908 li
87.3979 252.199 li
87.3252 252.199 li
87.3252 252.125 li
88.2002 251.544 mo
88.2739 251.544 li
88.2739 251.616 li
87.6899 251.908 li
87.6172 251.908 li
87.6172 251.833 li
88.4932 251.253 mo
88.5659 251.253 li
88.5659 251.326 li
88.2739 251.616 li
88.2002 251.616 li
88.2002 251.544 li
@
10 ml
88.4932 251.29 mo
88.8579 251.29 li
@
4 ml
89.0771 250.961 mo
89.1499 250.961 li
89.1499 251.035 li
88.8579 251.326 li
88.7861 251.326 li
88.7861 251.253 li
89.3691 250.67 mo
89.4419 250.67 li
89.4419 250.743 li
89.1499 251.035 li
89.0771 251.035 li
89.0771 250.961 li
89.9531 250.378 mo
90.0259 250.378 li
90.0259 250.451 li
89.4419 250.743 li
89.3691 250.743 li
89.3691 250.67 li
@
10 ml
89.9531 250.416 mo
90.3193 250.416 li
@
4 ml
90.5381 250.087 mo
90.6113 250.087 li
90.6113 250.161 li
90.3193 250.451 li
90.2461 250.451 li
90.2461 250.378 li
90.8301 249.795 mo
90.9033 249.795 li
90.9033 249.871 li
90.6113 250.161 li
90.5381 250.161 li
90.5381 250.087 li
91.1221 249.505 mo
91.1953 249.505 li
91.1953 249.578 li
90.9033 249.871 li
90.8301 249.871 li
90.8301 249.795 li
@
10 ml
91.1221 249.541 mo
91.7803 249.541 li
@
4 ml
91.999 249.214 mo
92.0713 249.214 li
92.0713 249.287 li
91.7803 249.578 li
91.7061 249.578 li
91.7061 249.505 li
92.29 248.923 mo
92.3633 248.923 li
92.3633 248.996 li
92.0713 249.287 li
91.999 249.287 li
91.999 249.214 li
92.582 248.632 mo
92.6563 248.632 li
92.6563 248.705 li
92.3633 248.996 li
92.29 248.996 li
92.29 248.923 li
@
10 ml
92.582 248.668 mo
92.9482 248.668 li
@
4 ml
93.167 248.34 mo
93.2402 248.34 li
93.2402 248.414 li
92.9482 248.705 li
92.874 248.705 li
92.874 248.632 li
93.751 248.049 mo
93.8242 248.049 li
93.8242 248.123 li
93.2402 248.414 li
93.167 248.414 li
93.167 248.34 li
@
10 ml
93.751 248.085 mo
94.1162 248.085 li
@
4 ml
94.335 247.757 mo
94.4082 247.757 li
94.4082 247.832 li
94.1162 248.123 li
94.043 248.123 li
94.043 248.049 li
94.6279 247.466 mo
94.7012 247.466 li
94.7012 247.54 li
94.4082 247.832 li
94.335 247.832 li
94.335 247.757 li
@
10 ml
94.6279 247.503 mo
94.9932 247.503 li
@
4 ml
95.5039 247.175 mo
95.5771 247.175 li
95.5771 247.248 li
94.9932 247.54 li
94.9189 247.54 li
94.9189 247.466 li
95.7959 246.884 mo
95.8691 246.884 li
95.8691 246.957 li
95.5771 247.248 li
95.5039 247.248 li
95.5039 247.175 li
@
10 ml
95.7959 246.921 mo
96.1611 246.921 li
@
4 ml
96.3799 246.593 mo
96.4541 246.593 li
96.4541 246.667 li
96.1611 246.957 li
96.0879 246.957 li
96.0879 246.884 li
96.6729 246.302 mo
96.7451 246.302 li
96.7451 246.375 li
96.4541 246.667 li
96.3799 246.667 li
96.3799 246.593 li
@
10 ml
96.6729 246.338 mo
97.3291 246.338 li
@
4 ml
97.5493 246.011 mo
97.6221 246.011 li
97.6221 246.083 li
97.3291 246.375 li
97.2559 246.375 li
97.2559 246.302 li
97.8413 245.719 mo
97.9131 245.719 li
97.9131 245.792 li
97.6221 246.083 li
97.5493 246.083 li
97.5493 246.011 li
@
10 ml
97.8413 245.756 mo
98.2061 245.756 li
@
4 ml
98.4253 245.428 mo
98.498 245.428 li
98.498 245.5 li
98.2061 245.792 li
98.1343 245.792 li
98.1343 245.719 li
98.7173 245.136 mo
98.79 245.136 li
98.79 245.209 li
98.498 245.5 li
98.4253 245.5 li
98.4253 245.428 li
@
10 ml
98.7173 245.173 mo
99.374 245.173 li
@
4 ml
99.5933 244.847 mo
99.667 244.847 li
99.667 244.918 li
99.374 245.209 li
99.3022 245.209 li
99.3022 245.136 li
99.8862 244.554 mo
99.958 244.554 li
99.958 244.626 li
99.667 244.918 li
99.5933 244.918 li
99.5933 244.847 li
@
10 ml
99.8862 244.591 mo
100.25 244.591 li
@
4 ml
100.471 244.263 mo
100.543 244.263 li
100.543 244.335 li
100.25 244.626 li
100.178 244.626 li
100.178 244.554 li
@
10 ml
100.471 244.298 mo
101.127 244.298 li
@
4 ml
101.347 243.973 mo
101.419 243.973 li
101.419 244.045 li
101.127 244.335 li
101.054 244.335 li
101.054 244.263 li
101.638 243.681 mo
101.712 243.681 li
101.712 243.755 li
101.419 244.045 li
101.347 244.045 li
101.347 243.973 li
@
10 ml
101.638 243.718 mo
102.004 243.718 li
@
4 ml
102.223 243.39 mo
102.296 243.39 li
102.296 243.462 li
102.004 243.755 li
101.931 243.755 li
101.931 243.681 li
@
10 ml
102.223 243.427 mo
102.88 243.427 li
@
4 ml
103.099 243.098 mo
103.173 243.098 li
103.173 243.171 li
102.88 243.462 li
102.807 243.462 li
102.807 243.39 li
103.393 242.808 mo
103.464 242.808 li
103.464 242.879 li
103.173 243.171 li
103.099 243.171 li
103.099 243.098 li
@
10 ml
103.393 242.843 mo
103.756 242.843 li
@
4 ml
103.975 242.517 mo
104.048 242.517 li
104.048 242.59 li
103.756 242.879 li
103.684 242.879 li
103.684 242.808 li
@
10 ml
103.975 242.554 mo
104.341 242.554 li
@
4 ml
104.854 242.226 mo
104.925 242.226 li
104.925 242.298 li
104.341 242.59 li
104.268 242.59 li
104.268 242.517 li
@
10 ml
104.854 242.262 mo
105.217 242.262 li
@
4 ml
105.437 241.933 mo
105.509 241.933 li
105.509 242.005 li
105.217 242.298 li
105.145 242.298 li
105.145 242.226 li
@
10 ml
105.437 241.97 mo
105.801 241.97 li
@
4 ml
106.021 241.643 mo
106.093 241.643 li
106.093 241.714 li
105.801 242.005 li
105.729 242.005 li
105.729 241.933 li
106.604 241.352 mo
106.678 241.352 li
106.678 241.424 li
106.093 241.714 li
106.021 241.714 li
106.021 241.643 li
@
10 ml
106.604 241.388 mo
106.97 241.388 li
@
4 ml
107.188 241.06 mo
107.261 241.06 li
107.261 241.133 li
106.97 241.424 li
106.897 241.424 li
106.897 241.352 li
@
10 ml
107.188 241.097 mo
107.554 241.097 li
@
4 ml
107.773 240.769 mo
107.847 240.769 li
107.847 240.842 li
107.554 241.133 li
107.48 241.133 li
107.48 241.06 li
@
10 ml
107.773 240.806 mo
108.43 240.806 li
@
4 ml
108.649 240.478 mo
108.722 240.478 li
108.722 240.55 li
108.43 240.842 li
108.357 240.842 li
108.357 240.769 li
@
10 ml
108.649 240.515 mo
109.015 240.515 li
@
4 ml
109.234 240.187 mo
109.307 240.187 li
109.307 240.259 li
109.015 240.55 li
108.941 240.55 li
108.941 240.478 li
@
10 ml
109.234 240.222 mo
109.599 240.222 li
@
4 ml
109.817 239.896 mo
109.893 239.896 li
109.893 239.968 li
109.599 240.259 li
109.526 240.259 li
109.526 240.187 li
@
10 ml
109.817 239.931 mo
110.477 239.931 li
@
4 ml
110.694 239.605 mo
110.769 239.605 li
110.769 239.677 li
110.477 239.968 li
110.401 239.968 li
110.401 239.896 li
@
10 ml
110.694 239.641 mo
111.061 239.641 li
@
4 ml
111.278 239.314 mo
111.352 239.314 li
111.352 239.386 li
111.061 239.677 li
110.986 239.677 li
110.986 239.605 li
@
10 ml
111.278 239.35 mo
111.645 239.35 li
@
4 ml
112.155 239.022 mo
112.229 239.022 li
112.229 239.095 li
111.645 239.386 li
111.571 239.386 li
111.571 239.314 li
@
10 ml
112.155 239.058 mo
112.521 239.058 li
@
4 ml
112.739 238.731 mo
112.813 238.731 li
112.813 238.803 li
112.521 239.095 li
112.447 239.095 li
112.447 239.022 li
@
10 ml
112.739 238.767 mo
113.104 238.767 li
@
4 ml
113.323 238.441 mo
113.397 238.441 li
113.397 238.512 li
113.104 238.803 li
113.03 238.803 li
113.03 238.731 li
@
10 ml
113.323 238.476 mo
113.979 238.476 li
@
4 ml
114.198 238.148 mo
114.272 238.148 li
114.272 238.221 li
113.979 238.512 li
113.908 238.512 li
113.908 238.441 li
@
10 ml
114.198 238.185 mo
114.564 238.185 li
@
4 ml
114.784 237.857 mo
114.856 237.857 li
114.856 237.929 li
114.564 238.221 li
114.491 238.221 li
114.491 238.148 li
@
10 ml
114.784 237.894 mo
115.149 237.894 li
115.076 237.894 mo
115.733 237.894 li
@
4 ml
115.952 237.566 mo
116.024 237.566 li
116.024 237.638 li
115.733 237.929 li
115.659 237.929 li
115.659 237.857 li
@
10 ml
115.952 237.603 mo
116.317 237.603 li
@
4 ml
116.536 237.275 mo
116.61 237.275 li
116.61 237.347 li
116.317 237.638 li
116.245 237.638 li
116.245 237.566 li
@
10 ml
116.536 237.312 mo
116.901 237.312 li
@
4 ml
117.12 236.984 mo
117.194 236.984 li
117.194 237.057 li
116.901 237.347 li
116.829 237.347 li
116.829 237.275 li
@
10 ml
117.12 237.021 mo
117.778 237.021 li
@
4 ml
117.997 236.693 mo
118.071 236.693 li
118.071 236.765 li
117.778 237.057 li
117.705 237.057 li
117.705 236.984 li
@
10 ml
117.997 236.729 mo
118.362 236.729 li
118.29 236.729 mo
118.654 236.729 li
@
4 ml
118.873 236.401 mo
118.946 236.401 li
118.946 236.474 li
118.654 236.765 li
118.581 236.765 li
118.581 236.693 li
@
10 ml
118.873 236.438 mo
119.53 236.438 li
@
4 ml
119.751 236.111 mo
119.822 236.111 li
119.822 236.182 li
119.53 236.474 li
119.458 236.474 li
119.458 236.401 li
@
10 ml
119.751 236.146 mo
120.115 236.146 li
@
4 ml
120.334 235.82 mo
120.407 235.82 li
120.407 235.892 li
120.115 236.182 li
120.042 236.182 li
120.042 236.111 li
@
10 ml
120.334 235.857 mo
120.698 235.857 li
120.627 235.857 mo
121.284 235.857 li
@
4 ml
121.502 235.527 mo
121.575 235.527 li
121.575 235.6 li
121.284 235.892 li
121.21 235.892 li
121.21 235.82 li
@
10 ml
121.502 235.564 mo
121.868 235.564 li
@
4 ml
122.087 235.236 mo
122.161 235.236 li
122.161 235.308 li
121.868 235.6 li
121.794 235.6 li
121.794 235.527 li
@
10 ml
122.087 235.273 mo
122.452 235.273 li
122.378 235.273 mo
122.744 235.273 li
@
4 ml
123.255 234.946 mo
123.329 234.946 li
123.329 235.017 li
122.744 235.308 li
122.671 235.308 li
122.671 235.236 li
@
10 ml
123.255 234.98 mo
123.62 234.98 li
123.548 234.98 mo
123.913 234.98 li
@
4 ml
124.132 234.655 mo
124.205 234.655 li
124.205 234.727 li
123.913 235.017 li
123.839 235.017 li
123.839 234.946 li
@
10 ml
124.132 234.691 mo
124.497 234.691 li
@
4 ml
125.009 234.363 mo
125.081 234.363 li
125.081 234.437 li
124.497 234.727 li
124.423 234.727 li
124.423 234.655 li
@
10 ml
125.009 234.4 mo
125.373 234.4 li
125.3 234.4 mo
125.666 234.4 li
@
4 ml
125.885 234.07 mo
125.958 234.07 li
125.958 234.144 li
125.666 234.437 li
125.592 234.437 li
125.592 234.363 li
@
10 ml
125.885 234.107 mo
126.249 234.107 li
126.177 234.107 mo
126.835 234.107 li
@
4 ml
127.053 233.781 mo
127.126 233.781 li
127.126 233.853 li
126.835 234.144 li
126.761 234.144 li
126.761 234.07 li
@
10 ml
127.053 233.817 mo
127.417 233.817 li
@
4 ml
127.638 233.49 mo
127.71 233.49 li
127.71 233.562 li
127.417 233.853 li
127.345 233.853 li
127.345 233.781 li
@
10 ml
127.638 233.525 mo
128.003 233.525 li
127.929 233.525 mo
128.295 233.525 li
@
4 ml
128.806 233.198 mo
128.878 233.198 li
128.878 233.271 li
128.295 233.562 li
128.222 233.562 li
128.222 233.49 li
@
10 ml
128.806 233.236 mo
129.171 233.236 li
129.097 233.236 mo
129.463 233.236 li
@
4 ml
129.684 232.906 mo
129.755 232.906 li
129.755 232.979 li
129.463 233.271 li
129.39 233.271 li
129.39 233.198 li
@
10 ml
129.684 232.942 mo
130.048 232.942 li
129.975 232.942 mo
130.631 232.942 li
@
4 ml
130.852 232.617 mo
130.924 232.617 li
130.924 232.687 li
130.631 232.979 li
130.559 232.979 li
130.559 232.906 li
@
10 ml
130.852 232.653 mo
131.216 232.653 li
131.144 232.653 mo
131.509 232.653 li
@
4 ml
131.729 232.325 mo
131.799 232.325 li
131.799 232.398 li
131.509 232.687 li
131.436 232.687 li
131.436 232.617 li
@
10 ml
131.729 232.362 mo
132.385 232.362 li
132.313 232.362 mo
132.677 232.362 li
@
4 ml
132.896 232.034 mo
132.968 232.034 li
132.968 232.106 li
132.677 232.398 li
132.604 232.398 li
132.604 232.325 li
@
10 ml
132.896 232.07 mo
133.26 232.07 li
133.188 232.07 mo
133.552 232.07 li
@
4 ml
133.772 231.742 mo
133.846 231.742 li
133.846 231.815 li
133.552 232.106 li
133.479 232.106 li
133.479 232.034 li
@
10 ml
133.772 231.779 mo
134.429 231.779 li
134.356 231.779 mo
134.721 231.779 li
134.647 231.779 mo
135.014 231.779 li
@
4 ml
135.233 231.451 mo
135.306 231.451 li
135.306 231.523 li
135.014 231.815 li
134.939 231.815 li
134.939 231.742 li
@
10 ml
135.233 231.487 mo
135.597 231.487 li
135.525 231.487 mo
136.182 231.487 li
@
4 ml
136.4 231.16 mo
136.472 231.16 li
136.472 231.232 li
136.182 231.523 li
136.108 231.523 li
136.108 231.451 li
@
10 ml
136.4 231.197 mo
136.768 231.197 li
136.694 231.197 mo
137.059 231.197 li
@
4 ml
137.276 230.869 mo
137.352 230.869 li
137.352 230.941 li
137.059 231.232 li
136.985 231.232 li
136.985 231.16 li
@
10 ml
137.276 230.904 mo
137.936 230.904 li
137.861 230.904 mo
138.229 230.904 li
138.153 230.904 mo
138.52 230.904 li
@
4 ml
138.737 230.578 mo
138.812 230.578 li
138.812 230.65 li
138.52 230.941 li
138.446 230.941 li
138.446 230.869 li
@
10 ml
138.737 230.613 mo
139.104 230.613 li
139.029 230.613 mo
139.396 230.613 li
@
4 ml
139.907 230.287 mo
139.979 230.287 li
139.979 230.359 li
139.396 230.65 li
139.321 230.65 li
139.321 230.578 li
@
10 ml
139.907 230.322 mo
140.271 230.322 li
140.198 230.322 mo
140.563 230.322 li
140.49 230.322 mo
140.856 230.322 li
@
4 ml
141.075 229.996 mo
141.147 229.996 li
141.147 230.068 li
140.856 230.359 li
140.782 230.359 li
140.782 230.287 li
@
10 ml
141.075 230.031 mo
141.731 230.031 li
141.658 230.031 mo
142.022 230.031 li
@
4 ml
142.243 229.704 mo
142.315 229.704 li
142.315 229.777 li
142.022 230.068 li
141.95 230.068 li
141.95 229.996 li
@
10 ml
142.243 229.74 mo
142.608 229.74 li
142.536 229.74 mo
142.901 229.74 li
142.827 229.74 mo
143.483 229.74 li
@
4 ml
143.702 229.413 mo
143.776 229.413 li
143.776 229.485 li
143.483 229.777 li
143.411 229.777 li
143.411 229.704 li
@
10 ml
143.702 229.449 mo
144.069 229.449 li
143.995 229.449 mo
144.361 229.449 li
144.288 229.449 mo
144.653 229.449 li
@
4 ml
144.872 229.121 mo
144.944 229.121 li
144.944 229.195 li
144.653 229.485 li
144.581 229.485 li
144.581 229.413 li
@
10 ml
144.872 229.158 mo
145.529 229.158 li
145.456 229.158 mo
145.821 229.158 li
145.749 229.158 mo
146.114 229.158 li
@
4 ml
146.333 228.83 mo
146.405 228.83 li
146.405 228.903 li
146.114 229.195 li
146.04 229.195 li
146.04 229.121 li
@
10 ml
146.333 228.866 mo
146.698 228.866 li
146.626 228.866 mo
147.282 228.866 li
147.209 228.866 mo
147.573 228.866 li
@
4 ml
147.792 228.539 mo
147.865 228.539 li
147.865 228.611 li
147.573 228.903 li
147.501 228.903 li
147.501 228.83 li
@
10 ml
147.792 228.576 mo
148.159 228.576 li
148.087 228.576 mo
148.451 228.576 li
148.378 228.576 mo
149.034 228.576 li
148.962 228.576 mo
149.327 228.576 li
@
4 ml
149.546 228.248 mo
149.619 228.248 li
149.619 228.32 li
149.327 228.611 li
149.255 228.611 li
149.255 228.539 li
@
10 ml
149.546 228.285 mo
149.911 228.285 li
149.838 228.285 mo
150.204 228.285 li
150.131 228.285 mo
150.495 228.285 li
@
4 ml
151.007 227.957 mo
151.079 227.957 li
151.079 228.03 li
150.495 228.32 li
150.423 228.32 li
150.423 228.248 li
@
10 ml
151.007 227.994 mo
151.372 227.994 li
151.299 227.994 mo
151.663 227.994 li
151.591 227.994 mo
151.956 227.994 li
151.884 227.994 mo
152.248 227.994 li
@
4 ml
152.759 227.666 mo
152.833 227.666 li
152.833 227.738 li
152.248 228.03 li
152.175 228.03 li
152.175 227.957 li
@
10 ml
152.759 227.701 mo
153.124 227.701 li
153.052 227.701 mo
153.416 227.701 li
153.343 227.701 mo
153.708 227.701 li
@
4 ml
153.929 227.375 mo
154.002 227.375 li
154.002 227.447 li
153.708 227.738 li
153.636 227.738 li
153.636 227.666 li
@
10 ml
153.929 227.41 mo
154.585 227.41 li
154.513 227.41 mo
154.877 227.41 li
154.804 227.41 mo
155.169 227.41 li
155.096 227.41 mo
155.462 227.41 li
@
4 ml
155.682 227.083 mo
155.755 227.083 li
155.755 227.156 li
155.462 227.447 li
155.389 227.447 li
155.389 227.375 li
@
10 ml
155.682 227.121 mo
156.338 227.121 li
156.265 227.121 mo
156.63 227.121 li
156.557 227.121 mo
156.923 227.121 li
156.85 227.121 mo
157.214 227.121 li
@
4 ml
157.434 226.792 mo
157.506 226.792 li
157.506 226.865 li
157.214 227.156 li
157.143 227.156 li
157.143 227.083 li
@
10 ml
157.434 226.828 mo
157.798 226.828 li
157.727 226.828 mo
158.384 226.828 li
158.312 226.828 mo
158.675 226.828 li
158.604 226.828 mo
158.966 226.828 li
@
4 ml
159.187 226.5 mo
159.259 226.5 li
159.259 226.573 li
158.966 226.865 li
158.895 226.865 li
158.895 226.792 li
@
10 ml
159.187 226.537 mo
159.552 226.537 li
159.479 226.537 mo
160.136 226.537 li
160.063 226.537 mo
160.428 226.537 li
160.354 226.537 mo
160.72 226.537 li
160.646 226.537 mo
161.011 226.537 li
@
4 ml
161.231 226.21 mo
161.304 226.21 li
161.304 226.282 li
161.011 226.573 li
160.938 226.573 li
160.938 226.5 li
@
10 ml
161.231 226.245 mo
161.889 226.245 li
161.815 226.245 mo
162.181 226.245 li
162.106 226.245 mo
162.472 226.245 li
162.399 226.245 mo
162.765 226.245 li
@
4 ml
162.983 225.917 mo
163.057 225.917 li
163.057 225.99 li
162.765 226.282 li
162.692 226.282 li
162.692 226.21 li
@
10 ml
162.983 225.955 mo
163.35 225.955 li
163.276 225.955 mo
163.934 225.955 li
163.86 225.955 mo
164.227 225.955 li
164.151 225.955 mo
164.519 225.955 li
164.444 225.955 mo
164.811 225.955 li
@
4 ml
165.028 225.627 mo
165.102 225.627 li
165.102 225.701 li
164.811 225.99 li
164.736 225.99 li
164.736 225.917 li
@
10 ml
165.028 225.664 mo
165.688 225.664 li
165.612 225.664 mo
165.979 225.664 li
165.905 225.664 mo
166.271 225.664 li
166.197 225.664 mo
166.563 225.664 li
166.489 225.664 mo
166.854 225.664 li
@
4 ml
167.366 225.335 mo
167.438 225.335 li
167.438 225.409 li
166.854 225.701 li
166.78 225.701 li
166.78 225.627 li
@
10 ml
167.366 225.373 mo
167.731 225.373 li
167.657 225.373 mo
168.022 225.373 li
167.95 225.373 mo
168.314 225.373 li
168.241 225.373 mo
168.606 225.373 li
168.534 225.373 mo
168.899 225.373 li
@
4 ml
169.411 225.044 mo
169.483 225.044 li
169.483 225.117 li
168.899 225.409 li
168.825 225.409 li
168.825 225.335 li
@
10 ml
169.411 225.08 mo
169.776 225.08 li
169.702 225.08 mo
170.067 225.08 li
169.994 225.08 mo
170.358 225.08 li
170.286 225.08 mo
170.651 225.08 li
170.579 225.08 mo
171.237 225.08 li
171.163 225.08 mo
171.528 225.08 li
@
4 ml
171.747 224.753 mo
171.819 224.753 li
171.819 224.826 li
171.528 225.117 li
171.456 225.117 li
171.456 225.044 li
@
10 ml
171.747 224.79 mo
172.112 224.79 li
172.038 224.79 mo
172.404 224.79 li
172.331 224.79 mo
172.989 224.79 li
172.917 224.79 mo
173.28 224.79 li
173.208 224.79 mo
173.573 224.79 li
173.499 224.79 mo
173.864 224.79 li
@
4 ml
174.084 224.461 mo
174.157 224.461 li
174.157 224.535 li
173.864 224.826 li
173.792 224.826 li
173.792 224.753 li
@
10 ml
174.084 224.499 mo
174.45 224.499 li
174.376 224.499 mo
175.033 224.499 li
174.96 224.499 mo
175.325 224.499 li
175.253 224.499 mo
175.618 224.499 li
175.544 224.499 mo
175.911 224.499 li
175.837 224.499 mo
176.202 224.499 li
@
4 ml
176.713 224.171 mo
176.786 224.171 li
176.786 224.244 li
176.202 224.535 li
176.13 224.535 li
176.13 224.461 li
@
10 ml
176.713 224.207 mo
177.079 224.207 li
177.006 224.207 mo
177.37 224.207 li
177.298 224.207 mo
177.663 224.207 li
177.591 224.207 mo
177.954 224.207 li
177.881 224.207 mo
178.54 224.207 li
178.466 224.207 mo
178.831 224.207 li
178.759 224.207 mo
179.124 224.207 li
@
4 ml
179.343 223.879 mo
179.415 223.879 li
179.415 223.952 li
179.124 224.244 li
179.05 224.244 li
179.05 224.171 li
@
10 ml
179.343 223.916 mo
179.706 223.916 li
179.634 223.916 mo
179.999 223.916 li
179.927 223.916 mo
180.584 223.916 li
180.511 223.916 mo
180.876 223.916 li
180.804 223.916 mo
181.167 223.916 li
181.095 223.916 mo
181.46 223.916 li
181.388 223.916 mo
181.752 223.916 li
@
4 ml
182.263 223.587 mo
182.337 223.587 li
182.337 223.662 li
181.752 223.952 li
181.679 223.952 li
181.679 223.879 li
@
10 ml
182.263 223.625 mo
182.63 223.625 li
182.556 223.625 mo
182.921 223.625 li
182.849 223.625 mo
183.213 223.625 li
183.14 223.625 mo
183.505 223.625 li
183.432 223.625 mo
184.088 223.625 li
184.018 223.625 mo
184.382 223.625 li
184.311 223.625 mo
184.674 223.625 li
184.602 223.625 mo
184.966 223.625 li
@
4 ml
185.186 223.296 mo
185.257 223.296 li
185.257 223.371 li
184.966 223.662 li
184.894 223.662 li
184.894 223.587 li
@
10 ml
185.186 223.333 mo
185.55 223.333 li
185.479 223.333 mo
186.134 223.333 li
186.062 223.333 mo
186.427 223.333 li
186.354 223.333 mo
186.718 223.333 li
186.646 223.333 mo
187.011 223.333 li
186.938 223.333 mo
187.303 223.333 li
187.229 223.333 mo
187.886 223.333 li
187.813 223.333 mo
188.179 223.333 li
@
4 ml
188.397 223.006 mo
188.471 223.006 li
188.471 223.08 li
188.179 223.371 li
188.106 223.371 li
188.106 223.296 li
@
10 ml
188.397 223.042 mo
188.764 223.042 li
188.69 223.042 mo
189.056 223.042 li
188.983 223.042 mo
189.639 223.042 li
189.565 223.042 mo
189.931 223.042 li
189.858 223.042 mo
190.225 223.042 li
190.151 223.042 mo
190.518 223.042 li
190.443 223.042 mo
190.809 223.042 li
190.735 223.042 mo
191.1 223.042 li
@
4 ml
191.611 222.715 mo
191.686 222.715 li
191.686 222.788 li
191.1 223.08 li
191.026 223.08 li
191.026 223.006 li
@
10 ml
191.611 222.751 mo
191.979 222.751 li
191.904 222.751 mo
192.27 222.751 li
192.196 222.751 mo
192.562 222.751 li
192.487 222.751 mo
192.854 222.751 li
192.779 222.751 mo
193.438 222.751 li
193.364 222.751 mo
193.729 222.751 li
193.655 222.751 mo
194.021 222.751 li
193.948 222.751 mo
194.313 222.751 li
194.24 222.751 mo
194.606 222.751 li
194.533 222.751 mo
195.19 222.751 li
@
4 ml
195.408 222.423 mo
195.481 222.423 li
195.481 222.497 li
195.19 222.788 li
195.116 222.788 li
195.116 222.715 li
@
10 ml
195.408 222.46 mo
195.774 222.46 li
195.7 222.46 mo
196.067 222.46 li
195.993 222.46 mo
196.358 222.46 li
196.286 222.46 mo
196.65 222.46 li
196.577 222.46 mo
197.235 222.46 li
197.161 222.46 mo
197.526 222.46 li
197.454 222.46 mo
197.819 222.46 li
197.747 222.46 mo
198.111 222.46 li
198.038 222.46 mo
198.403 222.46 li
198.33 222.46 mo
198.987 222.46 li
@
4 ml
199.206 222.132 mo
199.279 222.132 li
199.279 222.206 li
198.987 222.497 li
198.915 222.497 li
198.915 222.423 li
@
10 ml
199.206 222.168 mo
199.572 222.168 li
25.979 275.75 mo
27.8052 275.75 li
28.9009 275.75 mo
30.7261 275.75 li
31.8223 275.75 mo
33.647 275.75 li
34.7432 275.75 mo
36.5693 275.75 li
37.6641 275.75 mo
39.4912 275.75 li
40.585 275.75 mo
42.4102 275.75 li
43.5073 275.75 mo
45.333 275.75 li
46.4272 275.75 mo
48.2539 275.75 li
49.3481 275.75 mo
51.1753 275.75 li
52.27 275.75 mo
54.0972 275.75 li
55.1909 275.75 mo
57.0171 275.75 li
58.1123 275.75 mo
59.938 275.75 li
60.7783 276.004 mo
60.7783 277.824 li
60.7783 278.917 mo
60.7783 280.736 li
60.7783 281.829 mo
60.7783 283.649 li
60.7783 284.742 mo
60.7783 286.56 li
60.7783 287.652 mo
60.7783 289.471 li
60.7783 290.565 mo
60.7783 292.384 li
60.7783 293.476 mo
60.7783 295.296 li
60.7783 296.388 mo
60.7783 298.208 li
60.7783 299.3 mo
60.7783 301.121 li
60.7783 302.212 mo
60.7783 304.032 li
60.7783 305.125 mo
60.7783 306.944 li
60.7783 308.037 mo
60.7783 309.857 li
60.7783 310.948 mo
60.7783 312.768 li
60.7783 313.86 mo
60.7783 315.681 li
60.7783 316.772 mo
60.7783 318.592 li
60.7783 319.684 mo
60.7783 321.504 li
60.7783 322.596 mo
60.7783 324.417 li
60.7783 325.508 mo
60.7783 327.329 li
60.7783 328.419 mo
60.7783 330.241 li
25.979 218.673 mo
27.8052 218.673 li
28.9009 218.673 mo
29.2651 218.673 li
30.3599 218.673 mo
32.186 218.673 li
33.2822 218.673 mo
33.647 218.673 li
34.7432 218.673 mo
36.5693 218.673 li
37.6641 218.673 mo
38.0293 218.673 li
39.125 218.673 mo
40.9502 218.673 li
42.0459 218.673 mo
42.4102 218.673 li
43.5073 218.673 mo
45.333 218.673 li
46.4272 218.673 mo
46.793 218.673 li
47.8882 218.673 mo
49.7148 218.673 li
50.8091 218.673 mo
51.1753 218.673 li
52.27 218.673 mo
54.0972 218.673 li
55.1909 218.673 mo
55.5571 218.673 li
56.6509 218.673 mo
58.478 218.673 li
59.5732 218.673 mo
59.938 218.673 li
61.0342 218.673 mo
62.8599 218.673 li
63.9551 218.673 mo
64.3213 218.673 li
65.415 218.673 mo
67.2412 218.673 li
68.3359 218.673 mo
68.7021 218.673 li
69.7979 218.673 mo
71.623 218.673 li
72.7183 218.673 mo
73.084 218.673 li
74.1802 218.673 mo
76.0049 218.673 li
77.0991 218.673 mo
77.4663 218.673 li
78.5601 218.673 mo
80.3872 218.673 li
81.4819 218.673 mo
81.8472 218.673 li
82.9429 218.673 mo
84.769 218.673 li
85.8633 218.673 mo
86.229 218.673 li
87.3252 218.673 mo
89.1499 218.673 li
90.2461 218.673 mo
90.6113 218.673 li
91.7061 218.673 mo
93.5322 218.673 li
94.6279 218.673 mo
94.9932 218.673 li
96.0879 218.673 mo
97.9131 218.673 li
99.0103 218.673 mo
99.374 218.673 li
100.471 218.673 mo
102.296 218.673 li
103.393 218.673 mo
103.756 218.673 li
104.854 218.673 mo
106.678 218.673 li
107.773 218.673 mo
108.138 218.673 li
109.234 218.673 mo
111.061 218.673 li
112.155 218.673 mo
112.521 218.673 li
113.616 218.673 mo
115.44 218.673 li
116.536 218.673 mo
116.901 218.673 li
117.997 218.673 mo
119.822 218.673 li
120.917 218.673 mo
121.284 218.673 li
122.378 218.673 mo
124.205 218.673 li
125.3 218.673 mo
125.666 218.673 li
126.761 218.673 mo
128.587 218.673 li
129.684 218.673 mo
130.048 218.673 li
131.144 218.673 mo
132.968 218.673 li
134.063 218.673 mo
134.429 218.673 li
135.525 218.673 mo
137.352 218.673 li
138.446 218.673 mo
138.812 218.673 li
139.907 218.673 mo
141.731 218.673 li
142.827 218.673 mo
143.192 218.673 li
144.288 218.673 mo
146.114 218.673 li
147.209 218.673 mo
147.573 218.673 li
148.67 218.673 mo
150.495 218.673 li
151.591 218.673 mo
151.956 218.673 li
153.052 218.673 mo
154.877 218.673 li
155.974 218.673 mo
156.338 218.673 li
157.434 218.673 mo
159.259 218.673 li
160.354 218.673 mo
160.72 218.673 li
161.815 218.673 mo
163.643 218.673 li
164.736 218.673 mo
165.102 218.673 li
166.197 218.673 mo
168.022 218.673 li
169.118 218.673 mo
169.483 218.673 li
170.579 218.673 mo
172.404 218.673 li
173.499 218.673 mo
173.864 218.673 li
174.96 218.673 mo
176.786 218.673 li
177.881 218.673 mo
178.245 218.673 li
179.343 218.673 mo
181.167 218.673 li
182.263 218.673 mo
182.63 218.673 li
183.724 218.673 mo
185.55 218.673 li
186.646 218.673 mo
187.011 218.673 li
188.106 218.673 mo
189.931 218.673 li
191.026 218.673 mo
191.393 218.673 li
192.487 218.673 mo
194.313 218.673 li
195.408 218.673 mo
195.774 218.673 li
196.869 218.673 mo
198.694 218.673 li
@
1 lc
1 lj
8 ml
[0.498487 0.996974 ] 0 dsh
25.7959 332.36 mo
95.958 195.925 li
@
0.749 0.678 0.671 0.902 cmyk
%ADOBeginSubsetFont: WarnockPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginKHWOXX+WarnockPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B78D342320328BCB55F1474C248CEE45149775125100977040AD6417BB424AFF8B77A1DDAE3AFF28BC9AC3E4368154233F53A6CCCF8417416E6D7C72F6258209150AE56F551F0F6A3EFDD1D601543F31EE9A732371E8063DEB0032282410228657168DC8ADFB9063F80A59B528F2438951DB9400229AA8AC> |-systemdict /gcheck known {setglobal} if end {end} ifendKHWOXX+WarnockPro-Regular /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/KHWOXX+WarnockPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /three /four /five /six /.notdef /eight 27{/.notdef}rp /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b 16{/.notdef}rp /s /t 139{/.notdef}rp]KHWOXX+WarnockPro-Regular nfKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf23.958 341.059 mo(0 )[4.01611 0 ]xsh38.3228 341.059 mo(0.5 )[4.01611 1.82373 4.01611 0 ]xsh58.77 341.059 mo(1 )[4.01611 0 ]xsh73.0845 341.059 mo(1.5 )[4.01611 1.82373 4.01611 0 ]xsh93.5322 341.059 mo(2 )[4.01611 0 ]xsh107.847 341.059 mo(2.5 )[4.01563 1.82422 4.0166 0 ]xsh128.001 341.059 mo(3 )[4.01563 0 ]xsh142.61 341.059 mo(3.5 )[4.01563 1.82422 4.0166 0 ]xsh162.765 341.059 mo(4 )[4.01563 0 ]xsh177.372 341.059 mo(4.5 )[4.01563 1.82422 4.0166 0 ]xsh197.604 341.059 mo(5 )[4.01563 0 ]xsh18.9634 335.143 mo(0 )[4.01611 0 ]xsh13.1235 312.477 mo(0.2 )[4.01611 1.82373 4.01611 0 ]xsh13.1235 289.76 mo(0.4 )[4.01611 1.82373 4.01611 0 ]xsh13.1235 266.719 mo(0.6 )[4.01611 1.82373 4.01611 0 ]xsh13.1235 243.946 mo(0.8 )[4.01611 1.82373 4.01611 0 ]xsh18.9634 221.09 mo(1 )[4.01611 0 ]xsh13.1235 198.432 mo(1.2 )[4.01611 1.82373 4.01611 0 ]xshKHWOXX+WarnockPro-Regular*1 [0 -7.9516 -8.00003 0 0 0 ]msf6.64014 273.04 mo(Y/Y)[-5.01758 -2.90186 0 ]yshKHWOXX+WarnockPro-Regular*1 [0 -5.9637 -6.00002 0 0 0 ]msf7.64063 260.104 mo(st)[-2.31396 0 ]yshKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf102.459 352.794 mo(t/T)[2.65625 2.91992 0 ]xshKHWOXX+WarnockPro-Regular*1 [6.00002 0 0 -5.9637 0 0 ]msf113.396 354.783 mo(1/2 )[3.01172 2.19043 3.01172 0 ]xshKHWOXX+WarnockPro-Regular*1 [8.00003 0 0 -7.9516 0 0 ]msf108.027 366.978 mo(\(b)[2.60742 0 ]xsh114.843 366.978 mo(\))sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/KHWOXX+WarnockPro-Regular*1 uf/KHWOXX+WarnockPro-Regular uf/WarnockPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (PANKAJ) ()%%Title: (002x006.eps)%%CreationDate: 1/9/10 2:50 PM%AI9_DataStream%Gb"-6#?r\$Z2jb#!<5>a,f9bj!g5i(B3b_)b*'+;qj`(arN#4TS<tJTII;Gpm;K$Z4WUQ7W[jFV;]IG[h>ZW=3<",6LJ9NcCc]#B%-Y#7.7)J'UeGIk2RC5hC9r6n&0To-"*44iQ$2c-ALe#nXF<'-fO#r8.D`#5!N]Xr-X>CuWVmFTBl0m2:kH+=[:KfhU]tn+SYFX[G%ebN(T;B:h\d.F"h*K<-Fcp@H<pU(jFVM[8jMofMVmr^59()l`;C4FU2Ni0eGHm]qCn2lq_0/!*RmeL>EmS,K!0d_HYoC$4EG;GU)%bS'rQ?T1HF_4o\rKK8b;N?LEUiIg2Qq>7$JT*&>+"tWHNFS9f[>0Q-h+mC,U_sB(>F:9:TggT/on$6n]HZ<BFM5B2nGCJK[-%qp5%iBQ3-/>PM":L!GiGkC:!ZaoH4-\L!_7lGr$YfCt_'E^Q7Ig[i:jePm9!>!hRGasEDa]+3_QFEdd=24L5%.$Q`5FRXGhsZp1%L$0I%3ksqZ%tGn@E]_B"8&)`D%!pC7;'3X"j&]q%]!HCc2h4IkmoBZF":RZsA*'>i_/3uaeXOJ0)@mUn_TYc4&K\d>1g>J(VA-$i^r<*.%\fK[lM2#Mf)V2_LP[[m4-cNsf';YND:,4G\_ih9,g*+1j08mLj!V2S]HPb01=+?G@Vde"'9=M;em<@Yt9l`<EqL_I)P#D4M(B::R%K]UMB]ob!]3+f!C\K?Q_SDDNmDSP/kNEZ8]l(,d.^iYI<fqWS'h?%B2R+P0Ip[=[4hfCnr%/f.2r0^+6cZC(TQ:g/G4HI7&*hW!c%537(dZs(GXl!&uI[Rqh7;^-dp&d`B>85uX!TBS2@8Z/g&*836`SPE[qF;eBB?hb:=PtK]/<5LRe-%&T?@@M!HT2r!`4Rb9nY?'mL%FN/F:F?Xe7q@qg$TC[$-n0bZ]2;q>IKkh<&8tY("n0bZ\(#_qn[g3<:0!5M1i[7tCrktBVS7p6Y,5d;``o$PCXpN.Ed%o]3.pNni%`&?-qIOFOocCDb=6BOS@J'p:?b3A9Wh!*VXkW!X'O2Mh++1B&ZiD8fsmN>dmI7ADhIq(!6T=DcQ.eI"O+9'2S\2q5$pliuC^VQPp%$J1%tkq:C_6K(PW`t?9HJ28"fO18hEIMD)"MS`)@$XGc`4jKSCMiLGW(AE`q&H?/X>b-*pEHV%7>r@%flbf@IMOn`k+,(#L(Oom5%>b0%_Sno!_.-0RtoQ6"(=?J+nBu?@fP=!TIL_o'B;Rk3/;5hr`.GSn)if8h1UN=IViomanqEB=&s3[65bbV/)mQ#t1m@d/OdISku%4+502&[>?U/.kYJfr(`P4SSFB_me_`,\"?tb9E24ID?_WOMnV>BS^^Ek:;Qcqk\5:/49EqDb:aIi?-+f-h;3P0,C=Tjko^&b7frc%DrfgJ?SY2;bJ3;V</Q-"V8TW;_S8Eg5*:?DJ&NW1/H;UI>b5u(IO"lis!ec[=oM.q1"&9YcZ/FC-f%l#=o:[;_tplF.2K+QR96k#%80uI0C7M>jA+1pMNcTmgQc/>".K!!@%IK@5'^gqV)tVDPhf-\O^4CLfpcHdKZ))B=iY2,HXAAYOZ:,@SVlOAe5sOsPiVN]T*@"P@%n-OYsk,fo"Ok_,eA&jI\<%8*S8jY')(-JAjj4s0C^8N$&oFRos'0l'l7>n1m"%-;N5PeUJ/M56ff:"8NhJc&s-0_Ub3uI.j,i(K>%m0YsI8T,u`r<qY+1.96/8MtkqjtUQjN:78P9#\lmENqGB?Q)Ac(NN\MO1;Y#4N/0L-n!36(L[ia,drh:.6pUDRAT!NVaS)T16WJc%cdSKT$!DIP1T&eWL2H/<dMXN*0P;]1.<[1D+jUMVSAUh9*[/`64k#TBY".8cC##E_6PphjiQ=cke()SmjdD=h33lRc>-$/>HqLoC%]JJR%b)mFK/j`e17t:T1]?A*gPjhNA+R^,IlTnVjKc1adks9nT=.ns>;aP@F^ms=<4KX^Z=?WI50u[JBi`RKh1WoF`go6rIAf:FJ%^L\^++ItB`=-aM.6=upD)&j5D*m]O*f?12:b1WR]/*&lsOcC,EROWbVgBd0T+=Ma%KTfS1Mf6_PAND%'SJ'N7D<\E`Zq27(5V,JM%Y/;IJs("QqCY&N$h^f&BJ`.7W7cMOTBc=[U`-[I">p@:P-fge]]bS9#'-P"BIucZ\Sg;8K7@8q0L<Lr<8#5;eBaX5T%UuN&%a/o;%pK0bZ_Na>BJ&PRe$.gd'<a_'XaZ[^`=&XqJnebn=#h8'1U_1f0.)LAn&\1e*=F3@p2Z>)mMt1]c>@J;@,2<<)=f"2L@?N$9W!Rm;%@m"$3=UVbtl/!"5bu!+,M^dRg:'pf%&8kW;cP^aRO`muRSP9jp5'T.h&a5"%?_R?>n1,Ce7/U;gb++7bNU^ZO:%`G;`sha-U>ih_%jZ?GY:/8Gh.K6@r8O7W?B^ZNZ'nrt@cnqmLis6T*@^1aL'%\>d(#:V+2sT:HlrO*dh'L6n$[7P#3T;SVNK"SiM3L"I;]1F=OshZt%PJ*V'.P4JP1<Uo?!Pd)e)C=/[$;.4J.]]5A$)CPk3t_[+8kMn:&k>4PO=X<OLLh3KV\PiGW`(YBV@r+'J7IT.a<TUPKssH4/[S3@%hJ!&8jgEH\Ml2DP4SXXn!tf!aI0=:b$8i:=-aX[cMKn/S]E9%@]U+k$8<2<W4Q;?WI1,t'G]nX>X@P,[0HG.pPNJRs'%9`c_Ya[&%YDBiB!PbRJ/W;6N$fq$2]VFb`Pg;DL]L6K]6;ul+7#nrQp'^%],*4'%FdOA\Qd6RO2;g!CndQi&YR&RTppU+8.!nhJ+(6ANb4=ep%OQ7;DXGQi\ErF^?:Q+"o4A._&HC(QQQGaM:p^h=?_,&1NO1(fBYQum^ce96^7*86u#l/.jit@uH1IH/B;aFM&SL8%s7c/E8Gf;Ib%<^fU!YQs,M*0"D6T@!)#&r4[VPl%Fb4b].p'kKR#%4UAGKY(2s-dfnj^`upgk<Pi#U6Hh:Q+iY!+To3)ph!BL/$47nIRabT^sE.Z%>(TFHVD9@W%>FQ?WNI`5-uab^a/(o#pA^K)H.oc^LgB<7ABfZZ(OB`7`,f!f7@m>/U3KJP3>p<13>X+O^*3)A9!498PrQ@r!Jqe_%p_h*ckG%#ENHmjD)P*Xd(R4qtp)nEc,#9WDh^YdjdrU5_4JDPYOt2dK+i6Ve>MXr&D/6;9^0f7VK_1d=EeR*C:*mT;bS0"5i[m^s%_Q'h8Z#)7IT+Z,N?Vb7_7I(6XX#(llm:n!%9eN@(_>&pPPPun)DL1on`:`-Le'UC<n[pgHO1kh3STH(P2/W<B6h<sXd-^S)n73:d%9]9uueEM,QK0_"kBlt3_?M&X%+*;kW$aH*MH7-DRU.nge[qMhkT6;!fcU%$Wd?`RB^>C-*GJqdRj@r^_7pkX4?L:=fp1a8Lg8;&e%e!JdI8GB:NR'n$a[UVb\Z.*qjVm;si(UWEnDX**3Upf+1f2ll/mD9!Q]k@Z/*M(H%dfHU\f'B!R0%sV?#/,;(d[D?_-Jq[FA(V]B%gB2uSPh7X_[r/Q/T):b=IsoY<o4b8[)n)V.;*"qr\B&>Gn+Jr?KhCuH2JC@L?.)f<_.#=hNtua\nb:qS;09=pIdPRk'7Z(@h9R-a%eK=JRmpU"_=UaePfUrE*$`!`)oObVSmeC.aB^aiL6#0$jK[\K?Zj-#Oo[`25%%F;i`n(:#\i1VT#JJHor/!b72]207\FS=Ke`fL1%F>F9@@2")iU16;1UFo4hg)H2^j<+P\8Z1PQg*c\AIo!iGpAaF<!KhmZ_>Hn$lZ:dS4'Gc\a(2%M;l"]&:S^'RoWo&9(6/WY*1al)%j";AaZI^k'[9Ku/1dU[5Ra/[gM]!KH=1"V[U(tZ)"aVpRdc;kl1_';06[;oU;POG5F?pjO./FV/I6h)md2$rKDXQ_`0(.5*erM<;%VAh7+Ff'E?V`ib8eKG2a;4:t$/,HprIC5r1iLmTG"!3Im]q8u9"n0!>/&Vu>5C(#7/V^s_c8e"_L3Q%^.\k9+r@9Wbms7b6,NjfJ%W'S>"_7S28IeueD"8XDU[8Z:LgV)@V-U$&hRpZC^hdM^r']@O=ZY0g+6R(5+I0..,s&NMN_MC#K,2-hkY2]a'RplsIJJcW.X[0Gr%q&+n*%Z13PF>=k\(EFV5IHY[26k?k)V5"jEhH+L5`MVZmTF?WY4)?qqD,&rBIg`SRVkW;0@,BVrfU-WH!=Sq*2u;h,E%qP9&)_iM%hu#WRNsG,NqHIo$TM(>E355RN04E>V.doEji02[fj^8+MC=D]^dMRCm>s8=XS]fU^H`&h'gme+`K^\-F*Votfg[+sjUYeLDrJBF;%^Y:2`=FBL@[!r2NKU7BGjM,RJrHW=,7lMH11mm\FVi07&cL#j=OQNHi,Y_54RXC%\s"h[),VP*/7MO;IOb<qmOUBS5J(uI!g3a$J%pn->gW<G3m\\@q]UB(dp9-_hs%L/s8;<l9lPE4^A)on+LG(2E7:SZp=9;F\@61<rS?os+dHRnhSa4$^`Cuj?nkc`iN4AedMq?F)S%,fULuY&Tq]@Whc>#X6F>*"OF\7^mI1h4!uWFQ_O]ddkDt0cm\k5gILG;O9q'i;<X>;j/L'S^_?nl+W>QKu;IudI@TYq?.hYk't;A%i/4+dJ6*p:Fu$:Vd<N$^iqtmco@C.T'66N[qElCZ@KU6*_Snp+0m'<c,ZEbOMlp%g\+AVm]uQM2a1pTN$2j<4^A?GVD!,Wtjd"N`%_RGTXUtm7L().sJXrY#152it_1,&-6CGD3k>#.X*&r45FM,%lb[O8t]9SPe?^am<;.DRT@^gr)!J:h1:?.Mc)nBJ^R>"?KRNm#YM%&/R*Cl+@JaNQ\%Q2/rgq%RCc>;Z^14Eme?\e&F08&]K1bk5Q%-L5n)tRWL1+<V1m=U?-`$r![3<5P5=Ygm\4:5<k_scc=k5iPWPR%hnOph'Qe\1\50"#2Xm*L2h\DL@6/9(mrYgcrY;Orhn]+aHR%7!gPIfg1=B,!1&i1A)*[^6N+VO.[AL8t^oEka1</UVJ$fIgYq:Dh%1MJcLN24^ORESX&rf9CDh'`3NX:=(f&8umdErq*X&5oqHrNg8B)K.NFjn]0(U%Gp>eg@i\d.XZRHId-0[e@,dC(GW6%fXnIr4dpK%RD3R53]?ql:GFK*6[\\/=\?-9F-rB'OP.H3%nMK3j1'6EJ@YR_:$)B_=???Wf73:,r"#R=Cs_YK?`1kjP)XEsK&;DkpK@[j[=7jH%F),EH`KpNT&`so=Am2L=J+^GFD`__I)ZI'9P(Mh^XQn]O&FgiLN>VK#A2Skk=j>k(phFuH`UVSi)=?r6pjm&GF&!t"m&WhZc@<Xc%:PdlPGVSUX84_o.IegkrohS@lfUK@]^^I8+O7\n4f]rme#<ShVd?qTEEn9RM(W.7RSeAG8GGBTlh@t;e1g"ok;K38spl5onfUM;6%:4'>(Hq+qu7DKZWl(-CIhB'/'h45%1HICu8Lc3mnd[EECZi4nu+=\WGAtaB[k>N:7Jn%OTlKsQ1l:iY)R1YN')4(P-]eF;s,rtm)%Y;77rGM9/bCXga@YND+qTKe"l,-1V0*OJ7r7HVSUNU^J<`o*E@Hoh6=d?7Y\Gi&>l>i1_#&N=C$%m/4.pNG8(-R/7*15@h6&l/Yf%=`=#IF%mG'ruV;-`E$/cs+;(OR*<hl<=KVUJ5LH<Z'\=[JT^^DGashame@8"o,!H;Ve@u\[RRSp$a?;q2b]q&Ker3_4e#`O`DII9%c=&9-Bj4=er6hH;\t+]cL8C*!>-b/f\.k"p/KBG79".$'[JPUUr,6<$`:L(J]k2'P[:k!]FtUfKEU0tJ+.j*gEmj5r2()hbRf-p^%1n0H3a0@McMqB?D>^+VW#QPLOJQ5Gkl;D<^'Gg;FFCHN,"&nHCVqkZ\5M)Iiq0;>gYm?brHkAhtO4t86$0$l/ChfG6!,uoN^,3c#%gMHT4T<s/Qr:hiK7D&P@f#-/i_*I]1p%Kio2HjU6E(RW>OPUk7AP0D[*tbe7T(U'&R#kqa?06;1k16nA3ch*6$)q-#TPi@RlD>i#%Uab-=kWPc572>2h;Bac*L1YZmUM0"gA4]-;QEQ&!WEe:^/Or7&kdX>4VJ+/kE="73a&V.?NaN>"IG5-\?Jd/f]+S/OR;H?Zk0'Hp%?7LA=q-'-CNlm*Q\`K)H)f^_GC?_pEA\6WC&F%UaaVbkV^h;Id^*^4R\J%'n9Y*T94;cbCe>-llF/lm:hI'8+plu:9PA-hR#s9Eq%iaf7SHn<Y.GVX!hE[hIE.>G6J9B?;53pE,WYjK3FT:`IHHs*do9f#.?fBpiZ?_`pEZS62d[^Id/#tl4t5Pp))NHVF,]0@CG-Itn*%S#Mtad^AKOVJp1,JGd^_o!=]5[ZnjT)jAQL[%2@bj!g_r&jTmC:S:)4j6?TBY>f?hE[*"01>"u7'kTF=9d8IQg\k\I\&m7k-N\l%%Yb(RXLV,ka8D['&n%b76qf?KO,@'$ne72EBBdCV(Xc2MonW*(U[C`6f<+3@EdZcG,mFHAk!F4%a5h>6&2C[jBNQ)TfYgHK;,]'hg%P)4j+F*+LSWFp(CYr$58D&'Ccd98omFF3R=RRarAan0X:Z9m?g/:nkl'R_bh[s/YhlA%.K#b!72?X:j):Ei^hE?Y(g;9LUSA-glq%<(N;\NG^Va*>LBTH^o8W1H"kE?6uD8.$r4kjs,))&Q.ua%0*c1I<*6qr4=nq!'&aoP['RdMf",_>bI-lA)`$jS4jVp1!Zkc;G$6X%7L5qaGGkE6:3kRn$YO6HXl+VqmBF*><TM9g]'ZJ9=:[r=6mQ;IPSERLe_CRO0]\ai>n,8djjsaE&ZuV00l8f6Zj&[uYGLV;Xs2S5%1?eXQEBm*bc=gen;J7lT%jX;q.A`Z1Mp[\GKXreJ0r?.;1n$0G@&be5Cbo;&`DuHJKPLQ#keN@g[JM?^=>h&i^>Ke)bA,j(8qC+a%=go9Q88qemP`7UCamF;QM[oLtoP$XkP>%I/7LTok7BKV:OE:Q%AP%NpPE#gY5T7itQ;/??(RBZU"U;m1ed+s+ojZFU71`#Uen?>/%FH!UNUt%4M$oD6RV7sR_9k<F\f*:3E2$`.:bBNPsEV[emo,"l(TZ!ls_<H$\6_R''(R<Ha9hI]fW6hA#<KcUR+bmisA(KpGG<nkR%2!Sbo</k;<LX8H<M,KD;=kof1&s</i0BLC&U1un]*/XMFi[i#\Xseb&r!#"`Kptu8Oc#KP\>.\l0Gja[#4qTV-kd&]"bQR=3KJZ0%Z(n?.00Qh.rZVj_q>BWm=T2"GId2:3fiIp4H-/]S\R>+lna-g^UJZ4pl@!VsgnF2o%<nauc/BJ"DGQ<VFU(!jOun&SIWPg95:7&W%R>*r3'2NGampD36`:=]d3MudqP/h:6K"49WYM>T_(R<o]o:^QcE8QIIb<IUT,W^k8diZ',CuqAC]0;8#^5atPQY5RRF#j8KQtK?[%U47E,;gN9hb*A<S@#GI.P,#P!jM)<3?+NRn8%VI`jRs+eYDs!BQ+hHLg``hHj7_#9+oM+G['\W,Il)_%T+$EB[]YPZEll%[IrI]'%i3/W,Y0hU"1eUh=\"#,M[*Nh)=L*knH!\s,Z`b(%S6?&:2>9CQ`m)fI:/a%LiGe7LN)CV1gJ;C#l-7n'H8p8C^)gTe0[\O4:Uq'J%cl2d3pA!GP)%QN><NKs?Q.M2!-+Mi0\(RGAl!$">?p*XudD'la))R<WSaF*:MQlt)CTZd&P,!Ba6"Bo7i*kg.b](qbl<?q<W66Cr%b>aCta!QEcp@_!TJ(A/WV`1LLH%'6cB[(tdnf4k]n$bc%ASQAUeoY!(kM5G0)&*R(]:oMu_t;P)f>KuRA5HBdE`[Zbr6'W`_k=9>%DHE<$;&JrRldZC^Nt:+qAqRh04O_pNdB,O4C=)!A,$E`7%0q=)IpAHP>2SLkLVMn9iJ]4?4`\<_p:bn*`e.T_r4,&h_kthS_8APc%B/4.0cfNjWZZo4`Y;Q%G_Gj<l/e&'AXU`gOfQm;8BMbQem[qRQ_S2t(4ZL(;e]\6b0t"'qBB,8K5;8\$kktr!R[e$qFa7TUg,gqr%q\8a<#*&ZY\[eSi<dt!H<J*KuQt@Sfj.HG/9'\]kP-JI[7L"!\ZtjLg5C98[VTpZ0D6lOcR#Af"NR=E'QJGL.o4\?'(o+Jo2eRNd%FO4VOFrE.SoHhN42K&G':cr6V[@T#52pL&LdW!Q[B&5HeoX8rbrAGQ.n-+P`0_]MBS2#P`C%&a]I@`A;oHAU3?omL=_0<CZ#'G2"%f%Oc.6eOEY6-gL`hsO7TB/o*jHhY`t:i[d.p3nb!mth@$J*!*-[mJ;`d#6iM,QKf<39UVIkTb`>rM!ZbmaGA_C-:^BgHD*.07Rrf%TFPZg\DuLblDOf;B)]l(_C1'e/_JIaYh#Fg5VqVrpZ-9c#3EKX?X8*/>R!"EGm+E^kqVihlFH,N>m#;u4ZK$If312,0Z'LSHr*0;%4j<me72kT:SiKZ3LF]6"\Z=__&U@1i"c&X$5!3_$c^0$26)tAF.Ek9!%s6/\HQ(HD\pJdE9?@:.^M>`mK6$RGRk)`Fa=5)G(u8Ba%q-UlYb=;RMoYdjXqU9.)-sghY6d8OgQYq1cSgnYh2rA>&:#?-ZCcnqHH?h2%I>W<1Nk-D(q2OfGDB@D:`2E>j!oLZ)ICFITrTHd"%g#2[oHgkVGp/u2r@fH"/nafuV<5lc1go&W`Dr5qDMWR]QYK%HV:P"PN6_&D'eXlEonLjW-I/</imcdee@K,n-s)MJ$R)/C40;$5<%p$]3^e*$L!;"IWiZ.C)TL&'JA^=]4"e$$6Pku47sJO1u%qOEQ$LKin:Z]WQqo;BQL/7no;p,pBVc/681P;tIJRQ6aoh^ou54p[J6%iq)oD(8poQE^/R4[[-Kp3MnnqI0saMigOH-kJ<q2l`0gGKTIEEierKrMg-h1I0V7LltdqE99jHCM.ZGID>Ar='r*,ejh9Nm9fX<.%\P7e6#7L=-G'P'uHV;o0?e$da#.nI;)K`4H23=hh[uC$eD*K"kh$VpBq.g`$SF1FSlt'91GOD(U'e@PrnQmD1;ILqOH?k[1Fn@4B%nhSVZj+7Ou6q[;<P)#;-L"d`fRL[J>RD>64THNSHYPkZIHXAYsdkB09JMEbck(D7YT'o>XFa:WZG2u:9[PgqlHK=cM#E@R+/&?QM%k7iPl%hA:Ii:SE-j?q'7^*n_qJ,=ZiQ\"\"1&n<MTY&`T`,ng8@jjF[_eRb[ZGVI>TMP"lK@]`0WdA)9/<LrH"pN!J30KT\T\$&n%!]Q]35J9!]/)a%K]=O&!6df=MJ^k*<USdE`*bA!Y`7X:9q$:L<2VJa4NDL"6kD*&%`TTC0eFaI<jO3`"hrOFmd^@+.kKPdl":VKa%UZFh-OQ&bZ*%6qt@?l-eq"@n2-NIr;+"WFbkB%4'<uK!W$5lu6Qsf^$9DEa^9\psY##NBM)F`6mni[YkdEOE16<6!!-ZP2;rfN]F%]!haMXjPN^A!lEK+.(>FV+Dn1/k3U&AIndmPFrRcP%/LBY_&2sgY2DQ,lfFRT$(+rLm@H;5^51n3iVDgE_:[pk`-,2Nu+Y,L1j*l%LP5^kn#Ms2"$68*H7[5p\^C9KrPMR.N8_af;S>E9%qu8Cp<U?dA,kcknt;5'KUH,E%b9Z[Sc'4DI:S%*ms"6W$*_Va"4Nb<4NLge%NP+nnRiV2W>Budi9M^t%Y$B/2qdIDIjK7AN&/-2d52?Y00V>2_M[&V?^+9GRL@eGojT92F;pgaLC%VH\B=m[JR]6?99j(2:HC'`r%b*3cPAHaCML=(C%ft8uN5hjUO''sumY^<EiYD_D>!\=)C=@ooG#"o?mg/se:]/]3+nsQO7Mks8jnfJD_15#,8-0(Bl3g*QE4$=-u%hr(_?I[.h%$Z[-QQ>Wlk'NCZF#n9ntquD4O)f66K@rE+EPMLXj)_e.u1u_0,kS&tNp+.[GSZ7@%4"ELm:J@p=j/u??Z3Kc$]=":M%n#E70B8q$dO)DCCDIL5FdJdH!7",CuOOtH[N^[aXI?udQ2"8L(lCf/s:h&b97TDq\Q!GCd^%ks`V4Un[pRBCnN&+aMoQqS%C:GsC%G=@=e[tJdZW\(2%j2.lgO&F:7c+>hk;#FTV^6nOTUR#Ch2#^(kjb4),J&VA?ahKEDE)/*I&c\Z`hjTj+l[]dI13E@A$'I8AWjcb%%WFLdS1M#aW;_hbEjLb!B>/K"TQUeM3ZZO3G`=ebL\V"UW2.L'=s+ln]+5T\(fTdVt,OC?KcD$?]75S*.SM?Ue(qVeaELVUu^E1=H%CKWW1+hch1<G/o"<lG8e/G$k6]u('"[eSL_VAoqteeeeWH1s'TVI6WfZ1=ru^>mh]b'AHnTqG(QaG+?/pc,`7.%AKD^j7mk44%D^%XnOoHC'6oDOK@Pl#q"DqLe>V79Z6%t0bp5"'#_2L#iR@D.N70l0hcO1k*YH)(s7T8h0I9'MQ.??[1gY9W0!1@P$?=DhH-9MMSGAi%Z[JBmc(,:$2s"Is2s^n'ed)=UqP1RZ<BaL--`*5o>lrsT/7GW1='0JpgE6J?&+_jV*NTNgc2.55rU$"bI2$.NJc9L.Ns.0<'4/C=%9S/a:+0=SQqrc@XY1#ccLU03(<@bXCNe%pdVYh&)PRN-)%)l5^dNCMrJi0:Q.*h:Z-]@(apN#ZLn3f`b9+?`C/qMp+q"?:PUJT(4%I2$h.44/*<`eo:X.To+6LF6gHI^Q#kI&9PXH#+lga@*DeZ4lncM#2-((2AtPV$3^qn4$loP(R&CpGjCo@HVqYc2@]oq98W**U#a^%oJHmn=^PZaP%@OadPRn*l):2=St)f`BjUL1Zs]a?pE4r%gp7AM"bfeqWl_5o9hN_<>?lfK/$I-+F=*N!_Q^DkqY2g+<SrAQcFInW%@4E>LcDmtkq5Nf=',O(0r,soeo^$7o4IZI=FiIgah!4cS'`nAC8SGm`Gn-<LFXFcfWU?Le\qd6a=O?uG6XuD8J)cE8VoCf6XHU:%%oh.e!**i5+P[Kti)QTgeI:mi[@:pI!!%RKWL;"BabKe_:acAA"0N-i3WNSE.M6GKk>*-,X`QTZhrN(a)\m@Xf'R6#<qH8.5\SU)L%Zno+Dd)dS+.DJ2$Nb2UiL>Tr<,1`,kXn>Rh)!Hq3b]SPD"lsIGY)UaAPW'g+TQFlb:eQ[h5Lraiphi)\F4oLt&3#nWnZ4/X]u<T)%Vi'"R)KaNZMC,&fKMr6kG'<+VRo=XGgB9rt>sjLX2XY'>9.?=Q<^5nJ1r2D%"1D:ZMjg@hiqUmmE[BI[1n$#6%C;4jWTd5%3""Jq%MG'A9!Y5/p4[]6on([nYHG;R:e=*ZX3&B>b7b1bHB?8';bfut6qn<Lp$_8.BNAek:!r#?(jju0?JreU<\CW_uR8K@5r>;m7VS,O4%YO,sc(C78^6(hOnH!fEh/]T*CM_.<6q\=8(nm/3bmD0P&DaX<F$%Hl8(Q,d3TOZBWq0O5/O+t5'Ku@X(2O++gm!;TtlX7!(p=ea%%5jlLsD_]nPjXMi$[i"i!JA4%V`Lrh4nFtRna^(k=KsT0fa_b^>(E-2=#NrRij]r]=G$fY:5-F+0UgO)tPh^slhR@["ZG?o2U8"f.%19ZTdlD^M#&2DX9P[MkH2+MA:gP1$'m-NI26JCC?TrXga-!CI&>-!CF-+g4c]in#rmo*GjCVBC?-1M!k6nD<hN]coP8eR;EUSuMW%10.=(UpXk3CC._=XsKS6A2>A<6qVMhV!PYSneh2*l.=ga=XX<;,*u?bo<^5j>Ne\bh&,O;,DUU3N'2#q7RPUqg!V7;=9d8&\J0nS%EkWijRBROl:S?6g-q@-[1E'%]1F8M<,3gr7JPai2ciQ/#R5C3\<7,a.c^2sgq71g$Eu^_eS!E5Bp74Uu\NH@<TsKcP;aq1t'16CQ%6)Vg;Y]:/CFTe6b>&]H<3pR&4FgU)l0m(tYFIHmZQ"0$Z,NrC(c,@t38'ktE"]p_XZ]:]rB_5$;crilc;1)M2L5mh&1kL`kX4NE+%Z]:\';Ng&W3fQM4GoTY(U6``W`EjitB-)Ws'WtS7ad/e?-<7>elh=B6PE%Yi4GYU#At*dpeS0><8ul]QbM(_-EpG8mHn`?qW@te&%36?/Og*dmB:U@C4]catWOm/*(Cj["h/b-_6>b==+LlKJ9g[!='Y#Yf(;Wg6&j0L\D-(6?B.3Yfjo#ZoDjrDbeP..>t)C/fkWUj/q%Fp/I($Tl0O:LX!T[Q-4C6t=H4Cad&a/5=$nRsEg@$[-T'pc"H3/'^#l7LP@o<Rt'rZ=#W'Xrrm]f,-4(VH?>t#W^"<4*%Ju(T`.Y%KkOJC-`!TEfG;`3=pr#CY-]YO[]4A0WBKjZi6H'Sa7mW38TLUdCK63CgJlY&<0N[ucI@`hQsP.>PF?5;<pR]T4IRc\'iA\RikUkc%>u'DS/5m?ELuV,]NISd>la%1lVN+A.%kV&O!tUUL1M$gQXg?kK3KEQ@htkX++31;1@-V7YD<#9<[O`apeJ6V<>BOPK"i9'.Lc#2p%ZO2k8[R^LmqUHat,\"b2`%4S*c66e]%)IC*)TD/-pIF9-7&$=1<b<<dGW!f!9^t^ealTiJ05"!2bj8g1r/t;/dJi5P97AFccGdgg%L:FAYK=)lhea3`kAiV(#7KgT>$Z-+QWDU%NX1ZoY@:;er?M-CUk$[A_R73XUR\_aY0FVo)Nr.#9U%[ZY3;+\"*pY47KBpd@F28$Z%YhU?cN(1Ici$6-c54Wp8-n87<A#8<4c,69AWcp;97jcWkl2\Ak<6$g>Wj9)gIdD4F=VB0JZA\5^8*V+S+-PoJ^!;8e9u*_jf-khO%j@[$S^k"t0m#+k'Rj3oOfouW#Ls<`W<$S0^fjt[hN\iL0.7pZAjnI4g;7/mUA0$Ygnr3,9RGE#9(;ge13DMqMCkh,WV[&5=1:SuL%iApcQf":Y(LdoD.]>K(7RN3L>-2Ed#2PH6NT'.CsSSMb,FIo<u`aor?E>sE_%F.i?0IMmtF-_&Bj>3-DR9<S/==s'?Z,8*p0=PT$%AnNiTV^m'K)#7E2:01E[(bEq@bbs(<dVLtK$T8C!WOQfU/h@APj6]8C/rQc7jtuD0(K\)CmlK>&!17?&PZA8<C?Qp[SRe4mH9MEm%lHSmIIJ/U1/&oJ@AMG)8\*8.Ip%+6tM2/EW`\nA=8,+fE7,4["i>d-AXrItMk**c?\Fiq"<YCfh$Z7jDcI*YHA+=M9hGLUUNK(lo%M%iE"&SLS#Z6'Ti)TB87GdsTUR#+tD6o#Nr,$o(q5*6[8[ZQLa66)JO:S]5j^E9Wr?E]CKSG`TBAg^,&)UI>A/A/>3-P9J#H5PA^%\hWoS(PQb^^e!M,iu*L8bgkQb+*`,RcVG3;)T$]a[T/ZB1gIqr6.T7LpsGtcn6Ua#G3G;B)W'4f9jYu%,J;XMEZkVKKf5#%R.OmZ%>K3!$9)Da9&5nDH_LC'*6gSBp*l]7::HL?k],G=VYg?$i%8m7;Lf\X(/$0D^9d<PcrRjG(._ElA/g?S:>nTQj,U/N0NNFU^WZk>F%]05K0<OP6Z2A;5LYb?m&LQ+]t5&;Vkota*9BRrrcSoLX':BR_>=BP!%K\X'E%1U`N@l2c-o`\sZgK"`;gI`lajqb;`dBc.fS=Np3%l\E>+Yu9aUZE[69FlZ0lTl:bgG8gsE,?b7^0V#P3f8?8@A/&T/g_t'S-!_-lF_nH8P]^\0GiX^PAV;GCD\4;(R=o;V`&=DV-IHT5%Bae)'@7h,!oq\R-;O^ZR'?%=I#I60\0Ld/$Q"M04C*U5k1F;W+J\"%75,^71@b!HUj"0O..?HReEed.dn*\R$>K,]DLC=#!ej6KI%*HY0kr<_eHhr9],/1Q+#Q.&D$!t0.HpSI7@cqIU;9,.FbS["cc3j4,b67K@dA^\S<B1KQ=<l&[9Yk#G?,4'nOgt.h5TSYf_X8QKC%m.P6q0(-2kK\bheNTm*<<4cWuBNGk*V5_L:]MT*;$$O3ae'aoC,&14p>$@o6>hkN3KH1%PCE?p)<7B(%ae4L(rTbX$Af>+PA/Sf7%MjY)Z$[pg"%dNUm/_P'KBYoSUTM;WST[VS":+d3\NNc(B\W:+8\#Na$V8_E8?c#;-9@)FfST\q0iCN4^CXOuCpZJ[LGd4V]r*).)%_UXJd8&#C_(/BXr+$P*F_s5+O8s0XM>:g(q?mBtH02)2WoY-XV=C$6R-Aj1+7DFe/>HE4TbX6a,q&ktnq&/Mpeu9pmSJ#\(<1`e&%W?c,`Fge\sAc"*Cf)@@*(G0#EEZ+ZF=k.q!3DZ-pI9W\,SE]n:e9tP);.]"gL^"oY[4V!?[Ma[CB]rU!XtsN#kY#3YD<&gudQ/i^%%`rI,RN+tuOSC^J9kU8GG-6U'(/8Ee#FK5a<fa-,0C<K*:4=$md<%iUM/2/!F9^6o,30g#?o4G%acUW"Cb2%#6>O9NBKDnj3enS>%Cdc_i$2#h(a@i8lN9iBu[b$e>l&9*9'KPS>'MW4THei?lSRp$d`hM^6kIFbHRa*=IcHIcLH8M2?A`VQi1nE$YeCNnZ7+3$mdMZ*0%=Y#rdB`AeAZCtqmUTS,8n"uiDN+2#[@n,%,VHY'M:87!=6>RmoF@NNWNZkhfRa*=Ic90*]eS$ugcI3oEHHg+aUKBQ_h1W22l&;\i%Jm>k&BKBE(g5M[DM5E)_B+)o(MU?P2;aP!YXRDKUU?Tn_b0<E)WI_l=O5sInRVmB\+qpgf-P]uY!#4W6pH!([e/$Yj_phEC<P1e=%QZ^fHh*AOtJ[8PJ@f:Uq9=]t?e>j8#k`jW_N4B=cE:V^G&JQb?iO#,[Y]Bs*7XgnVgX]:SR?AF:0_;Z\W%R6]1tHU1h1:bn`W=__%;VW.DZ%>n1p<+e:;3FV\7$O6X,pEbt>39G!;M(=ZQ-)F;/'"`JAa[e@@I1;\G08TSl\q3^J%[U]@O.:OTf]l;FJ]N\%fDOB.!);H%i\W*+k<qsS=Q[o>7WF\KG:"4sFeLn[YtCH?G=J"9FbT6aF7qSY[0E\p\H:&u8Z\?Y3"%p"Qa@A&\g4S;g;QhS\c>qec#;RAi#n+V%kBlFJf,FA</?Hq7K%rg`f"b3q=bNK>#hUG#Br@87LJFA\0Z[($TIisFR1kuHSuD>Me\r30hA(f3/W2WqpL&6=>$JJ)GP^E?KAKGO%fquEU/r)?uTr\>Q>43ukL,=d8o_[4QA4SA)A\2le+5;MfF6St^'ACO-_R:YBD0U54BBIKOFt0_3!c.c2HggKJK385KZdlq,$pD1?%D%\Ydh.6r9mK"-3[4b-<dP?nMT8FL2nM1l/I1B5+[JR3dlY\@2"g5<\[=OWhh5EEA76^';0V&)\)o-l-hW'kG+'3)&<4uCZFZSc"%"'G[r5H@baep)D#Ia!^c3V-6>D[Jt/&m3>olSZa]N0/?2/HAl$^cSZ;B+eQ#e[X@!4H]@K\#HsheeRUhF5q%9\5Pm]D?(+T/)77/%.F2EbO_LZ)p!?P%76n^9q>"mGLY/SFkH^^*B@R?52RAi^o[C4-KKdTCfYchQCEJMf*-L[8qgl-cNhgEJaN"_mf!;nr@?e1sZ(]EG%k&Wug=]^64H*4BDo`K!'(X'I1cJmT`>b4rC]29-'RYT:biVQT8L@CaD]p<Bg[hmN31/<Ih1-X:K(,H;-Z49bg(#.htI5X6)YVX=/%].$dp:Mm)1D$2S)I#1S>Q*?JHjor-bEhs*$HF3<U>f%?CZjJdl%49NtElH(s0\'AW@pHFe)6:nmm?pY8$nC@!N,a9O0)'%L#MppS%m)N9\1:Pp"pI4DUZ$L.7k\BN_o.V]8\3ATe:M%:=hMUD9<Slu9,2K-=4i3H5r_jS0c^$\^bcmjhD0';CT"t3MRU#9rkoi]OoJ!N<%`Z9BohRWfuK`qBt.E(qN^;lZ*j%iR_Gd??OjlAhsOudX+-V$p/]qqaUh.;gJ;ERrAgs!ApSgZ6Q<?3u)HiNr_-m$[q_;I.ebrJe>%eseSk:DoU%9O*qnRb6@:nV?R*q*c<mp1?$mboJ_bZrWY[8V8KZdp*q,e[>-!Z1qlGRV!-BQb#4Yee(l:V?IJ8G;KS$Ugn->#EBl-%'=6\::KI")?]<C*!&4i=f=G,#@:IRS'>8=R%GJ*;F2qfjRO`4lhUfl@l(IHOH\jg?n:ll+,o,+S=rR^8>t*6OPMsVj@L2+jCTH:1%?;F:(bZaF@ADK.iS1`ZJ4Gmnef50C$+egU%*V*pI:+Pl!inE>!1N]*#-1TdP_,+VP,21KT'HstKR(/Zt%%2kr*Lj[J8M[TR8XXq9%>8t.1Q!%G9laTupVmOh7?rqNR!]XJsD/>cU0;`^Z0!3r;4"ALCCR%=f>0pqTqE2I"cI64CdJ?PEeemCYcXh1nPTn<?`I?=-Q'[fX%O4g"e<_p@`^0(2F?/-=p`bIp-VpIt91W;o.]F)2q$CM,ggXa2Aekp=!+SJjhPhl0b]W7_[Ws$[-b!^"`P8K`BlR%S.ppBOrb[@mQ%b+<4uj]N?&\98Kg!/p5hZ)(>+FCsg7APYOfM42uXMQ9q$bW;CNXkcLbUc^0KaOQ7r42l_3Ob+Ksh)J&N<OGMS:DG]=^$3X*WtNoD%&9M\\ZS%>sCpp(m;W^u*D<6RMGku0_Q"pMcl10n;&Un8ce18(g"DVX*WHnK]lr%'1NGIg;WTh+&:dES1V>$=sn(S<U*%_J2d-MjJ%a_&=l)Q70?0G'_-7:fta-d/<CNhX7TPKq[eb*ilG(<b_D@ce.'NYcDG\Qf_U4]<8m$PuiHGZTb([*'J)CSa%L!jimKBUi)?XG^(/%lKRRY4,O*He0cbU!%#e&;A>cU)9T$EZL'&*].niZC8@<bOMcs%7_T6'UB']$!%s,5=qV!P2[7W.7^a$8BK$.B6:MaQUL0;XU3p`U%A91S3c_=Uo#)i%(f.(U2.%d4Th\M.@l06hYMXlVXd8c6X]qTnWV=g<9;3[-ua:0Lo_+UY9`&k/'^X?gn5-qaES<O3G9P:[W2j@Rt%:K,5K"1b+aWqrh1agJD/:lal<=]b9#gY5c-laNIXP23]uekpX\aUNr$GO+FH>$fh,Api^/Fo>;7TMoD=T&^XOqFM9$L5Ea3P/TJ)%r>\=JD9,pY=k1j6;e;f:Ib%.r;SUY'>sIYR]+%^>+a*ab(Z_lQ\p!B8g$hho5[?V?WdZR],G-d@\pi5_X5M"LWp=;GdHUG2($k^1%>a.'FrDYdWSE^n)FoACIVd+D8VejlUZf;5&IU0^]AQ:smp%VPq^br(2[r*X!K;sBtoo^<Gos8`f>EYW9IU,0RK8Q=%=M(`.[A8PA%IhQu'Uj3hYoeVDN?)b!![@N'3rq^d9X<f6'8)?L:5;PMq>1HD[HX/f&iQg0(-1dGgeb+!:q^^:k;][cD<PR)MnN"_N@9&A,m5e92%Z)Z]Md2Y<SY+LQ8.p-pch1Q6eos8gX7>PfTY+Ki#%op$=2<t$0LY]27T/pFpot#Tqkh,`SrN*07VhrU'RC[ju4M?AnI&eRB;1!Dg%=k?HsMh*GH1jakhY2>C?I"\a`O%=Cof?ZM1JlKtI5[?U<j!@[t><aTS8c3m6XN7i,\pi4HN[h>`NOjQgB^;\pX]UY1@2,kY4he>3%=j!anCY.UQ'npGjF(J2"Dl$idW`**9Y+Ki:5@Kealh\`>CmLKLeu\1MmH>hXK3bshT=*<(6YsHII]@\XWqna'>?]SM>=Yj'?e<VU%TOrQ`N.BPWb`bIq5@(_n($k]"/Z\`Y4>p;/`R^L.os5-a27o!Af(H?Z+1(V)F;>F';:SIE;-^f;heG94e%1"Z<W*n*f:(X\PDt)p%akq-`\pi4sK?IbL4m5fUQf,J/o;HPa\7R0`AZm%;A"_P(Yu9sAEP,A+/J8La<MS%n.<S`7Sq.79O_'`(LacaJ5i>^o,o=<9.lCBH%=VPB'lD_#b?r;1t5.KR`Ru,MQ]iUXtZWo5/p\NrlHUc,EgRDWOm_JV[b0=L8c@Uh(9JMpX:61$OVr(gXE^&HMC:XHZ+&dT9XY[B3%igOR.M_@cqjgi:!"_JA/k0P&[DVjtRk3dH*bM7G7hopM4rPRDd:A1*2I(RV8?Mp<KYOfg[oA0b6R#f%jL\WoUo1u:I@IJ;=GYLkE%j+E*01L4PR0=/>`nMA$@;[X68jplcu067H'qs:KLiKCp@[s,B,s*U<j+&/N\""s:rmesZ;UipZP3oT"6p!T>A3pJ#C;BVXAhYU:Z%-^t@U@7,WHQNtFb_X;.<2<qa9T3W+RhZ3$YnYL,QIungY#I,dZ#tV-F)=p&rO,h'p)-@#@!&4O+!Y/?%!V:<n]9:c\[*ml@-O+KF%q&E>HIAep/^%(3+Q?qbX85cF)iGC7f%?jt[]4+HCV=H]/Sc'HKijX7QQCVKAN'=f=6kMCEfa0t%g.X#61*R^VH_9`GCNY390crsf%9m>gfiR.$#[rsLEp&ojb@S+g;G;sp<L1&25[EW&\82H6hPLWT<b0BS@a/L2@'eKj7bus#tiSc@j%XAgi?bOhe$$>sCqX/hn"e:%!%,KI'M'F"^.O1d64S9".,1]/()LiC#pQ2^>_"ht*'K!;1KSRaXu\6lbN6hj)@pfNDAn7+k40cI.K5Lsg4^\Ia*UfcokU+?u&`I-)j%?^\(CQOt<M!qHH3rO:"5puj[_5D&4'R1gZA,Dl`0Mmm3d6'IEQ.#5!;r4#Wh);4*`^HE(LYZ$QeX+o^@KV+"fRSeAa6u*SIAqLK^%qs!&Z52L;3G6$jL4=tYo=UL<od<GqG,Y.>m,:l`V"V"din!Xj:KTr`mO4Oe<C_hJAn`(k]QI"HK,'<k_q[l%)$CU*VKBsj$V8OD^%_`h?oa=)Ej`MX2mDuS)2GG9C\*2N:+$Ik;l0kk98kuAsN6DrF4JQcs"gH.mm1i\l,!!c`<4#m-dI4%f<L"jK.JRB6pHjRI5PO.a#%p5]`RmO9-_>@'@(+3L-l2s!EU![Na6iOeC]!\8p)4as-5L;-s)pL3V/JH$r]s!g5(F[Z*S3)iBWm2`.>o&'u0AWZt'1^$)*$#*!3%r9)Bi^j%LDJ452\gXk7)J,\#L!,1]]MUq'+p;og"#;!%9,:>t!`LD^'?sA--(%DSuJBO=@M9^O*Zg[L#Kf_p6BTF4Z^#(s]po+)S%:4@NhOH8UDR<ohc&;%uKm!^7mJ[cdG&h!c][/W+H:r0ddaoi%@"P0bs@\aup%6HeNVaUAII=(BiPU'X@0'S]W=hp_92CM>rPgUY<%%<*ns&I%8(I:]28PG9j"kQ)?8TAg<0b*")(%rG8rr^jofHsOO_o74235HT",?r/Bk&Fh$lI2RlqOsG%dESs/7<t<"+fML]b_B89d%PA%`0qi(+o1+tpB1)o;SDHVlXpb@*g\Jkd2IDor#(!8L"Kc0n5:q6e-1Qk+lWAI\*T%1?3oB.p8%'biYaUhU`/#D[$k^;9c?F#F3%BrR@RZWS^KpVU@^a\OA++&j;aEMWu/EiHq,mX.fjQ=chG;(o$hmFNt*CaY`IZCs'uRJV5R]bP)+lr+>/+![;Y>&5SO,.RC#)LLg\%HL8>WR=8@@n!l)0jZjP=m.>nUhdt6+^DdC1TRC+mK9Bp?Vb3Kmq6A,.lX)[?_i;Zd=pN>=GJDGShM.rJ@^ZoTc[>9@lAQ1!pe-.=%5D`c@1FKR]6*<<6N+JW!"H;5"g(UoW$M2^hkPKSL_@A^aJ?E7%3/4aD?`<&GL2'0=RIr@P]6TqNLkS"f6iOll5E#6qa#VQ<^@J6\%g/s[H[Ph@j+X`T;%h;r%9^h.!%qkC4,cIB%DQSnX<VfodbA)d62'8l0CYAF97?QsW#F[/PM1MO*\X+t*,tGbX[@.BU"O-T-)#!\K%6hXEgPCt_jX134t75D000*L&BPLp"jbnIN<:csg4040UlL]?mm.p*Z;"4</Mi`0;m6b^$>[aW<i$W`@K@qG,l36?P[hJ-.G1^:>L%qN1)hgi_qbF4o5/,6Gn-oZs"SiSg2dnegi[%#]M,s)DSVF_VABalZ`C>q!gA\c=Wj?PH%,\f(JGN0KFsq2i(GB]1k"G;)9'DXKCe%FWT$l[[qR_Erl%2Q(UuZ#7lbY$'an`a;<;1"aOf7O(NAN>8htu"Q_VhG4q++bbeAY!qi/b4qZ:KRij/;;u-6\5j@s;I93*);@UhZ%Js'e;LG*W0-L,E'IAts\Qd/C'L5,eueSYGJX</f&VWVuP4A=`CcXi=-e1WRmDk3SG\r*<->6W:or`q4p"1qbB]5J2j?3%U@O+9\H%Ra/AP.?$'Gi_MqR!,sa.2[1o*F<)M$=:i]m-D5I_M?cEG0+Q+P&<mT)cF6U`g<:Id;XHcW$;#LD_ORdGL3ZR'V$A_#Sn6gi-]AI+%.OD3S#:`OkUgO2:_&l>U^stSiJC1MWNsWEk/645_+:@29RibrsEpYjmG9ra=b+/p#.lY>L)nG8Y)r>MG0;E4KquuALgMamF:#/t1%+3#El][VpY>%24"<QJ8V(OprcW(5W"isPC'^CMa*5GQ2:%"59</^G.%22e]HjV3ffC_$5;>#K)+4:Fk"?Jo8?B`RhD"Y.qngQO1M%LY3&IJ76dDq81/WaJV8QS6Z1=i/;FR!:8Ve\LW8Ws'ZD7>ci#gjkjq@V7BX<#h;QuVT,N]iV_t5Y`%`PJ8;iV:jGZJE5n>b-+9#)%'fDY[rlJsI'JD.H%.9uWhD<)G*oI_u.B+">OHS0B!224\JA<Vg8b,G<8-ZT%Vs?J90P_$e-9Os6Nd\QdN4.=tEYgqnGncODFsUIM%[/998*bDTKZ&.!E'5T$,_H63hicmOI$t0Em(S#peil\$D=sg?><d9uCLFoP,N^d.-]IiDWY(0Wh!+I$nO4N1!V*)ub]t4Ou4tE`;%9%\Q=49`$CE:^Kp^0'Qk":F1NKHWGPoL;E0h,Cka`:j>"0u35<ntKk$P\Wp>I[9SR?"^98M;YAm%)q=n)E?W3++kfkBnC$#d5o=m%NYRkuKD;sVQot1^[oD"6(U*#Spg03cQ$2(eFqEq?<*2`9G,>."2&?q\/*BPinac+3mrinrGn<\5U[iMq*=%fJp>.=EG,nW(g]>mY%NCT9(0BCm.a30(a7Gk!u#hK9ZoCYs\Eokn](j/V*gY+67J1sEj*t.n).mDf[k]a5:GFk2ILb>-8IID6B=^]QKf6>/]>tNVf=(6Cg%m?JK#9_>'g9?a'ojKW$*5pR+ZMkor4$h$TOK1BQ!o#U:C^V%EO@l8MH7T:b'Cadu'Kc:8>dliN3?4N?9p"bU[5#R$2;*J):r>gGk%d=3V`K^5h(h;<Fp((>gb_Si0$c"<Wnj$c71T%up[pnb@2"qMM'(D79#eNaBiJFG>UgHnZaNsr&h60YrW-A!A7b3]"fS.a^VCENcR%'gTj,rf!-;kpoOY#_YJYa`1N?#fuEQ"+c2PP<o$*`K(!%DSb$h#>t;)]0)/BEO8&`0J,K%a?[OWaM1EoJIm<$kNt9MIu$p#*[J8u%ElPIlp`4Kccp9qGJWN1L8JaZ;N3L;,FgN8,H<YG.@A=<S=D?GW`;)0q?8p8SQbgau8opfL8[d(OCYFK%%`jVLnumo+Tn%7jPk&%&%YqC_:Kj5[_0'r!q-u<B'/s#*F+uXUs5JH^aKFV2]$Zu^H8-oi3ktm'N];Lf[%2a9)g&Ru"Po&Gu%MF+@O,RDOh:cR7eM8&)>@LY-%9/3.7OAiWP%u>2n$'6GLU3+DV!#)cH^K.rcNMt.T.[q*Z6S_mfb:]0)Qbb/sfEt"K]AW&$5sAeI=`E\94K$h,3+FI]&TP1K7Q3(=%>nc6Y/\4!XOeX)m7p\>D8G8VWEU@utG]g#+.$RJn\\$J62mn^9:;Bjj%[QuoMupK[rf?E-JO3%`BLf[GX9HKR=c>B6h,T)ZmgJtd%;;[^$jnUodrqI$0399\?o4!)r\_jI$5.?"LSkY81HRR"CBN:#<Hfs(10UjBH,_KbdQf]^Y3?Z3%q]`t%SmOI['"C)^p1o_c?nV'k%+l]"?i&9&S2n*"Gf03*K>f(uR\k8l8eRNOd[bU'R$3$'>I<oEmO-a'GG&cL=MscYi#k\a,4=Jgf\A!_(?!mE<_,AmiEp&$6!V3PW%9>Ug3T#8J]86f/FE4p@<aZ3Gee#RPC.M6r5G3[4lTCYi$6XB_3&LX@Zg,J'L:GH\'H\`7?5/#*sWC=QdI;&9C`7WGk"RY:1>7#gK%_-Kgl+87JoHm&u)$<OXpp&,bJB$re4f:NfqNDkX$qmj`oIo($&Ue"Lm^DAE+Th1*7Nbh+;IiaJYd:deQ`?_m!K5<[gVA<h3TWc9-%'6/LjLL`NJ,/hQoa2:mA(*#8.I9aSdHk0/e%!(H>mhpuE3"2JAX"%fW++ItC6pY`QpH@bHMpP$?<3>\Enme*tq-NVs\Jq2bEj!8$%<LD+<4+X@+9?9C%NUF*r8\:+[NVqUORJSuD]Hlbte4[]F4C"]c<@%)a,6%L[egL9Sq,JrD"ei!'O>(gG+bXSS<6j@ma;I+eX%A+6%@I=U!]<Ct#fQm:M.m=+eRU^$pdJYF`gu-Pi:ZF[[]f-!?kee15DQtRs;AQ5s6L>`X'jM#5cUsNop/aY#`R43!F2(L?+iGoqBQk!0%cderJ?oh?@B7nm->Fq!W7(>WPJ3F%tLI`XbJ4<d`0U+fES347K'pat+kJ(bDogC;&<Oc2upFFSG9;Ld\XR$FroS@p1`>%a%$4k\\%79K28Uu$7]];Rt>gQ1P^ddSbD8TJ3tkjTEjX:"Y`,Rj^olq,,aR86EHTdJ(]Yh`9.VSM*4h'\VlX&+KX_.ehc7YJEh`>RAe]`kRU%IA*9r'2l(ZTg7GD"&e*::_<-UlK-/>eth;,PWoGLcO:+K5'(ih`Ho2<*X\(F!8M&=H[T#X&#QOE*S#QK<+npp2t>JK\eV4N"cF<s%ApX&<:dZXmniIs/.hW1lcVJ\EQPcP2FmkZ\kF5m2#[;lSb>oJg_H&($(>E7K#[?9YCmVC4#s?EmN!7s-P]A[\Ka(leH@^!)m47np%1iF^3U?/$sZ@>qFUYM&M%-u#8R=jHS5p[s&i=Z2@BSq./4[oMd"2Z8sr?P\Xkt3c,XRH$8%=MkVio,jpTi=c]=-C>3opk@M!/pd2%i/?"^&_$X!jOi1Yn@>-Gn`Bp2/=aRb\-R`'+!Z[?ke[e=c^[K%nRRA=\0%G0B`kjQ[TQ(@%*Q)omLIor,QUSjS$)f0#o5tbB7,hS%Uss(&$Q#5WHZ&tf73s2jBu6]#TBmLjl>(Q0r&51V1,.I%O(+:e9EP)(%4ShFn"2!/'iP$CnB`f8ONfLLZ3^'ln2nQ09Ihn.T:r?P%jc%OTI17-34^;Q7n/6oB=2o2qL!LmSV8-e]O3`o^Ck0uR`+K&Vo@<7!);:$d,+h.F\Q7]G&9^6sq`^OTG4Vu]G$aGOjK`RKrai.=%Bg.15/d`c7CJ&+BU"`p_k4?fDcA2YX-r.Zr\lHP/`A(d_fG[sT"ucE)97g6peE`RO+3Cl6n<Q+dloKNi?t@R&^-!t@r&0p,4G_r"%>n?(h*rL!=^YUG3`a&e.A+)tuaZrUXB.AG9G?&`c!XY\`/FWm7q$M,H"12tf0rKe5_EX\J\Q`]1he&B0S.JIOc9JC8@3O#DZ21c6%\$m=h9n9;SMo>'n`o<:l9Z:':8]mM'jT%'jD?19shbPBVLd]"uR0k^0,o^qn*F3GI3N?ffFF:U^*oALD#EWVYc)t`oFME.F6p/K&%84hAk>$eNTjpV.Z-Kts/,lqI`35J"4G%iXt&:=\p'd=Ib;8&^thCi-!?HT/TpC3(EX\Yk*Ctn&#kCY_&jh.eobUn9Mhh+D,?qQkS%[gX7L5;DTdC]`U++<Lh:hArZ@b.!?#$q9o&8&;gTWQULHh8RYIak*[k+>1u!mRl[*%pWL<0:YE[S:ti8b.t.&P#=o8U>s4c*5H*)%<@l.?4q5U&&uQF&i!K@Fk3>^]+j>%M424<kp%EHkq9`HVkH0+I7Z!)s*l7_BOM?]d0]dHtY_d(eA(cP[C/cA\WX(\Z''FQV`/loD%D0.q>@B*bJh]mfRQBFrY"]'IK2aAc]]6TM@oJqd^V]5_!F9B&pP`Z:0;nG*K$P2Ee`Y&UphadL3QO9e,(kZ\?Pm(-sD%K<5l#?U2%E_%SeTKPgtLX]HnA2_k$%oJNiW@)\"Fn>_gZaJpJ%j^6KrAJSt0^9n#q<J^P4l3bI6!NTcI\O)a^"JI5J-sn[^l$-q!?#"Jq$_t\%M*Z6*3#-leNYGGWQI=W!#4Ko85^Ei-hLrH[jF0/*d(Z<>,i4S;kHD5\Yf(N,`>IIgmiIqUDBhWLS,!tJn#AmCfU0t341RGgYf0h.%VGd<ZKA<25)Y+3DiZ6-(#YYGm]PjBgmo4ju*V#YBjJS3Oc^6JJO"9CW*D'WF$c:"c$+8h);3AhD@$'2EVaLUg5a0@u]1*FU`e7@"%\M5$O]fa1\0S*l-%ul1BZP,&Q'`F(,m)8"LJgXOV<JAR_3"!24jLfFKo+c[5QX[\g+JO?sg"KuRg5o.4jV'D,8j^?U*k:b=U*-/F%oa\l`cIEPb%uC4hb+,iQ"*gblLeTbhjS.lc83S3f^+>sG`\o(V]_kR`Qt?VYQ.`a(8Kpf[*mY6<a,cH.!.'_N8LDM^Ia*fo`WgoJ%)%^iD4?C3B0Q4rSF#'6*JC_@RZ*i"KOa=_Le:Mpe1GtgZT/flKeArRo)6,.X[V[t]n*m--H%"]9banq,Z!!bDTn#[$iDPTSr+^H\%7!QF(XU0\0,HDmMh;Cg:MEL35!dgVF;^JBABHl[:Q7,%qg]4'p_cR4[.[gW$^<J&l9go_^B7ifQ;pg9fr-BZf6;-E*$*"\6IaS7"%1_I,Y2MDg'[gm-s&muBd<Up"L;2lAc;uEG4!%L8'`IL2j#V:^n9]3:.R32@JFB8GC8g/fJLopmms+_S&)^S9NA4F_t5QP85JkR-H%B1$U))iJ5Tde)@&@'H+R/WsF6BnPsJ.KW\:BbIP.*PaAe4>&Dm(k5i.Rtd!tpTarjG"R(cf%iD^B]L8J`Kg9.GQ&f?J%D\U_CLP<%Z$G7Vl??^i6)KTE"_(@9jA.L:j%.-uBRl,jn"JkMM'QXrI8r82fA6]<g;Q%q,ITaDT8iI\W9k1_&J-f<F9S(lkqg%-7tcF_@o[r3%RGC94Rc0WI3$K5L%;s3S_\(!5HC.]gL*M*Nc(\p5B[$(a(%iGDCE6;W:/pc"lHjF*BK.1RH4-p>BS[jf82QEdY,>"<)A:/RjTVo%%e0l4I%73spLk]*`MH\$J1$9XM+0#L;8)]ES6707s^eGH<.>/@7fQ[`jK?r3(h,fI0EL4T,^"n1_+Af92Hkq8q#*Bn!O0C)D*%=*r%JC2))SIOD'1$J=ZJjE.#SDtc6=q9.Ll9;3U#2b]i-o>[H22geeb,tn:nf(qN6WqH]ipta0Tr_`i_+]1KCaeUO:f%d3AjZm+m@"'N%]Zr;\f$5.FXr1*ujZoRpN)MQ@eu%&%D(?B'g"n2]7^c]EQ)Pb[@ceHX-X[4WrB%gn#cDmkpg30_KecR-O7no-OG8Z&K)9;/&R[;J%64tMfZ7cQ2d;-dc^dj%sPW.i4AkL8rgX8rWhRj/Jl#(Mc;[_9u[jAA]2J.W0?+E\!>m\Ua\;TaB>npM3[V0iL@n*n@Fqpcf=!JX]%I\q4%QXkn2Z:Heh4jd(Q#6BS;3l;at*h"@&]Np[DGhm2TT1^LK6:OdeU-Z=Mqu0i5iFr8^]$)8/cS>iSjg-A/4?h4fbFq!U.ONN<%RLN!:(`lhgA$4fTa-82b,3K[h-2qFZGms^gd.@SlUehDn:'8Dc?mDsGi\(D@kQOU#c^Le4M6WVi&1CE;oYOG2TsA57<"QC<"LZfs%ADaSbSX1rB9QRsm2&6msB:#S,AK;-caZF7\L9cgCKm9QMZD"@06#h2:g/(bE+?O^V6#dbSpo';a`L[7pG[V:YNnK!%1ej@]XMTA!%1T*]#P]\N*/rs9War2$0S$lB%[af9/gkYdj*38]eHB+aZ7k,<$()5FRe-Pe'?ctEr6Gj!tZ9SD0Bq5mF"O:T<'SN0%7HNp5-JOqs%&L^NL&--q]V"O,!!H#"nQ#dQG9U#T$o6;-O6ct9u'X`,6b`HiV/-Xf6(XEI4/Cg^O"_D5P2'q]1a#SXfc&:/;3='/lA<`N^TLm)4%/]HgkDG>+g96$7d1T"\@*8".G27V&&,3h$[XXQn[.=RnDGYjm>:%I8pqiY_)nNGYB+%Q-*JjV<^@A(6bKYX>@4bUt@lNf%"GRrC=%m_bFd?q*FThBN2&pS%Uh,=HbeeAB>_a4hjM$h@Z*Xg"6.FD-A&Al6OcCNp@Le(tuo[r\S.4bt]3K)=1/n)<hngrEpGM#5g5mt('/%-N#g(Gn90L[D)Zq2=I6[35(XXL,JECF+(Lq2nW$dDVNkTJ=%arp^K@0<JQrS5i@Y]CM4]8FegC=;/@+Of$fg$d'51d8SOdQ8$SMu%GAOg]1rGhG-1fn^jl8t2pYbiSOJjK;C[UUbepEK`2_kODZ#&pmU<7mH4D-L>%lV@4+*-gUVCA=bpg9(UR9a!s4@ILJa%?k4.M(gB%["?`DOig%orT$f>iCN&rF;MBN*inQtPs2n&W2<UT9S%Ed#$Iq(hMuR8Tc!VP*3ln9qm!Ol3J%I,k*"&U"(-*ST&tVHLG$HheCU5^%IJlX/i\kR_@3La^W]2nGG4bkks7+*bB3,0+i\_'jiHp_f$S4"Jk#js@U8\c-Pfd\uP^1Glr^NPP*&i\h,)RnE(eh7D-Q,o2YtYTW%)KA3<8WO30O"L*`ZAOd?K!O$@AJHF]7?u>N,I32hUk35qZa,INhj:(?k_cZ<d"\8^O"[6/'%G#QI/ODFfWC>NYK;%cIkgBA^pmjk%[">cSO`BLRf0mMc!3&N=O<HmWpa6*d7Pfsnh'._h!,#YRI,X*$A)!#YYeFk35</OT&JdaT5,ZNhN5cToA5\=Jk'Vs?Gkuj.G4HL9%dVL'?R(a2<=R<:0`4j!XECF=kDG;A0oFtmVHj3K922s+Ep^H.D\t3o\#+m(7Nim8)Z,((OX3""^#&sF,<V[&J2lPjpI_i`tpnKlO%DKm\C>f%H?1Pd<jE_Ms.5(iVYXrPo&'[]B,)k)R@o^3hc?mJK)G>Z/OKaC#sa$[;!9OEuk'Ag'_j[h-\!Yq7uZUHF>EMs:AGn3l)%VdSeg'BRd:-V\X8?Y!Sdc4)1`XhZh6@;U>Z%PpU/p@[QVZ(_JjK#4T(4)aKe#&DnpgSjI+Z;%f*iW5q!e[\09]IIt$IB)foQT_pH%qjM$&9nQu[5U[[KXQbH`IX`pU`L:[8?Cbk(.+WK-)?4.pTp,kiU!C#r76=hUkg(!m:^]PcoI0tLSe>c=\8Onk<:EpC)at0FM%l&(%:"j/:KGrVbo]2+$N>n;=+LuAJlH*JQCuG8t=\fMPAcj0a@8@@XB#E``ZmUV@ZQ]2==D-as&q.,BZVcV,$mEe$GgI??X1=4Q#AP@U%/\$d43nS;\NL!/-8>O?sZ:a@5$aRq5;31TE-SRfn6nBQdg_XcUTbu>gWaf0/0d/])P""BJG-1pipuj=JYUXF&2A@pPrKt$GlL!Ah%AqNtuF5=iJ1`LruCW*U5eSJp*")Z'c9=:Oq`j@>LCd]Smq[-(<I_FL7WXt4\ZU$UJ/\6p65$(s2)^Up^ank/@D=mCJUn\]A[t&)@%MGW5'.9XI#@(PhOHuWo"gRq"252Uf2__Fm;oE6O]MJn^^4d-2Y6+mN4kVc%X#.2'aZg4`(l]ISEXNRqM[o("Y#e<"*k;Gr"%2`Zg%DPMm<:e6!-df=jRAaEsndJ-m<m)E=#S#lo*lt_T_n'B/BBK!p[>KYMAb9oakG+6Y*U\@T]WAi[o3Kn8BQ"pedcNu^f8le6q<0hkQ%ngC<'%CD),-gHReAh"/+TcDQIVc.aZc%[Ngi?6(`3k"Fj=TSOuA-Es_=,s"Fk6%JO..>&=%<[(:2Qa.F[Rmr*E^.F#]N)F<^Qe!(%Y1r/9LBBlr\Mqh)"a!,lm3S)3'WfhWL*9B-^hKm9Lu5_!K]5eDK&2A1]dQL-'s(S<,Dgn@4qH._e?Pe\[%"]>CGkBXSbSX8p\$A@%b<p^&gXjiu9.RRkD_IjJhbpm(g"Qn[f[dA$aPL5I2nk8f4W;M"6XOm:T$V,@GSoK9/>Cli`V0JB\!KO?9/H6q`*KGU8oJ(M6$.Ou%'HCnh2b8'OMmuk4.TWb0J.(uC0cTt42tcNh5De6'LOegqdU/!PnS&/m(G(MNi',rh1Hk]Y?XgU^4P%P/(Kg\2[%iMW=MkE#NE]hj%/@J!d.$7KUP.4N2.$7K-mU@2>`K%Eo-8V#QZY5.4Xm5;-n+sG;HX8D<f."l'Q^bG#lLX^c_[="JhB';c?9gFr$Xuc&H@FlB(#o[Q%UF'@CGWsV3%%4;/ro!_>9P,,PG!YcodaSM&Lc>^XO/5KSq1WO#=sn'J(!o^#b"=9n6I)_cLSkD8\[EKLippng0hTrie5&Z>(gT?g%-)>MUdTT)+.n2mPQS4M%2g:c\P/8*IHk@E3Ru1(;():S*CcOUHPo[qKGY39'dKhCkaLOX\8upVKoGnAdJ=>gN9-inkRD=ClM4$+<%b$9^DoER/bGEPXb3gQc0%hVlJSui8L)KCJ``.d.%s$im`A!&4^anh,K5"SJS8n:NohTkrIZ3h?V]`Xic:e@d!MZ$>-9He!uqm&g$%SMPg+Qj/R-3`q5ZBQ^'.C@lks('KCf'uRhAfM[Uom*Fso3`.FeHN_.Z,2TbAG#\i/*5^bRSp.`iG^J,%X>eUbk3d,*I^oPfdjo4#%0;X)H.uI3k]tYT,W1Y6eZ=6f&KsRlu>pE:@PRI>nX`aKGY8Dt;obiT"Fgc`=DP3M['&WT5?%ZqbOkE?'$FpnNoX^$T'Uj?UW6:fL%.]-UVXV9";9uIIYPga#X&_\I\J6H/L5L_6W@%&:*`34b:YjF:=P%QksqkSO(!n4OmRFB(PUk3WcJ^.9N9N_^<is=g7I*.gT(3m+1%b[Z?OW&h#bjBT$"&='[\P3p"A;mogb-(rD*Y\MFIHm?Bqc'1>0aI5Z.cce84pY_7h3q(8f%(0a"[eL:'m]``*?(K<g<+`Dr1Hp54%A.mm<qsEAS_qdn55Ro'@@iuhB(i?)`8Le/JGDB-+?<(Vae@[jefiGM!4!k[8D6N(od"C.jGa!-N=SLgU`kB[Or.!a5[h+U0*;>>9%VcIpP`HT3<#>pH6cD"9)j'E8UE9:Yc7*OLIMh1]4d1[.nPXl\9JT(QBaC%c$IjDuAk-XnRHRXjrphVL>H^3p%n:^jL"ZD-3W/It&%(6jJL]KE09Jno'GRY^;=kJ)2,\ajl&LAl6b;DM7hJcJuejg`H1rBcceK2b=M.g%<]-01bNTe/^-^]:P9Ys>$rabGnuPj96/=rMEN%l;0od)57V+QJj7e'e,)Ufn0>bG5J1e_JA`\<3*6PAl3?TiUUe3Z`#b;OE*^*[HK,p=E$^OTqiWGafHrI^eq0^a'1<np%BjtU_.[\%jI!r;=80RO%St;;'2&)0'9=?D!OV"L>/H+*d=g!fLum%AX)@"+J\$Lo*:]Z2eoa=h2E:5d!o(8s4!Z'T#RZ&Rjc8o^&@q?%24m\O%-i5#A+7h@Qc^=<Zho`1;=WFc=eDV[f<(KgmT[X@2oqTZt%A+)0V!s-0"!.^<e^U>\Q3dQV/lku(k(7thqKs_@5n?BNVdMuV<M7h\%C-tTi;\^^c]l$FKC8q>8BLgZUJsr])M:[`l&p0+D_uXBW_s415>.]E*!.-oFW]hGbe8*<=[W[EQ`ms*HeCmbs30C8+:uR'C.,g6H%.cI1DJ0dGF!7(_Hc_E\>0YUsIRRl-R>Jc5%O!R-j\@IL3PuJK0+em*JNE0.ZB*HdOljP"[?"@_XYlrFG&h6@XMEke"dMQ#4b190<%<MeC!NP67s[g!aCZLHl]Ga)X27e1dY-hG>4a_ps<&*EhG=d%JY^?tK'I"hc"b%K(Q0,r(A(c]dqiX]oq5"!om)uFA@/;EBU[1])4%gr5"(QlGQ50$gCNQlGQ5'%\L%.%B-N-7,cX6`L2q6UJVf%i(`,bSLemcJ`Xj?K!'P+eMVe9Ct'OS[d8kgO=K3QMCrlgr15hXI;^W%j>5j`-6(l!8DG^rDQ.3"9Q,Ab@-`r':+5#jen$*5V'\_]K@%=^pluOU$.MDTnTb/6nC!uO5_3jqnV'R]$);l1oJ(:(@nC6J[<h_6%D.WbpM%e[(4D+BjE\to9$6%Vm!(rUrCocYqLdS_rZfQ3VE[96pbG>c^$1>u;bG>c^M2Jpt7_'4B2Z\`f$'r>rm]LFdRI7(1*Qe-D%6G=cZWH*kVBkMLkQSIAY8e$aiG"_7/`'\\=TdZ?JYf'K%5+u&5@KtDs?j87p&1XR;1B8A@.$R?H>aO.?EOq":T>Zmb+Qj`8B9["0%-/=^&Du>L>Yqf1CnqFl.M&='[Y$@MBl)D#^7.]6%I+V)t@9AZ:-M]Wig8,aq<n_^JXtnhKB_6.E>\1L?aO@b@MlTN1Lk#!X6W'(i%j6>/tbc.lLjaag_F9=%DS7(X)f=<9LL>H*QCqE2[.J)V46W#[k."Z#@e"J/oSgl7FU&a<%-6<A7,/L_fGgDI"Uem];i'&X`"S(gc%=-_dc6b^?Z?7HbU<KV)G3/9?%I&0E6<toXhkan.eM20JMj-8t$X].H8ah9V48^FPQkN+Y3(&'><0,kEjd:bFoL1KnL-lU>7WQ;OD%:_ZVH$Lr^SV/Wf:`5C;t.7'09_\\(Fr5ul"I_>mchj8LcB'K?12,auVj=6=R6]`[q=Z5o;9b@U_bk6/dYkpTcl2:91kMIAQaQa4$%@9!.siT%;hq89tJH=l1>KUC,+(8^-$,A(FaEN`'tkUjU3A&!5I3"@)i@EZKj9!=`Oq08UO[olkQLuUbUhlNng`,UUE4seP&rj+Z+%dJdWR1I[I,i9$M.pk+W&G1-XtQY4JJ!K!TrqXn\r<b]Pj%%:fdP)9;.:HobbA$fYeX5m[$[iCL1LTHoFP2aX%5`n:phd4IDK1P!T%I!d,,%q[Pm:N%7VASG\4-2I=S<ks2A/"gtSTdLnpFg;(cgX_5l\,l3!J-C<f,H_mG**uu[d>0<[g@&2kQ])%_NO[tOU#_A#5G3aB%lT\c;`tIpt,/aRsZ:I1+94YfS<K9+c;t>LMM<c;&G^3K]5kJ>X@B#Mb5dSQM.A<YZrmK?%g-u53V9=K?HU?I[fgB"(a@Y6#arZ.f%,T$)2;td/1%W<q1O!n-j19T-@@OjEf#uVDMX`=A=Z/==;"':)d$=%a5igfb94sX?+fjgh1h3+?D[A+)s@u6d6_44bB:i#]*QH=nI%4LbKp!F)\3[C6FE5Z(SY&G]iKnq]+?cJR8ee`7t"S3.f:EI"tPa^M"9Y[''(][EPaD22YKh/&3DNOHadfh.AsNOFJjHeiq/7uarE%bhKHa:C\Ud#Gj,'M0!\)aak9,APa&a-EHL["e^O_etH1aD?8)TAir)4SBQ\SpU)f8>!&-&FQ:Z`fn*7"jool,`iL*84<T(D&7^!s%mZLE6K[:*9iT:WSDX8SR,"KV*.\'5a9D]>IXXc.L"bi\GEqGg>h5Fa*Q7>f0(GQTBk%#2O8OXS`<p00G/bc.0Yp;)9;dtW`O<Wms%2C#)d$7W@=l\<=l;lbf6fsR!110W>\E@C<F&lV9Rb-88J7tj/lVrtOQT@HcUGAPm2U)7Hi0u[*_+dJ!e[]A&gWh<mr.=7_GQm]::%:2,Dp,RVn.0ZAFRbqNJsoGg^&Y/m,F=<ItBCZ+-"\uOa^I/OCdEp]]X+i]<&a:o,DZ;"3H6$uKRR2%RuqMGL&'*>o)L*P7pj1e^t%\""1P7EpQJ/)\luorN]5Y)[&*#:aO;8[NGU9u`\:NW5rYJ3h4Y!Ne3uQVV*p9KH"kN7F1(d-nj#h6-n"5=Ps3L'bE=I%gHD<+%K!%iq)+UVHQZf#PfNtj;_k`V%C^H\1<3k6><mJ2TeE>MUZ[k^c))D;)@%Jm:MS$s,B]T/M^nf>)ird7Qo-]?9L%IhI\W"D.kH$YjFYm%&n8ZZcHaR_.W<`7Ruo-0F*j%*<9KNE*m8B`4.OetMgK@GLf!246S2u[H"Eh:K1`C?R6).s8@$((CQ+3Fl[if:;[Y$PGRKd7A<K5i%j=M\],U>b$%(=utCkV-/AjSaL1/qE$[oSehYTt,#NVmp-eM(*MQW%Y%Ue3'>OQ\p4lk0at,_L>aDDNFY+W3&-]]$/4hX>ub\m4_J%&^.JVCFEjQfhS9+dKgc\h%6H2mlo2.)FENf%GYMTLWX'CnBrk,*tReP7afs`*b%Lo;):r1p[*ie?^0m2UaFS^%uSmT2QI-AdY#+n%S(<62ks:1(Z;F=ETeMoL`(GNHjdOPX4p>p3e'be-9X!7XS#4poW\q$V'Z<K:qUX,K)X0PqFl+`-TeEl99dltmo9mgb>^opl&Sg0R%A8u^?6"Ad\klk*[_'HpLMI%s!^q)DVU7h'Z8hC`7\2WY'.T22]%EVc`CY;lD5ac.ZbPQI'!Ql[?e9g"L/jPh8+?."<B2K,[5alMQ%BK0uIeW:3&4'h/'R`;#G3l(/Gj#fhm&]l`Jf=-I>Cf2812TrCk84@5g_DlK04(%"UkGK-mCcrrcerqYh[F,k0QE<XXGG;]G902G4%+b0!$9?J;$e9[6W;\1Uk]pbf@cCWAKAfheo!H5M"S',<:jS[`bLCHCG2kGF7l.FFIo4qq[k/*9gh[3rJ\?M,%e*Ouk-J%k2On93j%1A&>D.2G?M0NmC(=G,m@0Bm<ToYBLiRIM0WDpoC?mp4d8VGS7-8ES%=)d>2>'3GX^^i%-N.N;0^IV_(]=4qgbXU3ae\B;f)QY4b_%=!Qa^BLfLJEGba"S/Y8&IG[]Sf&[AnrBA4C7=&%<@6>.moPVY-.T6^lr;I%`Tf.iW<1f,0U#-4ko*Hirdl[j&ieu@GIWG^XGe/,X%V&NMRjV[%P]7HDG6G_(uhd]HJG.+P;@r9Ppp@Wnu]Ddk<Fp0/Ip^4kEU2*"GRUDPEoI4j%nV_snq2uPg3$hSqFt18dNU/Kbc$ADP%g!ee7P0L<'/!:=C5f+"(r5!YUTo:,L"[VkS$$*^ZA@5@UDAo<#b0sRWU_$KQ+-!%sE_8+s)\@n/`OuU.op@.1jJn+=9TLET:A083%AIjLD?[[D?)=5POBJb6T,4tPnPGl9JQ2lFd(*t'm"T$2H)#*m=(D*Z5854V5$49iBq3^[q4'W:(+.G!YMpK#Z>_GIsO`9hjH(3u[%Ie&$c>eMUgONRjiG@7=A=n+d,/3eY@G*a!e1nsOC&2(^)ie%V>1!5tn*i`cR;Y)j/aL+o:nN\gLXV!jQ5l`P)?U5qYI^m1B0AsZ(%90U5?F>"4"09>5/hr1-Y(r#ls=Zc5W?YV(Z?bs:.K8MEJ-hDkE'/HqKg<d2d1l=W#XTaTd])/,og>D6Ga\GiP7$jrgq#'il^IbFT%F*:m-3QgN\EddVA:]Bjch\<"Q8pe1"r+Rt_0f41GKdQ;UYI4CX(Yq9q[I[1CiLddUc6#2KPL&:BKU9H2e[>&BN_qLF<`Sq@?[VOg%#;:S?NtMEXI^/1i?[l8Xj4UVG>e'N7*U?ZVTc\da+*P7UKfp^]aR[rTIe?]T%K:oa2soLOJU;%gm,Ip1Q27@n:[L(_Gl0M%?cSq:%Yrbr_X\[#ff#F7Cf-cb>?[Z7>g*bM/SHig;TBY2(-Y#]qr\K%]9ec:MgHWFFB:Qb&WTNZ?^u*[8chqA(0].-fhP+ZA]DHkhAH/3%%2F%%0I[M[]p)3j]e'S+\5J7#e?ZOoVs+*np$fC_BN5U5@m(AJegYh"rs5EQ4amH/,b+!n#%hd=cbjm?SpmW?l0BItkVk="fNUQoD%O5KnTDP1?dkuh[>hP-R&\Wop`[7Q07#Mka(rKpgMn,C('*p%.[itA\Fr8d7ks7F^:5Q:9c^\bphO'd/(bstRDqkgdiIf/.PYC68p%8,r;1s*XP*-boWXr931e*l%@Ba`lY<rgRhlq!(AarT(kW*kstb9V.P-l.t@e\_h7&Tjc0Gs&i_/iu;?Rqcb/TqOcn_YH7=^ch]T7%p!emq^@ColVk7]kig69`p.%?N:VH8p5I@&3rLXTr4ob=Nml^9[>OT9%e;NH@#;u<5C2RPL#1A%hkNVp?b:ikk[86?h^%lX3,k@,H%G@1.:O8e6&5HK?_V7c?h:ENp?jQGLZJ+2\UIr93jpY**jqlSc84$O15`[G?/.u/_jrPr]G6V+WBs4;Tn^$tLZs.C\;VsceAb_mQj%"nMC@n;hKOp#:2o:Kjp9rr,jBro$YV4S@^Ss8'p:T)\1Fe_>Odr!Mu"$@X_)L7OCt[+b6O,u#G/j'+a+ZrE#0h=cH6W/%lYjNDkE%Iu(?'#F`Slrqa[u\@KR:aaW=T*3eof57F3)h>a2KiUe;=n)u:\RAo0An<moqOrn"VDJG_knGZ'6b7EKu6UUj.qo6++=6-:2*i:$V%]n3F-;tIMH,1s'Bb--<Xq7/5L[9nE#1][!R!dqK--a+Uf\8loo`s-:EkIEHqrEY2<b?R]K4tsE0>Y"eSbnnD#j)b#qIW@PI,=S0J%T=f"`S>:$%p^mGr4`];kQ]J+]iL^#%_m<V"rp7lGBRhfp\'*1nDgq?XZiBk"hl#(TbaU6)Ua>_XAC?W]ec2>?.c5\qkO6gI?f'gj%p"J;pqJ:*@Fn4"BH&aPmI.C8cnop\c"2id'`kcqIQ!So\UfM(WT`+9Paii,tgU%geIt.1edDNHN5PnKL4Ti+H^HasU'DV:YGj9uq%^\r(0TDdBmc^s"/<o6aXcN-2DqAas64GCU@+8c;RPINt-4<lq0Ie?k$MpsracX-DTF@r1g:+=Cu:S#q+I=_Xt%JPkN4S9f'/C;-*%(N?/7:L:iRHLcjc5/W`YlVINL_Fr58.KZc(?=![-!JU^)Wq&Ang6c)\l,2N4gTRtuh,d2=%q!+U#9mtL?@MZ'\#R4?ers28jlK8H%ecNP,[$/Vthtp'@f'nt"UZX=\e<PSK_CrYc[ieqbIimS4Yn]lL]peZ]/@,Z06$[(dHc\^2?i.\:&=<(Wcg\)hp3co3A\E'k@ZQl%%H#;WOjbM:h04[k,p<6mUK:a\)TG7j\^&AT"q!Mi[I/;l)5Q14YT0,'YWT&<Hb:gS`Y7dC7H)CSbNs;qqo[Tk2rnc75'aMMPqVhKS%^@u/Y@:+BMFZZ]Ld)QACngj74O'rFr%rgk<0?>[=IL>uH^Bj_iVbd<]j,[DuqXVhE`YT(#7t:.u[0[:_*M33UHkoLdEBO9l2p\t,%YP8h0n/hMs<Vk[DIsUiZ;qY%8"<%(6fACW$C-p?us6/_1^@Th:5%n<No<5Qon>6!'-hu/sc[>U+Ii8JXgYVH<q#'/:[f!i5H$]af%>7g`?MuNFjDj_t;robkoR\,Rp_hZ]1M7rZ5-Vo3<4FZAsXXJ\m$S3Y>IHEIqHi'/3Op\BkC?Fc"Qn@8@G^h=IpUbpo,/C,Vm*Fi]%B^(omiK**H;@)1MUCa#DqW4W(/O^5BN$<f%r,EDOD#ScYhW/MsI/Ba)IOp3BgsbNtII"jY">#F!^lN"Y!k]lUXq8>?RCrKj5;`f,%WUSMHI/Su9#N(!p-_KperOlinpupsK#]KX]_cQj'>q(G^(Uri6%-PAKV$Kr8H7@,mdd5o>dh`i#p!GRFQ]$cS^]*cV`;t\[qr053%/cXV^(\+uLL\^4]kR0TS%qVLF^L"EkY^D^ce&D&'?Ms],JIZqh!eu%4s&_29IHejuWKpVc]uaX"`V\OI>8LY^!A%H(j7gmt,@<Cc%+8n,=Zl8*,E)AiHmN5*>pRcmU[Z]FUpju9Def8&l!boHJ^Inac+7jtEN=T@pd;\#nnL%OQ#B5Y*35?1(1+sC9B"mJ5al!*:"\pcO%+%?"7R_0HOp817`J,ROUDgZKQQKbHrrSgcUQcZOUXIa"HfD`r'4'8N]ok\i"jZ+bmD"kGMWBon>f\\0GfAD)Q,0tK5F<NcbGfRPJ%_g24,07As4@t)I!(N4]g4&>jLCqT;tCI[0c03;l7R?B4j#(FVD<;bnWVuO"Tr\o>8e)Qs%j=fr\[pR<3raROcrU#O#HME90ptqt;%YFk+sClr]\,2-\bpO6`3`';`V0:oGps"T!*qU=oV)#14oa,G6R4Pe#pD>a)T)Y**>!5:Y:IQTBE&)WIuZd7Q3Ku[BG,Upr-`c'f]%_`.']qCc5Op%o9jLT`l*"%b9Z_nP[<^0^BJBD&@h#Q9G@k9#`IBaYS<r?&a5s7Cd>W;k,+q1h1as*+EsAV^T_<Gch:Z$2i9N>V[d%*U80ti5>QC"-+&QdkinkDVl;Ddm(,pl?qXHDo7)(lg4L-^O%"op0W)Qg>9f8qNB87Dt.(VHbJ@.pt$lQ_T$Odn=T(@\,Z:W](ON-%`#HJfoP'ofGqm*-o5?;-e+EL"\[T?JVha.mpYDJ>p-0'm;na-(ibjsXofq<)pR&V`g<3u!_W#JDI.5*<rk5pEg,h27qL.8q'oFZW%heh3:f)Eq:]];k.^W7dEQ(>sFk8C8NIMLB?s-'YH*5)4.>9EGUs5T03UIWb1NpqJ5h1[OF2!D`)qkl[RJ7l#mYTO0"@;;Y3gMuq/%9Vt!nYJ0dikOCq*?djr.k2<`B8q$ZYn+B,'B/.a_IX6F+qH+1&i4W33Gu0fa?u8FMLiE2*`buC2bU_i*ro!_cIt7o\Dt-9m#\fm,%I=Dg.]75BAq;H,^O+7#_T>'mdCX>fNIK,&c3cKE4>AO8Sq0W'%cf5@d*0L*`s*Nj)H[B23iE&8=pqqBViR-+M2tG6aT7-]O0SmL?%hFG?X_oKe&s813AO6gBQT5"=XJ*-U[](4Lmf`!)s4b!"d)74g.T7)*7r93BP4o+NDT=t)VhgY9S:Hnd9e,Ojo&to!U3o5;Ve]0=+%-JMlbgM]9)VPV<1W`cg'SqZis?aUUIlB-Aih=c?erV*)5nUK]kgQ)aji.m@%-`.dZDu5TFC&da2O3L%j-'\?&^E6\OpoVTOp^cuk%6h'X>,G46gbf)aU/j*[6r8[C2Xm*[?3jE2!R+gIZVq>,OgH.=lm9^sKqku]-k1RfDrKJ(>TQFDPc/U1UX96X-/U-ts+.OFdq=04^%rD3</QQAA:kHdrJrEfT_I+4&N^E86ODde+Pqs[HlVpAX@6"ftTZi7df,:P4Pj`7TXOrSOX.=GjUi6jt`Z-8MqV\C<n554L&PF$bE%.ll\WS,";lbsR?T'q<Z11LC5qibod99O*HIm,k&-CbD_@T)J0)I$C<eR+f9Z3IRHt7k&O4Ku(LaUMPGOcc\t=&'6E,AS3JG6Kbui%p1<h.reYnLY.Z&3'm!\B;gAs9k@LkNRhu+NbDS=A_3CtVZ,,S8F?8Mp@UD#Hs%n-KjMg8:A@#3[ktL2-ka\!U^2.-B5;=fT[(!t!%Q']cq?A-UL)=5Q/`V^D@'&A0n7b+htWOrM-o.nsbb_rZ33%oc:drKU-jdkN5e(NnkTU\r0-n_nd395j&g(,QS;Gsl10IXZ_m2;4u%[_H_JZt1cO0@Q]d?b@9S]/#\sKD!3_N![rN)jV^YZfROufGAH>s/q;\s'T8>d$uh!3b-'JA8J^PZ5NQ!%HQE1Z"RW?@o=319P&%G%lkr`f?T)D$]X@[L1?M5F/qR.B';dQD/4[]lb:f?i0A^gM*DUP,YeR*n*rSG]WE%NKoqOlGd,>"+N#V+K<jO$je\>ReKZ^Ch0C$]k%7a@,$!f_O$C0DQd6gH4bYV/!IG&.i@)*>JER3bO!6e>_?RtbX0@F7ep0J[_\fcpm]3j`Zc60%NDUg\#JUq&8sSn1"K!^;q(7;X!-%!,P)n=k22'#!4^lR2A#u9$@>c<)L'M`GNsb)!acD5#dlk@)k/OS[$'ONM4_S[Z3Y?NDQ$$$#cQZ-6LB<a!N7+Fb_moZ\%e4XM[!9%4iEd/bPL/>@)k/SS[$'O%Ai!7aI;h5d%?V%7+Oa^Z"'8f_8tSpL/P7LG1fi(CPYl(FE43UDVn"'LW8]5VI_I)?h6]S9:44OXg&!r%[\@PY."`P0[*6aiHOZh0CZ`r$eFjbZf(J8OlVk9N2NqEA*hN\AC<Bohq(#4<H"O.:bSn+!Y)u<o.<H'+&mFgKAQN:I7+eb=9kWh_%:1_k(9"Kn#H)TS`Z4HTH2+uEP]to_GC7'.)G:H5&A_VoeW!$%7PBjke3*QVL[Ya7-*8Y?WKdahKS5Z,B1JiKc]%5CmfWe#k`7X+@%MUEnM>*%5`cRAjR:dKD,DS6@;7EFiJVPZ0CGc.8m>(o&&"#\9l+dsn'0uQ-*Yt<3Yf]/N[dKmR/@8"jclNJ2*=L^3nFg,AFR*Ne3%NJ:?PN[qW$g*[K+h.n%@l:ElsUkIP8B#ceYSWUf/%B\P^m(2%uU:s%A\irpRfHb$?jR>o493=9/>I?sXjWq^?IJFm(]<lZJmd;@-%J8ldfb(EmooMAJ`Ec.uTJW=#.3[/cl&k\h<HuXeT@@H.P'iBrmdkWuP'/C,E]+Im-D+PtQQC<)D/ZX[g1SJ<F%RKIL:-o8o^:;7m%8gUc4$'lWKX,pR'kh)_"&A,Q<:]`Z-+mZ)7D=rq`,3uo]kdXF15j[o664'#iUePN>7S6($j6sFa2dqeXQOlILm7otCpX'H#7"'X7%?3[!HDsckLN_Mj-Yd6CljZ\[<"q32i^Ar+Rp+.++[[kX&qh,BrrpDTi"_\g,kdKo//Yq,>'[gjs[VY>=a#5Nn]#QlIXl889N[>@W%%LX`+>jYq>-8dS(O*<'W_tL5;$qLHI!qVMLlq4^=*S]'PB";Dk<RD_^Lbao\TYllGfJg2jq+7YW44pf4c!]W&:.8mlC/\2/fO;kJ%EK6c`NOON\S((,j4l3.dNE"]SZb^fH_nW"ib17=efWe.FBC,.`A^Z+&7hB6Nj@S#lTB/J\o8_%TD/,G\O*<'G_km?M6fD1B/[9kl%UCV7HA!<@<Z,\p@V%I2Uau37om/`&aHW/^-a#5fGZ,\p@V,:F66-?pTK$]6`GUGYV][hiVTq`n"fI!IOG'GAi9/LRilUL)!AG?M&%kb_J;@)m\!B#Y=!1hMI"c&ag0N+])4K#kBh0b8GDPL:=1][9O_c:TOpH660_ZA3lI5$gJXg/DG#2CX9@_]'&]@%utm!W$77@^hS4%6RcTNA!<.FOi&,t=b5`m8Cg,r+[\?6U:-pCjObfS1RTArqObHfdU-K$hnZRLrdr,2^P8bFA[#[.OA=HaNPb%Sk;#TX"VQX-Ml=Z+%S$6CdOGV*?aAl_NB[rHj[]XRC(2<$=`g,!"Yt[f&m-dD1$0:/PQVAn/NVH1B7+l)/&NY(al%n0O8LOT]_T8it00.GhUCGW\+dBg'%qm9%Q*SuW$M<*\.2V;Z`m9bea@2ko4,ja/1VDIpjV_Vu)<ios_l';Ed\PqfUiA=G"0u<XUdBQCRZgR9W6Rt,PF<.dDD&AO*A7:g7%*UL:3b`&(FM.d4UUo;0u[EpYPD'YB[mN,KH`fo)\:!@#+nP2Men8Oq_><>E@kKO!,><=l(Bpk=ss)0`Y!Y<mSf>@_-cn,"c[8nHk%/g27Wf`+E+\`^diLr,5UCR>0mbG]/nFe$G1@s2[OdYSD3D`!]1Mn*rc5RhlUf/Tq<>(uBL*UMFSARb#r:.8m(EU(WMV)GrFCTIe'%Ho6^"gSAr2md;?b!"YYe[LI<kFp?]o`["dkCTQO]_W]Vt7>MAkD\SFclYYmdOa7AB[GA4Nf2r@n3pmY:&A,Q<ciPnO&QslPK`ZU_%N+CMKc_R=GQ]dBMh49370`>R#4^`*9)o[-r6jB2I+ic2Y*LYtI$Hg,aAZ,fL[i;H3<[!"T#p$J]l%GV`#q5O1Jg=3/4jZ*I#XLjq%/&dO/>ri,1JFl;t$/"UA*M(IgD>pX'b&"tUNfIC;"L5R##pmB^<g&FP[^)1LQabb$1bb>2#<V@;16@HHD`![[%Ll:e[:'6Ifo62O%7+^(##<TA.l&7d^W@/2s3KeF"<kHa_!u>ugfd/`4Yt[r*1)@Q#d2L;`Y3Zh9poWO)dBR`-2&KcBI;0H@O*<'WUD6m42Q77IR21f$%Zbb>2NbrM8,EI$u>/SFeJnq-K$k'/5os5lcY8l&od"Vlh[](.'a+ZH%9#D@rU#9=[@>T_P7G4MN#<OiCR2C:`;c+HM/15^\6OR_F%97/Fb2?G^idik8&gXL>b*q*&TNBgu(dS2'PY'7^eDCWnRB?)>NS[#r1K(AB)<*YE/ln^JeC_B`TWZ1<WVPH$AGc.8mG^)["`^*7$%>"?4@.;)Rf40,SqS!qW5^ilKI25CKE@&RQAL2'6r3ks&OG&.gJR*54B>/AA(7\^`fn<.4G_Qg1`=G"bW9i>Rm%due4$'pOS:5\I&%F<=7GeWi8LYt]tWMs&csP?B@?_]"T;#27eiGkBS?Z-f0\&!AOPZ[X%BO=9h'9De3@c0[S0XCCM;m+<Y\1Dq<@2.d"5c@B_U^hj&\%@Z*g`-JC6-Yt[i'1-W9abR.KrZ+,<S84%#J.i`%[&VYnO(1tTF-(U15X2=5\pg,P[HBjrbem;?[i<>NW)=6"OA7Foq7RTm/mQEVW%>=fa7Km#$J_ke/Xa#5N%3Ie6+'kCU\_2*Mmg:AQ_Ga==#"0]%@PE_K_+Q]Vs'LJ'P(QCKB+]Jiu&u+]2]gp_[9hT-cnP2Mei%tZf%_oT\,`JKrq)3-++41;-QN'6$s-k-^1>,"\08S[Sa3Ed#2/Dso6fWe#m`7X+@b+rHM:LDZU)`9@6EZ;4d<jpl7_2`AIR!"I6.S@Ud%%K\/iYmpC<)Qe`pjr/jP^k3Z^e9&\Omo5N@HQS#`^ck*XYU_T8EeNPIcAkV6-H7+q<4#-P"m99L@qii*c<],^HB5:?S!q1'++L&[%22nW\\b;.nF'W"P'5;lrZ%U:Q_N&JJ"s]1Q.S@SnR>PhqkP]t_?ihk=8WqAZ9kl#p*q*'m7S,?[l<ohY1Hm\5"Gu3m'^-JB41;-Q%N'6$s-k5Te_q@_NLSu))Yr!g8%-L9:*S](cf)+u='r@%FFQj\QfR]uXp)T;Oc9M[smLqB4G'GC/-(M%T=VtlVU:b5O@>:e(EpQ]P%&NRH:d-b`hU(J@9R\AUM=Z*`HcuGP:M/Z8e7R?k5N\@BC=G`=lU>CZ#Na4CC8MBp05e530Ad<1MX\>FS2NH%VC@LP%FDMR6KY?1j%.0&'A-.R\ILISVFFd0n=S(,ij98F_TgtkRMJ_&d1?.RBoB`iGqnlhPOn)UuSa$B"X:-c@6?=rG<)b/=LZrEKjZ`muu#<FaL&]3Dm%'XW@&8lq"L'hU:e2J-)mNMX&:SK7GRR1T2+e'JFKN83E9&tkY9C&fa6G'%P!1)Ti!dngCNG$PsDZq`tFE!h.Cb^e5S#<R*cl%gA:%M'r[sANdlH.)un$T'"3I/A;9LfWe#l`7X+@MUEopN\'3kP?-#;Y%WtL><G#"m+A241\Q'kU,53oK58@lNWCPu6)g+35b4.bNbrMl%@ukg`>(_-UU`>OBRYjh@N,u.m*LkR&N;K&&.U'a2R@-Na1J'F*Iuo714';CEm+A1I0Z-W(<CLWS.PjW(%<8&e!&R066#*L<PZVS=%2Dq&1a#b$4&W.[QY%$Y22G]c-JliT28a5ToUh4*&nP2MeQmD:\N>b/.ficG&a`1e12DLc-_`Nu`+pHX*CgkiB)!k>$ko:fL99@i3%9hK'bmm^b!i/S\3#$VY)P!l\eFkgBF-7'=hT&)n&$.q5CC0S0@eZZ4/_Qg,C=PY_o[OE)Q*8YAQ$=:0?=;Yqk?c#A:3dT@RK%676%NbqBL,C`dKiBL*c;Cmb`d!tWarNo2LfeV3b8OmFLhi5Q"d,'3`KpAjs@&:2FUhX9PVR'd%P0V_=<FQ`J@>LcpOVL61],So,PeiAs%69:=5ql2@IkKXZrqGq`.q#?'12ql$$ONLtO-6X&g]rd3I;R!=))XK+B.T;MCg??^fa#5B!nb9Xf."P9mKNkH[rt_R#]Cm2%$&VL1%Yt[i'm.!h>BlNg&Pb!Xr*NapW13O9k476$'1[/l7W$i)gAW"pOYf7>nK+9GI?mV,TNbrMl@ukg`8g=LX].sPBBiSjuZjRXO`DU5i%Cf3&Dp3<L02/F1Vp=NT"jtbC6^Th2#^NOd:;_o9bHYufiL63\g#"BP_.!A?\A?@L^#<TAn)2p]7W@3a*>jBH4NYoP<HgbZaBOfFU%djaY9Uh4*&nP2Mei)6-pgLM]f5]oQem(BBO*S](c`ZFSJPfD?s%..%f>GEn'n<E)='/k!;A"/q4A:sE3MUDd5%crL0"rPn,e-me(%!'MT9a!NYW@ukg`>/PZh3Xq$0/C>AOA7^tA5fYc;K9=&5&LC:H*l85\,9ffX"KFsq(CGJ(9TECN"L59p!Th%T-ZU"4-37u.R%oKQ%?tGG[2B@FSZTA3L*g_CFeA?MQcqGfc!0u!SYt5*4G'2tS3DWtinX2YC;%]Z\MkbYXf':kIN_M9^YdZ[tmGFA+ME=HT9\h$-9dXt&%ga?SujQoW,\];Ks,h`G=fRC^XGpoDE24pOOP7So(m7otCa&>g/R]uUBFV%'T]Gett[+O':98OebGGh,K\EP?rehI<]L,"F;Sd#[m%6PCs9fVE(f]eaV-;&XfbNg'ur)]HsI99(U2S=L\Te9!$ml>BS.7c2:">!%c##)M`4\?$iC)K_6t*S]'PAp_Y&.S:qO'"YBf`Z#\Q%6P*gq?iVkHfVE+gm.!h>BlMN1b4_OW>8#om%M"ML_,<s>a#5fGp!1?Q7;;6'.8inFV?C;QK<_/0B;7LL2Q<+3*4i^Y;&\gB(jYfj%+tL7[2gk_-crC^%CfAe#Hb<;))V0m1)]+&@f[MBr2ANeq_N&JJ"s]1Q.S@V"E!bY^Z0d8t;h68S%+KMUNYckT'@Rh;n%WTcKp3oi%MbQ-HN3fn+]J82pdb1lsbJ`&nSVkjO6%V,)nQpmOTf91o6,B'@m7?L.fI!IOEd4@Q'c_-9!?)Vn$p?/+j+%FQL0j*1\4qlnjRGu6%CD\jl*?=AMRUYojN+Y7641;++N',sr.#h=S]G-<M)JU#!2^40D)4_f&Ui])oDA4Gt+f<mL@@p,Ec/I69BVBi'SK6I<FN+fo'!m,Y%]W2+,KpKBf>*>i<SB>6[-7'=8LGp,D_=AabN7A*8,K*JRL0c=mJ3l+Dm+<Xr0QME50e;<_CmThc2On4_3(?2c+^]pDS!6U*rS:"<%!^<*9=,.+oZiSd!!-sB8dFkd!8S@DZ.PV>#DJb8mL*Lc4eJQGFJlp0,Y[a/ecIh0:Lm%!!2h63j]R:a-Am\[XO61Y0C_ANYp3<L0%22kfB04Fpk:dc2!:c^\HW>UXWhPho_R/?-h.4B5FZpX%0;"=`4pn%@,L9:-I\SB#_@Td;F3ecT"eh!,k*[rlh_\,:%6tHX:6VLUg%dk]c8R^=@Dk30j9KYm!7elg@c0GS@VQI'oRl/TTfMG:Mi%LO_D<gQ[6ocDfO5%pcFR^1.V:h)(&#^9mD/u7,<a-,"?M@kHUku*Dc%0=P^G`Cp:JP\$Sq&_[lXiml#RdS\0+EWirlClZOo.)^#FM^?:^8f,Y_hI3WK\4ENB6osO0_F+<2/L<NIWEnMohRjU:T)\Am3-/ij%TmgBG-ltE@\r\[`3fu_QfVraCJ;ZJ<5tGq*m:Kj4oP>kDi[2:O0lsY<NA#P7B@t%86E#fJiZJrQ:3Ln21RRB".Mij-dk/,GH2OJ^%GhkoYaX#hU-aV@W%V>s98tAXFBfdA_b]Z)ST'a%[0jD%uAs-B",f4<*)Z`te]BA%)#acZg[BMjt:'FMu"(2-Fq)\\*hk"-DojWd,%iYTehf<!]S[I/XY=LOa;Otp"#"p_;=BKY@Gd=DS$KCNj^IR/kM[[';HG1IDda>tusH^ql*XD;:Y#b*eO8DE$69?YY2[A<2)g(M__%/=)$6H>,a:K=r*_P4;X=+i$J5N"0k4NT48M*VDN*9nh63PMWgYQ*u;GX>lcR1m*V<Ztlukr,&i#LA3oH_c5r]+gd-V@X>Jh2@agO%$?3k$.Y&CV7[3+%i]bMTVh[i@f^J9SU14f&;_2;^.j3!=d%Fc$bd8*V)rf/@M]lsZ$@(hRRktQ0%TBp/*QVu'O&?5sik-\qJ\"/S%Y&mt)4+oHB]':Ia9:32E(J>8XD(_,RREh,cY;+>TC5I:O!hM--M(NR5F_1l(/86PiM/du8g"Vd7%I8YZfo`kQ8@,:$);c*>@Mu-h%Qn0I]d20ul\EGQ2aj_9Q7,N3a--R$*p8j;@^qVc[#$huXj8<TP_1m]&^+87+&u<Y#MfQ*JNJ=GBA_Ch0Ml!=7*/gX&ji3J;:[#s<%_!OOE0d8\@OC@cN<>IBcr+P3.L5&FnT#4V%_DM+.;3!h^b=#_8AD-snQlF6"9_d-n61haHV4l$4@f526>[Z,jS]U4@O#8P$0f-t5%<ZZ'jQn8'AYWm\Ql^_@H6OMYtdT8Y9=u`$mZ#'Atj=Z`8E9q%j7o08@l_*_$^_r(ffRXJ.nZ"-P7en3=moS'tn>M0l40!4^`4aUA%EaICf8eW2&V2*I8`A/:U2hjIUM.N:`UD2[aJ0fuAE@R7E`4AG([e[(BW>=Ga@8Z1Xl-n&:PkN&<`R5NG@i;6eR4R*"Q[30+W.'7V%1XWKS7XORi+HNqoZBuNm7k%68CR!9=%8E='AVX25>$9-WK;FY)@YoZ?0:%@,HAL+8-o\\:RkVVhFs*R9p2^]k`i2q['C-Ppo3g&e%BEKh:>8o3;eqS&[W4nZN'CWhG/M5L3atgi0jC/uUKIBPHAGd3o_2M]5#QD,(AgrXpEIO-mB9Pfc"A2bhQ?0t&agA@D-3n9>eq(:%%0`SUa"rIr7cdn1VD?=bI(.KaI%HhdB-cW,bb+26F3Qb_1[XM],$_Wc>1UAhlZLiNMNOGW+l=q39G(<t'QJP2/F#]^2aK"i)%O]8q%eB3Dd%25P,h5J4WY,B7*79J,g]Q(/H[b?!F!G]57FUc8-j.&)26`Yi:C.p%Bgi^Uce@L9T%I\Wq"W-HCrpVPP7@EVR"%s#7V=SF>%BOJ>P7]J`s=IZ4t%+Z&9Oq$)1*be_9j`"\!9!(3Xf>+&>U?j!>*R_k04t65+0t=<BN^deWgb*uZ9N9UXLc[o50f4%+)5YCkJ&u,3%S4]nGf[+Tchh;HGW(&6N`(oXh<+2m>R;//3b)S\",<@RG/'T*+aJe9"ANCD7"AG;jV%E*F;Mp)9J\KdjW29?j51%g?/BY;D[ID,W%CkU?4Z>iiDn3)[W18!Sl#GR)/mZaOSna`ao*,Gltfa6Q70nj>7'4E:."sUrY6$3u2l8pYR3&([Q[r%\Sl@]Z<7g$saF#2hc@7kaJ%0#8,>8XS\>i.9=pjt,jFIRJl*dp*<,MJBDlW?R;28V_4l%0H!W'QtU7_b[<h3&(^q3@dn,C[bpm:i7N"jB7o.R9@&72UGdaeW+7?%(-B*.%$q,GF@B[_H99c1/Akn(Q+MmpG.Cb"@U5aON^Hl+72@04@#GY`.(g9u5gFA(Lo2W*bZR5$.Md3(/?/&rQ'H6"P=E^#BE8?J%/Z1[OdEKH?'!fAXAmOeClbmP)TQYpS\25GnnC0*"5(t$<Xu`I:2_e(#P+<F]^`I=FAlGD^N<Cd!*?2T6a:Oe)9T+R^_3<Nf%7V6:%5B!*)AmJN\$L.\;5CeQ!J7*n]<a96:A7C@YB\K](07Gd3QBYojgBX7Ca#Pe]PSb4\P.-9f&s]VmU!W)sg1;KF$Vm3DZH0u2iN7/T%EDIa>+MIgc</$G?mT!(tSert.h17tf2.?&:_lK/ldU)*>[cCj5Y_&>1%*upFG1[H9&5h3/JJqoU)(4bnIjHanRi&&"lOMK'XHSPF%$Im%LBqc9<W#YbD@MsS;9:Y*(OX4fA?jEup_rrQ*1Lk:(4P8#B7FVBuY@e\dRj\R&W'!bc8\d)Y*Mk=WE8JR^Vb38ccrm*_E!o!F%#I<\`cl&>kD5pUQ*=W/YJCgHf3mV6]Hr7;F,I2r&)XBL]6'G)T-,T;+0G:Y<>`q2dorF<.UKPE(`rZ>=:gM(F=]Sh]6IRtb4K4)d%gU-\b=E.b'dV5PmUj?XKXd+T7)Qi:\>oCu*UPbu22l5lc8>E)o:KaPmj42RSjTjOEkr]MFN%uOd7Odmc7@h>QE@R7E`4AF&AthQ&%Dof/r5j9KZV!TcGAg,Qof0EOM+cI4tP(apt$J^f=P!(O_<l+r]Kd(NA9&ODJOKc+D6-3<`D,?lga)=)U.LWrFJaS$Olp+Tk&3hOg%@O/(/#O2ZpXA+96JRM\b\^[oSQL>2tVoiP,9c[Bbgn6?a_*cdHU-%B;3$:m0q*:-1(sgk+]HY^km&Gt;/1jl"\6_lYoK7aSN-%CH%9<'?TjGA1Dq7a)9_+V<,ckXup1QtI,X"lH8N)ZFd2Li;r"W5NA$9Q<R>g/kh4YbM7AZT2PlPegR_<lAIm5C>GJ'KU(N%CZ62e7ag%6;M,/@D4O\nKqP)h&/e"@7HH4Q]j--mkA:>\[hfET*>s%]ODIdW]boX$FqsU$/R4iSf%2=Q#K5\_9#f[5i9I8jc/f/S+C#s)5ol=%K;:i#K,(mue*"OWA0n#teMH5>`(G<ZTj]8D;hiP$S/H/:=61jnq_IdEYb"P\-(`%1k(_Q?XMT7P3SfRT2CW-)Y1V*_p_^Qi78sOQ%N3*^&;eGNr/>*W[$lEf!m#5J&M3h``7YbhW=J\J9oKs_2nE_Sppm<\>?>^+lKkF?e)uu`s9b8$Xk:;3+aGR5qU*mr.6"]),\cNtZ%!+"ef37`4o3(3#BaYG3e@&B%T-Sh,;'m:_#3+4P>H=Cp1@of1'f.]W;@l6mMZ_1cAQ3EP%)2p+TCLSR4<f_O7U`!0@UuQH46DqFO%elKqa9c?2gY962V-Eo72]<.@[g24&N[?>+pF9><K\9uX@kqneSh%O:8;Kcbc>pH3FS\f5eS/XI2U6K4B.p,9RQPJp$FOZ!E<a[O]%fKgQm(1^&3`)rLnF'9Gs^_+C:dcdX$cEq^`.5N2Akc/%h>Nj98=jdJ8_FV_tF@eEtY"d'k0MQB3E1qc^E8tIQROglZK?Gl\ie#jg%9hf9enP2Me7%]4>U&)7FBh_WOV@H(]Y_1De-#V0kOgQoW*K5*A.ndH$`nFU!fVDB7$qM9G<2168pmtPuA7B8PWid&RKIe.(L2%67%!]rGOH`g!7`)mq3ZcO^:&l+no%/8=BVD77636Jek%%Rs2h^ZQ*Tm+`.7(&Zi&UnOpRKk!9XZ>$QDs^)d0pQFt5su0j`Jfg_3]\I/%G7n)paKQglg.$WMd+$)e)rsnXAf1#(j_1T2EtYNrTS*1$Y^9"5KLhG/F'0@e"P>p$F-j::j+E*Lg1ulE^%,p/'WcHs`Du.9)=H&e%6n/]'(7eu(6^Lbhd;0F4>IPQjX!</S?.L8oe(DNtqkOWG$QV/E8g3na&ukHXJtQP_:&nR8#8>:F\HMH\q2$Z?!dA:QKC]IDW]O^-%V*)#c;3J;3WUajc>Xe&E95fc,%2=!@Ve0Q-nP2MefI5q&iI41rl%)kr)hH/g%ORJRCM()QgJJ@[@'Etdfn$6_I+"PQM6XKi*is-r%1iuW=ehJc+g<Rj^a>23W*Dd0kEtX**qON`Y:"AQOG:&I)Q*RVcK;\!+))oIW7i5Y.5"5nqG&1&40q%sS;,J7Oa._k)m/WSh/3YR/%,>75@3J<t7XhaV3DIt.-XDr$]4(DtV/8UJg&dYbYO:3#dS/)E$]R!Q0Yt<0`aQ&89QEY?7@uUpOdO_9DNA?J"pD?7J(jQYLM5Z0o%"sXifB18.T&&pF!Z`]rm_+:M'\@!3C%lh'cB1*Y0&\9iYN_MiP`ma6T"m+X//kWqN`uZ\:@qT<dE!ZmpcS>RD[<+h)nN<^Elp*\2%/qWYd_f_p+-7.jsOrYU'+i-uq)=4k/`.Ze#NPmB`o?X4IZ!HlVWO/\Z.`DGe1Me^Pb:5s4J;`+jf!3Fi`R]9*F([9$4UH<h8XM&A%]c)#m\\jH%,/W3f1>&j'bf&/oSVkkR\RJBYeB8*>D[JlC`!RI*Yt[f&1@omgT`"ER0<*t+#:[]M8)7DS'2+jnU6AtE/l*$\dFF7J%-2X@`4;"!)7TF)&`r7-cZ(.ac:nJM$ot8<$R#RsQG3kC/W&qX*;%i8K']IUOPf,E-Q/T(=Lt.nE02P'hBLb-&J73Cu@0a(NbED4K%Z*m[SXD@;[B2EK:&o&[q<Q*F86cIW:Nbqr\@t/\@>/AmcRk3o-O1=#-F]10*UZ4Ne1Eq$e&mCs#)f4#&dfajpdL[$B9<Ei'V4g@+%_<k&s1>'*[7QT2iku80]dNk@<b(bS3FtL.o*46H^a\5YjNC>e"A"/e#aPi\GP"8Teis;DJXRn9M+-82-H+A\t]1L.uf\;t6j?M$a%#,spJ'=PZ-L80miV!;K7:k[,hUX\6?iY*2_'CG!K"="hM@R4:C&ll"@[&RmeO"NS2'G!p%/4:QEkh)_"&A,Q<:]bmMOCU.SHT%FJ%NHh[LTOX<$61"#764*.<I$+rgr"RlY:U54,R\8\),m1Ea3sd4K=%SKi)oa\91l.W3&Wn6Tn>o%J2Y*&6`TF)j)p6!*M0;U8B6&oa%&f*B>E7=kcNfMS@[ulkp1=cqYCf3&Dp3<L02"4+<;0F!FRn=?eV!JPNc'TO+e9&\Omo6ZKP?%u>HYTT27$Sp,#V6q^@)k/_K9=29%'s5m\DU?&8atsUe?onu_P7lP?eE+\d0Qo-JTtA\6<6pMf8[m37%1Oh7cCf)BX^?Ki_ej]Ai,Dl)K,r^r%*%n&2_&"KfV':BUSI8p%=c&@t]Q%T)-8dU>Bu_/-V.$Fk!.tc%/OX*EFkjuOG&FNoS!qXTj.2(U#_adY5/`t!cReE>J`H#5f1^]@BX9c&qt=(^kZh?#GO!22%#0GS^ei-Z'M]E-0'-;Cb#r:<*+m^>4\FKo,_HD@sQL6rbb(FgG>_j\;3#%IA_DF)"=3c#N-jZ+q;P#HrYBd::1^)BqalJ@kiZ$^]%-*7obQ8hc=Q>fon\Zs*-`YQbUe&;q0beXbtD2I;LMe.DB=Ci@q4`7[G.C-pU<p?t;g`#N3Q4>r>(JF3VS[m0_Dd^("6.eIEED:;!%@j]2k>q6FD1`W\O!Mqqm5a0;qfqlO+dR/_<Z*_O+=Q8nAZLkfdV(Ejp*.LtP,mKOG=N4;U9=RmoRSF*S<F79jHmFWHL$PQgQ9LNP%b9YugA8*5=?`]Po^4L6:Gu[C>)S/QG@`"LqkaB>:YqW"!ll_A"AGmRnN1QkH(,fs\BY/;,Q>(I/U)]`iQB&[DA_A-XC'iETI=KDf%)g>e[kke;E`gRi>PEp=1b,Zc@ZI!Q"Z)#p4eM?3upr$C/D_*Jg=3;.#9.lNu/f@eC*Ni&=QE=L]Q?]=j8Z]-Wht%/UVHD>pTGTgb%XZY7_0YC-feBh8#!RYk)PZA86*7MgPbk[0n.J:\9d.]J%_NcV4`mX^0Z)!e;D:rZ%qPodVK4lAD9:,Qca`i.aQ>g?-]ia8+hMYs>%mn-aBe\W+q0AfFFFM]d;Srsk4+Nq![>Wpo2d1asNK6</UGm+t^OmarKSE&2C?;=V>Pc9%1P9o(KENsWV<HUsgICU33S\s]$k[8ns%C7+)J)hqE=0-=LZU4'h8@B2\(\JPO?Y(e*>qJ)`,^Tc^M]fAOe+q,#:5H'.CXHi(h\j.^pF]mES!ZE\W<RsT1+&oT?@Yd*s<^VfT%V$u>>Jop&$QuoU/8QB=>pqHLAP3*febM[2:QD%4GJW$@i05e'(2-qh</W3u+2fq@BM2\=gKH9j>Xdc&Wf?CbSQ#^N$L+U(;!ArdP%$n?@3KiYVp*rn41i-1tKPJq$GM^@2eV_)mgls`OV+"+s".sr.#3&%r]EbHS,#^*4U%4ub0=$sIZ#.C2$M]lmeUbq'XP*8`(!od=$%?37pAa#,S(nl`GsTb-:`PfFf2JKuda6.E1QNSF'mdD[eJ2gdKY7<r_f9Y=KE^>j=?`6G_,9:Ne-M:&^aQEVId?7^)Ym:$rk+j8jo%=9e2NGCHau=UgO;GmY5FZ6\N>l4VbJ'Occ(0o41V.U(IqP_J&Z(9b]?,Ps$X*8*hb)XOZ2Q<(_rDX$B5cGe5[7a&c6,Om=N;80VZ%Bdn_s`R<.HBAii1?qYEHZnC]1QAhVF*lQ",1mRXM\d%'#"3Q?g_*G%QX"lH8o^mQ,Q>i=P]<T<I]YuXNQr-\GE86[A;.XH/]!2\9%oaOPRe4L<rPU5ZY97F:-fO%u;'7Egq%No3A!j&V%A-[CuT)&"(B#^Z=b0dDoCUC:tF_-SgdqE`4<CS=$L-B6]l*50//[Ijj;3j$G%?7eO#Me24XA)CNq-G#R^Z(t7dC)I\_PN"qq:_i=$&NPs"W-BrLM/i?)e\ShH^9res?-Z,"mNGWBaN,"&Z%oPedYN4W9_9ne9,#d6%V55h`ZAe1'$Q$tdGI:[,>8*7)QFI5,_Q4YC"kc_+I2InQnq[24;77.so$OIiZ%#E_&4G'jGKa,M9sRgf;Zb-C`QNHf=aK+H/A6G%%PGOrQ$&^*"T:%5nLX=P:&DH#H/1o_)^KTX^+VYh9-9I@;-*>#oA/KQ.0&2J5&S^4?L4kfuZh>K,5%@+Clr?#;Lp,ruL</)s@E3i)%Uk/,RBmE)'C2%Lu=OLS\>8gW5+NmkL'p.AtZESsD@X!;S[$ae:[Bd#>_ckZW!sQi!gG!<@5q*$F?j45#qNR6k#Gdb>@2p!Q`=f?g%]i_kQW8g.f?7_e-pD6J_+gY8tqNN!A]/pU9]PF"aJU`TEDU,)Z(mU36*Gd,@RC$\XQbq84eS&.=o=CuH:qcaa-&7Rb/0fS;P@^',%0T.5@kf#;T'N&EJnZ;4ip()7`.Ms'6kXjq;d2g2V)'q0cb-b7b2Yf;^&(O&_!sXVTX/qZEQ\0G]5PW>3iet!`&0e;am"-fj6Oq3n%)9)oOd9R2u%V1B.%EZt*T"Q+."G?mNWNZTc%$P?S/*m31.R$Z<4OhDDeqI,SE=a!AN--udGX^T1O@K*#0I9KSABD<s/=)#7I4gh:%i^@e=giEeh/"q'u"D=,0CgroQV*)#c_'+#B<URtQhmE+755Lnt*l%?g4FZkTV]U?Zm`-Duo(WCbY7Jp>hYd/dO8c'U[r:2qcT_0s%Ig(5kd3JP`^RLd>r8*3idc4u3IJhqtrsjhOK=j2Ao$5BBdolZ_3fF$9ZZdKkrjU5.:N,:>k-9@4_aapVah]Fis/(Lud[n$cO,u`5%@4;.4ZXY\]NU/RiIs]55^\qq@^iQ,4ZKC[]\3u.r#rm:kOt<]sAFj3u)@aYo$)+FT]T]W@52i!9<*sa>_R.Wt3IK,<_^EClWYEUb%q\5oU%a3gP[d63J'P"!/R,YG.j`@`o5*b7!#rD+>QQjDH0^Wp`%\L'R:;F<@eTe7[`*a[8PRuA3*<`I'Z^o"VB^-^M%%5dYB?I!r%iGjt4,@#4!V`naSSLKUdLW;\mO)T.N1iBY?cBLhm_rDl'7l\Fm+h$=iENn,+VqpB$Arj1_mAe>%@*57kiGjt4,FlZ(ZUhFCcBLhm%_rDlG7h>-AZHdT*b+m>BEKJiuK_Q!'.$'oJO$\WB5phYpM&Nd3X-t/-;hht>s#h_QdkogY'8d/&3r(Hi_rit6AYBt4M^8Krn6T7P%E?3I1iJna9oJ0OAg%WIk;IBoE$/=^AM]mnn)%b]o`*`eY#Koh^K1<G`;-Cc(!dh2r'OY9N_ENqC4qOHm%_X,$Q@WPiX5US"D_Oia%Z</H2,d/a$osGUZ.b4L917lkAL2\4>+,CgD!\aA-AY`b%ZLlTXZpEG#,LFQU_-jb.jf-.O*&6c"LC6-?FDhFh"pm:R0h:b#(/%bW%coEbl^q(B"WP>CT*THod^CG,`_=Np'X/UTO32+BGX>!g_R&j]:@A&IGXY=KlS?3p29'`%o<jkm;f?"@D?A5J_0K;k"X=S:]<*#U!%SPE2tp*]0J_>W4Nbc/&_m\B&h_;2rTc`&jg#+3O_d+mDeQ)OOU<iuo0m@8KYjpI=$P8.Cd<fN`R?up[Rg.IfYYo4)LYbGEETlnAJ%mP)ICf*13SienWB#)#+kTc&SH5Hs^>h@d_VjhsL0EQ^]KL+i2K*nbS3id<%a%IK\pE'm!OHe.*6$U#;eA9kAAl"C;+B=;o2/&:(,%`''<(j-?3o8&"><UOl"J0\E_<_XMU"/X)n+Q(En(ZJ;G;(Pb;MI8<S<)Uar1jrdOPo[Fr8nm2LZB=FlKJi-UnOqdCdMR6fK2B.eL%9$c1#\(mt@>n\'`3i(&;86_Bk$M-kcm?&uE.N![H_dLO;)2.))0q@GBAPGtfOY-$%pl5^jND6mW!Q2.j4(c1E2n745HXt<j$>s_#%YhGN=]SB$8s,N*9cnG%@*p$/gNCp6VL]ou')'T6]fWj(U//NVIO)0*F&h'=n0\im*/1$doCp_k3H>8LW\PifR[i#A_VqV3&[6\<V%Zg<FPVWZqn]DOTen;\'=3,XU-P>g>E,#Mu*oNXNL0)Ace35V)?EH`4$/g9[dQ*/VjSr6*&3NuA;.2'O6>_n+!nt+AePVkT?O(<O>%_FKP>.(Tq[R@LafaKEB14gdeggo8Z-&DZFg.E#BIj3p*Pgn_%9WBIQK:'JNZij;@aS[G`XQ<!C/ZDOPnaHen&N1YnlgGr;7J@"l#%Dcu@XU^K>n8%-'3J`$WjR"Xu:&88l?/b?5s<@^5?8%.3Pi5cQ6_fLdC@-KB&4bE`SI-'j_T!QITH*:[*F<cO4Vl1BH>%:aE%+cRm%H)7G4aHen&N:I5__]0;IE);#,EZ*#gSr6*&YdmX$d8=X(E*tAA??")68BhN*(QTR(Ehe3s"!d(mMY6-_*K]'^.T(+;oNXN0'`Wn[%X7?q0kaep\I?tsi5)-A?VtS2t3u-KS@?3,MJ#Jo@*802R8sbp&ZDQgOZ!6(c'T,ru%(@!,K4AOUQG'rc(OBhWCq3L'O`$jc_jE`B%Z=DA5`(EhmOY(c,hIL)Mid(XC)hN5A)gP<3o[Fr8Ei3A_"IA:e0joA:d>jJ?+g`ope/m:`Vh,.ukUlsp_<*NWe_IEsdSSNee/m:`%Vh.c1kpcccbTqR^)cjgPf(<30P3'ALU*uSJ&dJX40`JplQjp*EdW),HifSSt)jM6B0i*!t!t3)&/IQ/gf(@H5flF"M?jgDX^O[5n%&)8lib>;8dC6*1VY7`9H.,E&X4+eTmNaW2u;I8Ue4gO0E"iH/E"V.4^lf4:jJ2J-hC6*2A;o-G"\A=k\1Q5AG6+GrUF>Z4h5IS5T%#S`R=0::\O'Q0*aEJO&'9p/fHWVs*`7K^tfi-c=S"jdK80"F8m?%C"2H>7qGH)gsI:gq9,q0!03GbT56M?F^*cu\_IQ5^8qH%NM*%:q+sG-!*0-b)k0G>l8Tfnm2FEZ2gW7j+-X#k77/MCDV:LrjZ0XY@.L@jR,=j!(XNGDpYl`YgQJIA'9j$L9N[_Pm1I/8B[nOik%/+%\Y5qp-b"3QCP7B4mZn>t&G+CA\RSAe06u`8T!QITH*:[#L+=uBa+]Iu$MSATZb+R_H^%'B)\p!s(ms*d",qO5pC+6^(1g39m?&uE%.]oD;'a>*%a3=@dAJk&8PVkV38%.3P(aCOeQHo3AC6Q,@c[#`W$U#;e**[]`P2UFL>j$-uiT];QS!R>:4Vs0E>J>G!=s\e/7(a+D%Yc"^6\VHimcr5:%b?G]@5in[KLC6[e]-T-nd]d5/45W+Yo[Fr8Ei7>8P_^iGZAR]m*F[X+d]^[#cr5:%bFON+*sOLUcpnL?<UX&V%=,^DJWBIQK]aA)u(3.GreoDbcfEQcO%BD7P]Y[VE,J0M"c[f3"Xu#DpC`$O2qT]O5[7@[\WL2\%@?b&0n?6%C/b07p`?2M.[h>oa%&,ij:RnQIf(0@Rr9L?h%n6Gn=eCI)5e4NE#1P!<@fc?7q&MNY'rqJ+_N<HAT_hBQ`$H!PH4!mI>0(@BiaR3@Yd<u/HAcZ9c^`rE*%@0f`Y?0S=OZK4j#H]rE0".np-k29RpHNrZC_beqVS3;&=SVk8N#&oo%Th_M<$i?[UZJ7*"]?jK'ABUN9%Z-R+8ocVinp\dYp$u11%C6*2A;ea,f@%R3.a0^P1a%@DqR\#GXP3_"%Z*9#f9S.7E\D49@4elo54#ce:4E?5;<X%p`JR3VAI;0c>`*M%Nh"sdf.m::1[bRk/%-C:u=#8u=Y\RW.e>*Lm-[7@[<=7I!R)fLL'1_g8>iR>DOV-f"$Tr7V*Q91@J%'bnXUaArOjdsG)L9d\Sp;iO]Q!c'q"(<B"2'-XR%fWgmf:tG9g*ng*j"`?Sa`,HKG=K;M?Sn/5qG+n*Y0lr-1?6snfbjZC.^=d8AqF6ST4Vs0l;.QH]?n#gDYm/E!h!od<U6V[n(OBhW%CjE3nku'0B1>2!_MT<5<cH/P<$U(mf[bRiiN+]dnL8S:IV;k-/QMRJ8$U(o<,[GqI("rrFR,dQB%^1kN>NYg[M$lJS8%-'30ec0$%3tjE@oOMQA8+hVqR8-Xdl)?hOj\>ttSHNPMC#9f^CpR]$"2T\_MauVhYYh[8Gqd.%XPB5]Vmg)_"2T\_MauVhE2R.gqB!k5A_7hg%&Q::<@[XY5%m.o<8ki+KOY(c,\7#Sb\g@o=ff*GZ=ROB-(OBhWCq3K\ct.HS9P0"qEi(Fp+ikGEQ(H\S>OGJ[DBH@j-M(?Ti]WcF%bA]L@PVkV38%.3Pd$@\AObRKP/W@56g+o#[:tG9g*nbS3Jp2E6]9e):N)+B08f>d?Sr6+E]N<2h,S$3c%Dpd,m(;Ud?Wb%hF7I<Z%b8V1OgO-?n=#'cndgR1Mn^^*2do1U(bBju<2&)EOd/h-+`.j8"pD8-jO)2@*8JRkJm8o\IXj\5D(Co_)ej<1"OY(c,^1*XOqEu2T%m(;%.f`%"gZDQgOZ!6WqXFVhAZ%jEgnNQDE:.&15F7DeepF:.\WMe7e*Cpsc?T.@UQ*A+AH7g8L7GOh$4QhoCT<>JEc"c+@IdZSq%:[O8rmo<c54$3P"ZcYpl2Gcs3HNmKS9F+qf3IC+Y3u&/e#gDo+&1FLN#)/.oY,8,ja-IYRO66N>=V<t:<-s6i?[o]7;u:(JN<X6b%JS;/B['tDjljac@gu^rL`F%SMl;e!W<d=%e`j:uW1[S#@6WVZWnOJla%?(Pn8EPn^5oA)l)lK;\o[Fr8nm9;_5ta=$a%[<X\R8n4%*Yg]!HDRP5a-IYRg*$P!BiC:mi-D":F$V-p0D*a8flF"M%89p#d&1b4ZmsF*fs$_-:tG9g*ng*j"n&H$`/G#>0S]1bp#B6mH7g9#%_mrjb=I4!p9I<T;V3oV6eo+?ucu\_JQ9,ficN0A^E3KRT(h7m4WXV<udo1U(bBjskgZ!cE3mTc\5&D-CZDPr=#sG[d[bRk?[WjdZ%`t8E("c2QM@p.r;=*SJ0I.Q2a!iMB9aW-%hB%2JclaM;GnC7I4*pu+HIOZldg-id$?q%D1ZE7ttkMhOlVAfgM0+%q83SFruka('\%Lsdg>at#S%J)+uiJalC2F.LDAN894k-WA,'H>8LWH*:*o4H%*"^pHbh'L(rt@BhI'>j/.MZK4gbB;XT0Cai@$hOq5cG[OR:2*J?;%[_,\`'X6+r=PtB^c6_m\OX5Vf4Vs/i\Pp>[0Fe0l#@SGmDTf%RX'Y##GU1J'$:^JPNYhkn/N+R1C`:HbT%YDnmSjV=1rI`)a?.jF%U)8&8L)Yt?H)7G4aHen&3\q+oK_au2i>\/.XN)O"dSkL'bFOO0AL.U6b^61;5t&@;l]]s;H7g7a')P]5mT$\:&"Um(6sq]Q[:Ob8%rBeiL,;5p4<+:FP*9&+H)GC6ccs6=he+$^@f(>IqG0?G6X-o>[dVAQ3kT/^\+l9c'VtS2t3u)7uhhLlDd_N/\?/De&V00Gt;gW&u%SP"X;0H^ci2)GJL@$lZ:c%b=6PVkT?O-sdCHPPj]QieH2_^L4C<p``7oNXMAjh6PAmY5,lJYlV1Vg7_OMcM2$0(dX7flF"=RPJ8i%c'8qX@.elep`?>WDWn&_b)K19'o*0#E2]31R)W(CR2p&fM32FF:[O8rmo:Kh$B,B_8.8lClZ(*g0C>$rMoX&<IBVXM=U>-co<]_r%lp9u?m@D"WSr:Y3DpuB,m?rOC[_2XE7iAgJ#qf0rb*np.a)61+!gd4T@\.cE!jab&)'0G;jcuFk,?sS8B]fdDH0%,`JN8+(pC(\g%79S)<HXt<jMSfTLLu)s]0T<!AAOS6']?kWh=SUXa;o,NAM0[qiB-<X"m-*7ZS:i'IQ(H\S>OGJE+:jj7=PLc5OLJ^:<Ek\F4gdeg%go2.GLD_X53J>`r(s-iOC.K!8CSds&=/DM$e]7bPl8YYqs2:#*fDhZDMaU=h;u%$K)rDfJ%<!N70//GMPoZoKLh_5g*m&H#@MAAW%+P\c4Gt-SO%E#e779S)<HXt<HQ,6a:+9Ze,SRI$,Q8LDCF"g[Ac5sUZ:8NqVM4%7&_u@N-g#RmnVPj./QM2jARDifrZc^KX40i@m%MXjBc`?SOR<&00pJd@uD=MgZPL1QR'ZDOPnaHeoQ?st[&`6eYK@6/hW9)kIuG\V_^^SX(!BH(AS"/A!=SdJjcihO+uQ+&MTi2Q[;%h+f0RnrX'"-5MaNH^70$5m>TR+56*->)es5LhA33iuR/NN>NW@j#$&J5`URSd$HR8%u,SMZ%O;r08@O()S/2o6rr8+94s#lI.rN9%gYWAn^*<lMK0pheet[Uukdbp`bFM8+*f(]jQl+e$L_"j`[m+3_\Tm2gm>X`8kTR@[Da[7-eneLHrck."ifU]7DH&rE`.GJ8I'-o$%n3SL"f(@H5flF!"P9FOj&_;ggCmjT.0/)tI*ng*j"cfG;X4p)iZ*W#2%pN*3`le`Q[7@[\WAobV;WnB)1Mamo@5Mguf(@H5g%&/i%^p+SHbba*_`Ma[KbQlgGH(h/0aHen&gl)OS7HMd]N?sqNL:)1ZPbG2C3IC+Y4-a,@ogiX*F?IJnj-(]djeqB!T!*eALDWfZR&^'.%c"D=f*dE#_ggV$B1('dD,L?8Ri<hAs\dT"nq%1H]*BRkE_pJfem>l1;haf#OJnD.?E.W;=_SX9PQ+js36;R!2/U&\A=CQh?h?.Ql%U+I=*obVphO"sddX+F3N'/C&@Mp+Z*APS7bY40s?p_`$\,1K:>:+<"qLC`gEn_qE1DWn&_at^nq8q1E!;[`-ES_l2?VWX"KHFIIb%+Cb9@310OZi(ap[0!318VI5I)j$Q>WJkWoc3ZA?9CVAM3Km-P72-X93Mngi*(Ot!7%>eKg"2WLt@ebf:1Z'K?3+kI)lP;O]Ses(u%&>QJX)qN>\XROa=plrfg@Q^j@);\<(A$Yo[]En+MQ#@2:(^Pbn(BJDZ^oh!oK.$:^i1qDNV8<_e;WahjcII2L^3&N%lag^KIc-b9%H>8KRW8L\[_DG;&I+])ePL>ci[Ghpmg)mL5D^6P#DCf%kCHB@(Jib<+jApLXrb/pl7UeJFq$\3`2X_N%fc"eKr1L$nnL/&^1;=QC%X*6g=\0R*C&&<=p<4anI1lL/M8%`Ph(uN:6/B3j]b`<ZOV5O%NV2i&enX^g?#3I8p&jP_5K+%"f:tG9/4a,#>8h\?Ol_lh@/`SL"%H:2hRo54W^0gKSim(3c(6\7DDYeipF2s)AT]oCNOaX@?09+j%"655f0V))?9QFVJ$q*ImEOY-$%%)(8SU\6PQUS.)q<im%sQ(H\S%>OGH[=n9`C=4LgYYRO6GdX"$O\^[T_KorRD7OFoP'&9L?k*\ObS]D-q8\'UXRMfE;6S-(pCVYo!_JhqRbHgJP]?kWh8<u=PQOMt(%oATTM[m$(eB-e%!:!^d'=l-4'AN='t4LDM-267=&/p6%MPb88Ho3gi<_6o:7H.9\kDV@tj)pk\4K,pBqlC$UKYt?Ebn:h&^K;Ge`%.E\O2$U(mf[bRkS*;+L[/fO>$bP6LTbA,<`Dc23\kRG:dI61XdX$A%>g9;?)[\U"oKM6$6Ai-OhRgCSl)!5+^+;_m)\KIAN0D*cn%fQ*b7F!D3TDhHdeIb\un9pq;AKWltjRaa+$)tm0]g\A"jKRpZ_]l;"52K$_KbrCY)CbqoRW5sG:`&IC,;!ILU0(dZmA-)7-@q6qn%J^[Wn,YDm>;+OWWnR?"N1S/OP9GLI"ok4%SEU96\BUu`@@pq3'L<[aUJ'gT0/67"HiW]Q2.s`"XC4C'1d2:OCK(+N7%C-W;B,&gb%CYj`6TQeJ\6/Sj"M[Af0L=XSb'G:R[8oX5F9`>A\(.OdJ@$`o3="m^?(q&d&fqKOLksE_8*sZ>ff,33"#KBhcmZ7Q^)T=Pr3cI5\%.)^LG9/3jN-KC/m>osolK#/#BB_")Jk;X+][3HX]%`Kt$bR6SA5IT?\N83po.NIAiK-X">>Y66i]SRZSHXMO\Cb@$HTET'tB;tN!%A1\1/YX:4,k*Fp`>%k"-V<c?]jl5is=ZS83c4)qE8%.3PoGmBGKA1E`hN32@UR.1e[OI6CNTZKeK>3L78iT&kI`XcF+lQ/2SK4.j%(m`i*(L2]QKlc+E+S"iF;MVcUJ5r!j/FH1p;SK?f4%FXbkRT)!]<FXY3Fe0HDImcl@qQAhAFGq50M[X8?0F:qm$9_uSu#b:Q9OUT%j)Ucal]cV+$QW-\G?&iFSh&]a%DO/U]1@H\X!R,Z/97g]j]+q!d@%-XlPK;7@OLu=knD.b4+kODR!Q%Zis<LRI[7lc_Vn1EV;9h0%0KrtN7k(^._%6`<(g]JAA$q*@][0T(ABUOdaO)Cu][2&H\DZNT4(UQ%.4Pbqf\(MPHqc_0G?ANc;Wc0[4$+3iW,&NJNl!;lO!NR2%VfW]@)RX]T^%$`7Udj\si+7n9NX`j^B03G0@J%BOVil@n.EbppS4`%Abu$R]N[3iVF>bK\Nd'I<PoRLR:rS2&qUX04+Ku-$!jbfs%4G4CU>Eo)Ld&tXJNuG$;4aLc+42J-tPqE=N'K[7/keh)3ZU;(?rE_HZ%pKW/`aft2R_!&iAtolJV5O%.QM2jl9<.2`[db.+6D$K+%3Tkc,'VZee\5?Ou8EH'bZm":Gaq:9c$]th*Ek%-tPsc8hZe&N,&-XW8/`Um?O*-aI:(j%qH4R=SG9dsu!9)2)*%3lbg+1\+Tp^mC%'%+Bf)8N)4*NKf$]-k&1b5kt+psHhT_+%lA9f1hB[BNT#X>-esB8:)Mj,#:iOo[PlP3S>nM'pT*S`Bm.I"oEb-J6.(@On!g_^g(Z%<>&Eq;CoI33O9]=$:K0)%('H'2g*;'o0'@BI*Pt-61;&1_0TQ6ILY)F$PsCZj6>htfXTlE3YX?^\taY5jC]FTQ5*Q5V52DrmJdD,%a.]i43MiQs1A3Rr8o'sDTol*6n*H2N?XWEMPV(pC:C/&q4F<$2eI=:^C$G1@]K`u(e:!/%KMRl\Tb60<0R8nI>Ioi1bA'kqS>AT<%A/8tc(l`XSWYZ/Ipi+N8$o^OsFtAT-i3UmpGW\X*AL4@PcK]tl5SuT,eA::SiZUCr]fXV)0ZE'T]T*JUCo&k>ngUP^'No+mEaFni%`'&6m0YeSb%*V1=4l(UJ=..+#e4>i_ZU;(7;7'u>4Th;D/)N),HV`uZcPJT."M@_!?mDq-:,1`;m<ne&@f`d0'm=8FQ\?I6CX2u3%kHVc``gQ:PS`Mkl#R1Xs1?]<?,dDTt4^:*fq2uR'BGg&CLLu8oM4)%P)8MH24'(F*(qI8HJi#ql!FMc+;'_^5K42ehV0,mdC.0Jm%f%$G;,s%k256eiK#NB2r?O&YLo6g;XS:mJBLh'Z:QLtVX3G4Pg`0+gc;XI^Ye/:hoG$GNeWK+'$X_"_(1PotE]LiA@>p['l6*;X$%M='kjmrF!KW)S$u)i;fRjiP,,HOn6P;gi!LI`0(\/eT)M.'Jeb`[mJ9*TPB<`--En(b:bO\d_co88NW."`Nt7ZpjRS7OpL9%a>u#%4/KTM$l!A"mTIm6r/MS"f`KKI3=nRu%U<8A?R%D*Fg?tR/scGVDgKOQ+%3if$c4=hQj5\g`j^5m,Y3Xt>ue7A?>fAoSB^V]3fst<%RVG`4j%33V\UitiYb.js=$oK13]e+s1!>e_aZu^%qNf[;,^.7!lBbN'[N"dF4gFAjXOoZ=_5=9XO]?)BKH1FVPZ[%tG(u-D[]IP=%ddl*WfQ3R$ntoL6&H3\#6"0QBW3hGYTlXhg;I5jT#&cDN*s5l\="PEpm-N*C=.3l%8WX?bqK^9\NUc-Tn#7dlOSU]0_8_[XmCh\'%aF#dPjX?pq*Lb*`/[O%X"1<)^h6A(]'94I!g7+Tm"WVci0tb0$1O9[T>)-\+L1%IV:BICt@#>'Gb=BjJkJ[^8a34sGiAu&nV@49n%j1f),/pnY,j*;><j5ZahnA:,<b1rLfZ1N,l>$:RC[EaT7oEX#+-.gegmd/<EAK&^N,YT'c'X?nootp!tfdq'?EiaX(]sI6t_$Cn_%AF11iS-_-l@+?Xkcn)&cf^<n)5_:CM43!\\T*,RL/,b?FF=7:rDH#q]T#?lEaV'f4/GkW%FNZiF=<6"*M&/j=*L[_W`Dn3M1>E)/%Ko>Ybomih_F)>RoEu=,OEZLG0k\"Om\LFZ:1/V!YA_Al+Bf4^n8,Fs]2-tI`fqFhqbAgMp,f>HSe9?iZX1r814>'0gHnm,Z2I<`6%oDe3E#gqhW\klDKm*I<Y/;YBR7g>[uDTb$2o93jY$sVrI^h;H]1:7b3@.Y_AZqcpq]#Cs>M*bYAi((F^#l^Jp35*TIc1%I%@nD8_%\A63:]4G5LF64sjWMX$L@o94,fbn@=9'^$PWMZ1:HfcePW5B''*6/nVIo;9iH[m0V*6n8X'M*[W#6eR-m222?a;a!.M"C>u)-XE]%)9)gFN:JkQFVrP!_JI:r_n.YVYqN8Q]qrmj4$+3Io1h=IP[1rk&iT5r;"\VD/8eNS[fL8N]V1R)3+hXb.\4I2R-:s:PV8P`L+AX3%OF6"NJBj1/dCnm-!KpO]5W.mkU/IHO"`Gg"^hr-[U-dBQ1W`]ok:hio$VlF>?_6]AJKNW#Otu06hR0[WZduEY`o[t+AfX[imoU'8%f),Vfjha*eC?>Z[@,54T[5k5(&nbL8jcm63'-f]V[0r5.f#[aP#!4ZJ,p^cS:I<BG90Q+NC`&MhS@8KL/iX"K]c6ATG7]M81WisI%Lc@%C>DDi&NE\!t>RekE(%GhfMZKt]GOu-&:+RQ`.P&U.:W5:a]h3)oRRgXdGKf^n9>)/dh)g.%ekqT7/"Wj`N&!>i<@fAK1JjB#%Es[HKOD>7I8$6hV;.kYrR1=hJ,kMKm#XMCu/;CHB0(JQi?@g-gL5((BPd`ZPVO%A&qb`)2C\]-h)s)LDo`T;o'@VOCKac5ac14$$%\IG,/#30`mo2R3c'KW*V7DRh$7n8fI6?/\7_dLZ&3+ZbY`1*6/_d3=s:8Ygf\GI$->C1;T5_hZi<6EmY:+;Ank=p,YMfUM$8mNK[%>e#clZj3up.=n);ajOT.HnpqF_*M9DkssJ,HQo4&>@E;!M9_"D'M*Bt7G$9K/u^:<E0^i#dU"QIKG7O[RMCR&KB($0qO];Jh%t.;%m(&Q96SaR208;BTTfIZlql_F\SncIpHa5"7l%ZTU8LtYe*&rT"F?@L]3Z!FF+HYfTDUF!P7F'UJ(hKkJFg?Z1]NHe4jrD@iKT%lO%RL^r9@*d,YKfQ49F:ok:*%(!Cotm.R#9gbnV]\mfBV>TQFYLt.j#L=\8[GIujiE]h6M$cbT=l((?0)JZifXYZY#Goc3u2G-;,N18%U4I398UFLu=q"5ij$5HC*A,&6eST$Uk(6*r$GVXcAW5b\3Tk-Z@c/)7fo)P(3\Z0m58K+X!"?'GlKhW?$'`+`Yu3E0B2WrTUpV&t%[4.UI3X#p>#V[kuB9]qtTqiJt6ab$F3H?F3OmXJnQG",=arFIVRDSf`lNeXi4$,::3osHV.n,XMcM*Vr(ktlrD<)2SWDJQa:BSN+%^R\6ai0oRKYmaU$/=%M^@[UcTFL(8POP;2"P3YBRAmnn(*e3VEd*0t?Y"EL`RS7/WGKfbjZb72jlcr-1*%)V-%'2,Q\CLtq]@-aa%=^jM.M^?\O:6pTKil,r`s02.*r\[pR!ipDj"oObX6iirifUfP/.$SD:=CnKK@?oNdHPY&`'l^8eUnMLg>IAu-W\*eOIg[[]gTalW%l;pWDVdX;!=Y-B\@&#EW0me`*K/YLe_Bie[a,DdE-TZ?IV-ni$"QDSfd4Jqf-n#dE;.pDH31824Q%>ciOr$baQ-*PRBXg0->.TUP%@Q?2./0e.ZP@ZC!#[UX^\K7*k@:P^Fm+LDk]0\,Q.YXInW<=5H2<6\i$@aZ[%sLj4]V@`t^e3_:EY<C.W2#KPZGbtLMrg2"aV(d%%=-gN.K$;OUS6IrZd=OsKZNposH+7?UWg&Es$bb>]Gor>-LpZ%M*>dul^hnU!`/8Xe?jg02(JEPqF0Wpnp(;(5g`:XEm$[=.JV&M)%b?eAW[25-6;qOc/49J[[I"t%uk]n_IOqN]bcc^3/iltN!Zn_c-UE?=j!'<&spOc>g&fmZO/1l:]Me/QtiFE8^>.n$5R@c#TeRaqU%0.i!e"i&RmSqI)Aj$8Ahf$b>$b**M^*)(H9<0s^.\<((NCSl(p>`B]_`$e[uI*HCn#lGPmLA?DsF3617ICC%c[_#tF9.Q680;eU(%1HCJcc9U8@J4"rSE>We0UtFBL(Vb]/eE;4TLqKE@-g6kJGN86+DSZs?3V!_rd4^dsMmhJE3Z@]@98oF>/KGhm.]]8@RUS"9iXnPf%fU;$Ba\[lD6S(nu8]VTK%U%luPps#/AsT=i<;*ku)oL%i419O3YY\.'bJujcF*+R[1FanF6]o?NkF`S`6N]Sbl*Ip&cC#c?L8pK[%ZBl?FVM,6jBSYf.aC3o@kZABJKBQ!#q*DYr>P:bMs,H"F'T<;\#>T4Xs%0a.'WjqE5qQHHL96suL:AA/%6`#nBg\sC=2Rm!@d*'r%+D'46['aS/F84-q8$?:<kUdeq$?;QjZRt:n)E]B=]OPO;I6jAi\G@.U.&[aOp4FHCns!h%8JrlAc<UkKWe/3OVJEPMUa;hU'$_>$%$qKiD@DlZqb-2[pVTU[O8&!h!];,/o#s0u]?,26<HnXNu-g3LJ+4"2lYTqB@qib\_(.*'$-dIN'#2@p,<d)go`N("Ra=+Y+;`!,[%[rsC+rb0SiYo<kbG*s_K-G*TUPp\nMU!'>^5=s^O^5tsl_CKYJ^3^a8*jh$;XC'K6$T,YY1QL>bC2&2?/6*LW@FbMH+=V$4`(Kf6%))-0RC^IS[QlA\&r5GrNU$H1@E^:?ug(NGF>V&C5ZDF`e=Z'F+6\&:P*d2K*9D'dEFrV>mfV+_0-n20pjM<ZBdkMeB-*GU>#^im#%Wf_b'*A's`YWU`42d(Et>0p;pH^qC9-qpr^`'lSB02(u'Z>r\j3Y'[u>Ku7W<hATKDUf+Vd*8c`;l%bt^c[$MbRVl!Ks":,dN=#&%R>DAo+g$Hhkbol/)+m/g)#Jn5>HnY3rG"itrP]76M9g?As5pAQKd-]RNoDT=]?gc(EOE]`e(&?#Ulg7&<1=?/?LWf3/AZ7LqN:>9%0n+crRcR(=hK/MbLX?s!8iA6sZ5.iHd4fgbK5r$m-K8F#&S2Ao!_:#X)0oM#45>`Wg[X)]g+N!`L9e-&/Rbp%?1tU1k,F?ZcITMZ%@@0`*2jO0BUUcu<Y!8T%'+f^*j\ih_-LT.hbtQ3DfdK@9BX!J_+3#>]#<k;DaEMHpB0;I^#g\M:_MgA98oT\oU6g581H\7%lmRV4%@[F?lYNu[G"PV/TV!SR2a&I46Qc8dNNoKsfG.kiI%fR0[*)(PHJ0MpkG>p\U!]g@?Nq3o4TT`ieouDYcjVU$/WOOP?#<kAFJ9NoG%A)+$O+dsU'.tjjk=q.3b!X0HDN?!,'AhshqU!5\'QI9pj0k@Q\DFn(0di,B4(nF@T"o:u+41O</Y'(TKG$aS46P2E#o-KT+IteOI%r.J.P;A%oR-Cl0G-&Mo(Mcq0;KNfsM.+ks))I_J9qf*)Vd@H*+4Rp?OKRM'l8kdnU)A?dG4J"Bt[D/e\2+p'@T^81rF0cn3/514`%M<1e/j(C0lP'i_9/CL>G1@t'Jc=ZW@`!i)@IY(/[RYGjUP?u(&m6YBJ&n_F%YqYJ6l*?Vq>'Si;@Ji_k%l(J,%<lT<BA+&^/;;.]%K_\5p,1Y"_:a;9a)%WWXZcq=hChBVM4IZM1GbsaN:Fg*?MXn"(nPHgO`Cc,A[Y(Qt]%T1?2J9Yl>hBOi:=j[[(a1:G7_K2$)A=Sh%N&i3Id)aZ'&QRE[@"I:9fH%#A)4ma,Pu<skj4502L\D@$8r/?fE%nW?0$$:UgJNJWAJaT@TC%"F#DL]gNo_p;OnuZ,%dn'\X.?#V%%,*=.3>8`P;0S9CNQ8Gp02\dY:B7#p2D[/sR*ELE9]g!Cc0UZ'ogV?0L=Ug3'EetLb$6ccJcKOT(CfRu-gsXf:hi'm3"Xd+dp#]5%at*,OBsocs%Tk9@nlB:71g.9%`Yalm1<]/X=aDM7AP"VhZm?5D(J?gX10\?S)6PP)#>`g7'Ei`ijAGebR:r5G`KHt!BhKMT/'CI"%9J2VnC0rO4dhb[0V;iAarH5(ZOK/7]-s@q$+<NtEk^eWMVUf7&V"+jM7c!>=bA"(F15Eb_]mB/BKe9sH:tUrAag,PS=n_<+ZL%7?%ZL$,rA8*J&NA;K5fjr`>"D-8u$,^fU'9jeM)l5*4UTH(os(o"-*OOL?oYr9%5$UpMIGd%86fA-Mg9QdM-d+]h<L/%?B!Udp%Ec!&%K2%Y[>%G)6E+h"Bb;#3Y/GgFVAD-,^Q"?S/Sh+IH=rGI4`GFc.?CSo1QBPoJ=\_k\ZBR6bp;J_&#]n86ld=<2[ABt$c^(jtX=\"E%_JCZJ'U0nsNf;.Kmi*a`V<fe&/GjT2D(0h[AkUh7Ub--kheWTH"RPu2o^/!OV<h#XQ@7NRA1=!][@usASdftWYr3$'1,p5qSoehk%#;g$[3Ee*Up4Fa!Tc?2BL2rl#=MfobSC_C;:;tJDE[4@`at_/o;N;N-9.TV/PGOdb<L3SOp1u2@PI75,Tq<n5@<ZPpB.!;8KKoU\%e[epV8<;G%_J^jG*hm8TUu3WS:4`UCFr:?>B"M5em&er;U/>VlY8a!Q$;mZ0,u3B7.=pfL-+(4jl?r>fMV:rPQd1m0<`E9q7,6Hn%6HEn7M:F^mHFf\_Z'<ViZ_`?G<gGn;raa\,ZYN2>Yj6Dfqm?sg;XW2)/`gFWD(/OJc'EC$Pd5tadnk1I+p8'DCYiJ<Zfi_I=Gh+C%4&"\4\lcDlTn`4LJPhl`I3c<IP,Gg&93BD@C)X`hd9`D+/EOF@o+!i_BJ*Ll7[[5H/@2E$.a'`s$`djsXo$i#rr:QpW3pIZLuY,C%ha&oH%9=Z5Z"7iL*OLpVZ,'UE(h4C,ZAgFR:0?7h5Floeh8tAUU:9:UX)(qe8QJU\a.Q(#_FmtEoVj!cU<VC4Nm?67Y<0Z(XlV*9%6fs?Yk&lGmXA6sMLHJJ@G-AfaS#fK.r&,q?p-hFh#cc)6%Y:ib/q%J*\Z9B1DSj\]XLkrq1YruUqh]?1>XL.AHIhKqNk``j*Q%OI%5-L*'NUs5/6#:0k-W/lpPFtbf6Dl,d'%VY&61g+(&S+2%e8e$Q]W*)OXB1LIE$ceWH-V@:`BHS^^gkrZFj,O@6_`h^:D:r1.3ikr%"@F'[`AdOM,f*TgR7S-H);BCj>Cc$a">1qrpi8".8P>J89])@VRW>)W/"Aq`a-t,YMFfoc''EC`[Oc(3A;0h']1nCMBTi!MJKP),%j`:t'"#bYsO9`Gej`?4ADj!%)CHj+R,b#6-0M'RA;sl0AC"aD8egA+a$.=mgPZF;W+a?,>3+=dj6^Y9-=NO\@ggS0c&g/sXHY1b^%+r_j5a[dBEkQM76W)i_8LV,?i,G.%K$S@qh"lC8JkmmMo;G.5/N>CK2M1S]:g93(3KmoCdk_2##naR0Aa!gSqJjQY5']d5?YN1*X%O3/mCVh3>O#+&3N90&:8,>m=,L?r9!6Joj4oSeAoU>\Kd!ICJ2,+'d7mV!M1-!eqeObbSdE]5GIE.BP*@jN(35M]ARHLXnhIB&7;%;F^U]SU.1tK>[$+SQ.@8[_;,2?aSP`bG!?L*DUZG?dklW)^3`jmR&VQ2oaX_LQd$iBskSnS\*]r&*d0m2#MB`rRO.,c[KV6IQSXj%a(0EnH0._5IkO:IX#8[.\@VCB]5?*X%KFHp<_m#\\V8Q[$Ss(:dfg+8IEB@;P(hSPKs`37CJ#B9jLBGP@3nEo.6.H'aUqoQNe!8p%TOe'Ug&4S;rfWheAD]&ooa@)Yn%MDX1];Ip[T]2>R]dP)mIfu4`j<!dZ1p$>gs%g+s67O<G9$TA2=1'mdr9?BrASIM\td$';o`g3%Ha*9p8bcb7nc#ij$SsiJd/~>%AI9_PrivateDataEnd